/*****************************************************
**函数描述     : PB网银域与统一支付平台通讯处理
**函数用途     : 将网银交易报文转换后发送至统一支付平台
**输入         ：
**输出         :
**创建日期     ：2015/10/9
**最后修改日期 ：
**Create by    : Ma Shaojie
*****************************************************/
#include <stdio.h>
#include <stdlib.h>
#include <sys/types.h>
#include <time.h>
#include "pbconstval.h"
#include "pbstructdef.h"
#ifdef ORACLE_DATABASE
EXEC SQL include "pbranchdb.h";
#else
#include "pbranchdb.h"
#endif
#include "pberrlog.h"
#include "pbglbvardef.h"
#include "pbbasefunc.h"
#include "pbsrv.h"
#include "b_dbbuf.h"
#include <stddef.h>
#include <string.h>
#include <sys/socket.h>
#include <sys/ipc.h>
#include <sys/sem.h>
#include <errno.h>
#include <netinet/in.h>
#include <iconv.h>
#include <sys/ioctl.h>

EXEC SQL include "pb_s_agt_batch.h";

#define  MSGBUF_LEN  65560

static struct sockaddr_in sockAddr , ServerAddr;

$struct s_pbbnet_tyzf_mgmt
{
    char msg_type[3 + 1]; /* 第一位:1-请求报文 2-返回报文,第二位:报文头体部分 */
    int  seqno;           /* 序号   */
    char trancode[16 + 1]; /* 交易码 */
    char dict_name[30 + 1]; /* PB数据字典名 */
    char pb_fld[32 + 1];  /* PB报文字段名 */
    char tyzf_fld[32 + 1]; /* 统一支付报文字段名 */
    char memo[128 + 1];    /* 备注信息 */
    char backup1[32 + 1]; /* 备用字段1 */
    char backup2[64 + 1]; /* 备用字段2 */
    char backup3[128 + 1]; /* 备用字段3 */
};

struct pkg_cbs0000120
{
    char    cardAcctFlg[2 + 1];
    char    payCardAcctNb[32 + 1];
    char    payCurTyp[6 + 1];
    char    payCashFlg[2 + 1];
    char    payCustNm[128 + 1];
    char    payBrchID[32 + 1];
    char    payBrchNm[128 + 1];
    char    chkPwdFlg[2 + 1];
    char    pwdTyp[2 + 1];
    char    pwd[128 + 1];
    char    transferChnl[2 + 1];
    char    fastFlg[2 + 1];
    char    manualFlg[2 + 1];
    char    rcvAcct[32 + 1];
    char    rcvCustNm[128 + 1];
    char    rcvAcctSvcr[32 + 1];
    char    rcvAcctSvcrNm[128 + 1];
    char    transAmt[16 + 1];
};

/* 农信银网银试算输出接口 */
/*********************************************
应收费总金额	needTotalFee	D(16，2)	M
应收邮电费额	needPostFee	D(16，2)	O
应收手续费金额	needManFee	D(16，2)	O
*********************************************/
struct pkg_cbs0000121
{
    char    needTotalFee[16 + 1];
    char    needPostFee[16 + 1];
    char    needManFee[16 + 1];
    double  fee;         /* 计算出的手续费*/
    int     isFreeFlag;  /* 0-免费 1-收费 */
};

int prepare_reqMSg( char *reqMSG, char *outtrancode );
int pb_socket_tyzf( char *reqMSG, char *rcvMSG, char *outtrancode );
int deal_rcvMSG( char *rcvMSG, char *outtrancode );
int getXmlNodeContent(const char *xml, const char *node, const char **content);
char *sca_iconv(char *from_charset, char *to_charset, char *inbuf);
int net_fee_amt();

/*****************************************
 *Function    :	pbbnet_tyzf
 *DESC        :	生成统一支付平台请求报文
 *INPUT       :
 *Return:   0 - 成功

 *------------------------------------
 *Author	Date			    Action
 *MSJ 		2015/09/10		Create
*****************************************/
int pbbnet_tyzf()
{
    char  reqMSG[MSGBUF_LEN];
    char  rcvMSG[MSGBUF_LEN];
    char  outtrancode[10 + 1];

    char   err_code[6 + 1];
    char   err_msg[256 + 1];
    int    core_err_no = 0;
    int    ret = 0;

    memset( err_code, 0x00, sizeof(err_code) );
    memset( err_msg, 0x00, sizeof(err_msg) );
    memset( outtrancode, 0x00, sizeof(outtrancode) );

    memset( reqMSG, 0x00, MSGBUF_LEN );
    memset( rcvMSG, 0x00, MSGBUF_LEN );

    /*网银交易码*/
    GetPoolDataByName( "PBSYS", "RTranCode", 0, 0, outtrancode, 0);
    trim( outtrancode );
    WriteLog( ERR_LVL, "outtrancode[%s]", outtrancode );

    /* 预处理 */
    ret = Befor_Deal( outtrancode );
    if( ret < 0 )
    {
        WriteLog( ERR_LVL, "通讯预处理出错");
        core_err_no = 99999;
        strcpy( err_code, "99999");
        strcpy( err_msg, "通讯预处理出错" );
        PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, err_code, 0 );
        PutPoolDataByName( "BUSIIB", "thsdesc", 0, 0, err_msg, 0 );
        PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, &core_err_no, 0 );
        PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
        return (-1);
    }
    else if( ret == 10 )
    {
        WriteLog( ERR_LVL, "手续费试算交易可能未调用");
        core_err_no = 99999;
        strcpy( err_code, "99999");
        strcpy( err_msg, "交易流程有误，请重新做跨行转账交易" );
        PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, err_code, 0 );
        PutPoolDataByName( "BUSIIB", "thsdesc", 0, 0, err_msg, 0 );
        PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, &core_err_no, 0 );
        PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
        return (-1);
    }
    else if( ret == 100 )
    {
        WriteLog( ERR_LVL, "与统一支付通讯成功，但统一支付处理报错");
        return (-1);
    }

    /* 准备报文 */
    ret = prepare_reqMSg( reqMSG, outtrancode );
    if( ret < 0 )
    {
        WriteLog( ERR_LVL, "准备统一支付平台请求报文错误");
        core_err_no = 99999;
        strcpy( err_code, "99999");
        strcpy( err_msg, "数据库错误,请稍后重试" );
        PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, err_code, 0 );
        PutPoolDataByName( "BUSIIB", "thsdesc", 0, 0, err_msg, 0 );
        PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, &core_err_no, 0 );
        PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
        return (-1);
    }

    /* PB与统一支付平台通讯 */
    ret = pb_socket_tyzf( reqMSG, rcvMSG, outtrancode );
    if( ret < 0 )
    {
        WriteLog( ERR_LVL, "与统一支付平台通讯失败[%d]", ret);
        if (ret == -2)
        {
            WriteLog( ERR_LVL, "与统一支付通信超时, 当成功处理.");
            PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, "000000", 0 );
            PutPoolDataByName( "BUSIIB", "thsdesc", 0, 0, "交易超时", 0 );
            return (0);
        }
        core_err_no = 99999;
        strcpy( err_code, "99999");
        strcpy( err_msg, "通讯失败，请检查账户余额以确认交易结果" );
        PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, err_code, 0 );
        PutPoolDataByName( "BUSIIB", "thsdesc", 0, 0, err_msg, 0 );
        PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, &core_err_no, 0 );
        PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
        return (-1);
    }

    /* 解析返回报文，获取系统对应信息 */
    ret = deal_rcvMSG( rcvMSG, outtrancode );
    if( ret < 0 )
    {
        WriteLog( ERR_LVL, "解析统一支付平台返回报文失败");
        core_err_no = 99999;
        strcpy( err_code, "99999");
        strcpy( err_msg, "数据库错误,请稍后重试" );
        ret = NetBank_PL_InsRevJnl();
        if( ret < 0 )
        {
            WriteLog( ERR_LVL, "插入冲正流水表失败！！！！！");
            memset( err_msg, 0x00, sizeof(err_msg) );
            strcpy( err_msg, "插入冲正流水表失败，请联系客服处理" );
        }
        PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, err_code, 0 );
        PutPoolDataByName( "BUSIIB", "thsdesc", 0, 0, err_msg, 0 );
        PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, &core_err_no, 0 );
        PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
        return (-1);
    }

    /* 后处理 */
    ret = After_Deal( outtrancode );
    if( ret < 0 )
    {
        WriteLog( ERR_LVL, "通讯后处理出错");
        core_err_no = 99999;
        strcpy( err_code, "99999");
        strcpy( err_msg, "数据库错误,请联系客服处理！" );
        PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, err_code, 0 );
        PutPoolDataByName( "BUSIIB", "thsdesc", 0, 0, err_msg, 0 );
        PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, &core_err_no, 0 );
        PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
        return (-1);
    }
    else if( ret > 0 )
    {
        WriteLog( ERR_LVL, "与统一支付通讯成功，但统一支付处理报错");
        return (-1);
    }

    PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, "000000", 0 );
    PutPoolDataByName( "BUSIIB", "thsdesc", 0, 0, "交易成功", 0 );
    WriteLog(ERR_LVL, "===== SUCCESS ====="  );
    return (0);
}


/*****************************************
 *Function    :	Befor_Deal
 *DESC        :	统一支付平台通讯前处理
 *INPUT       :	外部交易码
 *Return:   0 - 成功

 *------------------------------------
 *Author	Date			    Action
 *MSJ 		2015/12/10		Create
*****************************************/
int Befor_Deal( char *outtrancode )
{
    char  fastFlg[2 + 1];
    char  chnltype[32 + 1];
    char  b_fee[16 + 1];
    char  newtrancode[10 + 1];
    char  payAcc[32 + 1];
    char  rcvAcc[32 + 1];
    char  payBrchID[32 + 1];
    char  rcvBrchID[32 + 1];

    char  tyzf_errno[32 + 1];
    char  tyzf_errmsg[128 + 1];
    char  befor_reqMSG[MSGBUF_LEN];
    char  befor_rcvMSG[MSGBUF_LEN];

    double  fee = 0;
    int ret = 0;
    int errno = 0;

    memset( fastFlg, 0x00, sizeof(fastFlg) );
    memset( chnltype, 0x00, sizeof(chnltype) );
    memset( b_fee, 0x00, sizeof(b_fee) );
    memset( newtrancode, 0x00, sizeof(newtrancode) );
    memset( payAcc, 0x00, sizeof(payAcc) );
    memset( rcvAcc, 0x00, sizeof(rcvAcc) );
    memset( payBrchID, 0x00, sizeof(payBrchID) );
    memset( rcvBrchID, 0x00, sizeof(rcvBrchID) );
    memset( tyzf_errno, 0x00, sizeof(tyzf_errno) );
    memset( tyzf_errmsg, 0x00, sizeof(tyzf_errmsg) );



    /* 行内转账做前处理：获取收付款账号的开户机构号 */
    if( strcmp(outtrancode, "CBS0000100") == 0 )
    {
        /* 取付款账号 */
        GetPoolDataByName( "BUSIIB", "payCardAcctNb", 0, 0, payAcc, 0);
        trim( payAcc );
        WriteLog( APP_LVL, "payAcc[%s]", payAcc );

        /* 取付款账号开户机构号 */
        ret = AccQryPub5711( payAcc );
        if( ret < 0 )
        {
            WriteLog( ERR_LVL, "取付款账号[%s]的开户机构号失败[%d]", payAcc, ret );
            return (-1);
        }
        /* 取5711返回的开户机构号 */
        memset( payBrchID, 0x00, sizeof(payBrchID) );
        GetPoolDataByName ( "CBS", "OpenInstNo", 0, 0, payBrchID, 0);
        trim( payBrchID );
        WriteLog( ERR_LVL, "重新获取payBrchID[%s]", payBrchID );
        PutPoolDataByName( "BUSIIB", "payBrchID", 0, 0, payBrchID, 0);


        /* 取收款账号 */
        GetPoolDataByName( "BUSIIB", "rcvAcct", 0, 0, rcvAcc, 0);
        trim( rcvAcc );
        WriteLog( APP_LVL, "rcvAcc[%s]", rcvAcc );

        /* 取收款账号开户机构号 */
        ret = AccQryPub5711( rcvAcc );
        if( ret < 0 )
        {
            WriteLog( ERR_LVL, "取付款账号[%s]的开户机构号失败[%d]", rcvAcc, ret );
            return (-1);
        }
        /* 取5711返回的开户机构号 */
        memset( rcvBrchID, 0x00, sizeof(rcvBrchID) );
        GetPoolDataByName ( "CBS", "OpenInstNo", 0, 0, rcvBrchID, 0);
        trim( rcvBrchID );
        WriteLog( ERR_LVL, "重新获取rcvBrchID[%s]", rcvBrchID );
        PutPoolDataByName( "BUSIIB", "rcvBrchID", 0, 0, rcvBrchID, 0);

        WriteLog( ERR_LVL, "\n====over=====行内转账交易前处理完成=====over======\n" );
    }

    /* 跨行转账做前处理：获取开户机构号、重新试算手续费、向ESB查询转账汇路 */
    if( strcmp(outtrancode, "CBS0000110") == 0 )
    {
        /* 取付款账号 */
        GetPoolDataByName( "BUSIIB", "payCardAcctNb", 0, 0, payAcc, 0);
        trim( payAcc );
        WriteLog( APP_LVL, "payAcc[%s]", payAcc );

        /* 取付款账号开户机构号 */
        ret = AccQryPub5711( payAcc );
        if( ret < 0 )
        {
            WriteLog( ERR_LVL, "取付款账号[%s]的开户机构号失败[%d]", payAcc, ret );
            return (-1);
        }
        /* 取5711返回的开户机构号 */
        memset( payBrchID, 0x00, sizeof(payBrchID) );
        GetPoolDataByName ( "CBS", "OpenInstNo", 0, 0, payBrchID, 0);
        trim( payBrchID );
        WriteLog( ERR_LVL, "重新获取payBrchID[%s]", payBrchID );
        PutPoolDataByName( "BUSIIB", "payBrchID", 0, 0, payBrchID, 0);

        /* 取网银转账手续费金额 */
        GetPoolDataByName( "BUSIIB", "fee", 0, 0, b_fee, 0);
        trim( b_fee );
        fee = atof( b_fee);
        WriteLog( APP_LVL, "fee[%s][%.2f]", b_fee, fee );
        if( fee < 0.001 )
        {
            WriteLog( ERR_LVL, "跨行转账，且手续费为0，需计算手续费分润金额" );
            ret = net_fee_amt();
            if( ret < 0 )
            {
                WriteLog( ERR_LVL, "计算手续费分润金额失败" );
                return (-1);
            }
            else if( ret > 0 )
            {
                WriteLog( ERR_LVL, "==========需重做手续费试算交易============" );
                return (10);
            }
        }
        else PutPoolDataByName( "BUSIIB", "feeFlg", 0, 0, "1", 0 ); /** 收费 **/

        /* 取网银转账渠道 */
        GetPoolDataByName( "BUSIIB", "transferChnl", 0, 0, chnltype, 0);
        trim( chnltype );
        WriteLog( APP_LVL, "chnltype[%s]", chnltype );
        if( chnltype[0] == '4' )
        {
            WriteLog( ERR_LVL, "本交易为农信银快汇，无需向统一支付平台确认汇路" );
            PutPoolDataByName( "BUSIIB", "curTunePnt", 0, 0, "1010", 0);
            return (0);
        }

        /* 取加急标志 */
        GetPoolDataByName( "BUSIIB", "fastFlg", 0, 0, fastFlg, 0);
        trim( fastFlg );
        WriteLog( APP_LVL, "fastFlg[%s]", fastFlg );
        if( fastFlg[0] == '1' )
        {
            WriteLog( ERR_LVL, "本交易为跨行转账加急交易，无需向统一支付平台确认汇路" );
            PutPoolDataByName( "BUSIIB", "curTunePnt", 0, 0, "1001", 0);
            return (0);
        }

        /* 组织新的交易码并向ESB发送交易请求 */
        strcpy( newtrancode, "700110_2" );

        memset( befor_reqMSG, 0x00, MSGBUF_LEN );
        memset( befor_rcvMSG, 0x00, MSGBUF_LEN );

        /* 准备报文 */
        ret = prepare_reqMSg( befor_reqMSG, newtrancode );
        if( ret < 0 )
        {
            WriteLog( ERR_LVL, "交易前处理准备报文错" );
            return (-1);
        }

        /* PB与统一支付平台通讯 */
        ret = pb_socket_tyzf( befor_reqMSG, befor_rcvMSG, newtrancode );
        if( ret < 0 )
        {
            WriteLog( ERR_LVL, "交易前处理与统一支付平台通讯错" );
            return (-1);
        }

        /* 解析返回报文，获取系统对应信息 */
        ret = deal_rcvMSG( befor_rcvMSG, newtrancode );
        if( ret < 0 )
        {
            WriteLog( ERR_LVL, "交易前处理解析统一支付平台返回报文错" );
            return (-1);
        }

        /* 判定统一支付平台返回交易是否成功 */
        /* 错误码 */
        GetPoolDataByName( "BUSIIB", "merchNb", 0, 0, tyzf_errno, 0 );
        trim( tyzf_errno );
        WriteLog( ERR_LVL, "tyzf_errno[%s]", tyzf_errno );

        /* 错误信息 */
        GetPoolDataByName( "BUSIIB", "merchNm", 0, 0, tyzf_errmsg, 0 );
        trim( tyzf_errmsg );
        WriteLog( ERR_LVL, "tyzf_errmsg[%s]", tyzf_errmsg );

        if( strcmp(tyzf_errno, "000000") != 0 )
        {
            WriteLog( ERR_LVL, "统一支付返回交易失败" );
            errno = 99999;
            PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, "99999", 0 );
            PutPoolDataByName( "BUSIIB", "thsdesc", 0, 0, tyzf_errmsg, 0 );
            PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, &errno, 0 );
            PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, tyzf_errmsg, 0 );
            return (100);

        }
        WriteLog( ERR_LVL, "=======与统一支付交易成功" );

        /* 取最新交易渠道信息 */
        GetPoolDataByName( "BUSIIB", "curTunePnt", 0, 0, chnltype, 0);
        trim( chnltype );
        WriteLog( ERR_LVL, "统一支付平台返回渠道信息chnltype[%s]", chnltype );
        if( strcmp(chnltype, "1002") == 0 )  /* 小额 */
            PutPoolDataByName( "BUSIIB", "transferChnl", 0, 0, "1", 0);
        else if( strcmp(chnltype, "1001") == 0 )  /* 大额 */
            PutPoolDataByName( "BUSIIB", "transferChnl", 0, 0, "2", 0);
        else
        {
            WriteLog( ERR_LVL, "统一支付平台返回渠道信息错误chnltype[%s]", chnltype );
            return (-1);
        }
        WriteLog( ERR_LVL, "\n====over=====跨行转账交易前处理完成=====over======\n" );
    }

    return (0);
}


/*****************************************
 *Function    :	prepare_reqMSg
 *DESC        :	生成统一支付平台请求报文
 *INPUT       :	请求报文 | 外部交易码
 *Return:   0 - 成功

 *------------------------------------
 *Author	Date			    Action
 *MSJ 		2015/09/10		Create
*****************************************/
int prepare_reqMSg( char *reqMSG, char *outtrancode )
{
    EXEC SQL BEGIN DECLARE SECTION;
        char SQLstr[1024 + 1];
        struct s_pbbnet_tyzf_mgmt pbbnet_tyzf;
    EXEC SQL END DECLARE SECTION;

    char   HeadMsg_ESB[2048];
    char   HeadMsg_TYZF[2048];
    char   BodyMsg[2048];
    char   err_code[6 + 1];
    char   err_msg[256 + 1];
    char   fld_value[128 + 1];
    char   fld_value2[128 + 1];
    const char *TmpMsg = NULL;

    int    core_err_no = 0;
    int    ret = 0, i = 0;

    WriteLog( ERR_LVL, "=====准备向统一支付平台查询报文====="  );

    memset( SQLstr, 0x00, sizeof(SQLstr) );
    memset( &pbbnet_tyzf, 0x00, sizeof(pbbnet_tyzf) );
    memset( HeadMsg_ESB, 0x00, sizeof(HeadMsg_ESB) );
    memset( HeadMsg_TYZF, 0x00, sizeof(HeadMsg_TYZF) );
    memset( BodyMsg, 0x00, sizeof(BodyMsg) );
    memset( err_code, 0x00, sizeof(err_code) );
    memset( err_msg, 0x00, sizeof(err_msg) );
    memset( fld_value, 0x00, sizeof(fld_value) );
    memset( fld_value2, 0x00, sizeof(fld_value2) );


    /* 构建取报文头SQL */
    memset( SQLstr, 0x00, sizeof(SQLstr) );
    sprintf( SQLstr, "select * from t_pbbnet_tyzf_mgmt where msg_type[1,1]='1' and (trancode='PUB' or trancode='%s') order by msg_type,seqno; ", outtrancode );
    WriteLog( APP_LVL, "取报文头SQL[%s]", SQLstr );

    EXEC SQL PREPARE net_tyzf_str FROM :SQLstr;
    if( SQLCODE != 0 )
    {
        WriteLog( ERR_LVL, "准备游标错！prepare error!sqlcode[%ld]", sqlca.sqlcode );
        return ( -1 );
    }

    EXEC SQL DECLARE net_tyzf_cur SCROLL CURSOR FOR net_tyzf_str;
    if( SQLCODE != 0 )
    {
        WriteLog( ERR_LVL, "声明游标错！Declare error!sqlcode[%ld]", sqlca.sqlcode );
        EXEC SQL FREE net_tyzf_str;
        return ( -1 );
    }

    EXEC SQL OPEN net_tyzf_cur;
    if( SQLCODE != 0 )
    {
        WriteLog( ERR_LVL, "打开游标错! Open error!sqlcode[%ld]", sqlca.sqlcode );
        EXEC SQL FREE net_tyzf_cur;
        EXEC SQL FREE net_tyzf_str;
        return ( -1 );
    }

    for( i = 0; pbbnet_tyzf.seqno < 5000; i++ )
    {
        memset( &pbbnet_tyzf, 0x00, sizeof(pbbnet_tyzf) );
        EXEC SQL FETCH net_tyzf_cur INTO :pbbnet_tyzf;
        if( sqlca.sqlcode == 100 )
        {
            WriteLog( ERR_LVL, "数据库表t_pbbnet_tyzf_mgmt已无记录,查询退出 i[%d] sqlcode[%ld]", i, sqlca.sqlcode);
            EXEC SQL CLOSE net_tyzf_cur;
            EXEC SQL FREE net_tyzf_cur;
            EXEC SQL FREE net_tyzf_str;
            break;
        }
        else if( (sqlca.sqlcode != 100) && (sqlca.sqlcode != 0) )
        {
            WriteLog( ERR_LVL, "取游标错误 i[%d] sqlcode[%ld]", i, sqlca.sqlcode);
            EXEC SQL CLOSE net_tyzf_cur;
            EXEC SQL FREE net_tyzf_cur;
            EXEC SQL FREE net_tyzf_str;
            return (-1);
        }

        /* 组织请求报文 */
        memset( fld_value, 0x00, sizeof(fld_value) );
        memset( fld_value2, 0x00, sizeof(fld_value2) );
        rtrim( pbbnet_tyzf.msg_type );
        rtrim( pbbnet_tyzf.memo );
        rtrim( pbbnet_tyzf.dict_name );
        rtrim( pbbnet_tyzf.pb_fld );
        rtrim( pbbnet_tyzf.tyzf_fld );
        rtrim( pbbnet_tyzf.memo );
        /** WriteLog( APP_LVL, "i[%d] msg_type[%s] seqno[%d] memo[%s]",
                            i, pbbnet_tyzf.msg_type, pbbnet_tyzf.seqno, pbbnet_tyzf.memo ); **/

        /* 组织报文头的头信息 */
        /*  msg_type表示报文类型，首位为1表示PB至统一支付的请求报文，首位为2为统一支付至PB的返回报文 */
        /*  msg_type值   11 ―― ESB报文头前置信息，如<header>
                         12 ―― ESB报文头内容信息，如<reqTime></reqTime>
                         13 ―― ESB报文头尾信息，如</header>
                         14 ―― 统一支付报文头前置信息，如<requestHeader>
                         15 ―― 统一支付报文头内容信息，如<M_CustomerNo></M_CustomerNo>
                         16 ―― 统一支付报文头尾信息，如</requestHeader>
                         17 ―― 报文体前置信息，如<body>
                         18 ―― 报文体内容信息，如<payername></payername>
                         19 ―― 报文体尾信息，如</body>
        */

        /* 组织ESB报文头的头信息、尾信息 */
        if( (strcmp(pbbnet_tyzf.msg_type, "11") == 0) || (strcmp(pbbnet_tyzf.msg_type, "13") == 0) )
        {
            sprintf( HeadMsg_ESB, "%s%s\n", HeadMsg_ESB, pbbnet_tyzf.memo );
        }
        /* 组织ESB报文头的主信息 */
        else if( strcmp(pbbnet_tyzf.msg_type, "12") == 0 )
        {
            /**  memo配置报文组织形式，
                      "+ 00000 -"   报文字段直接映射变量池中一个字段
                      "+ 11111 -"   报文字段直接映射变量池中两个个字段
                      "+ 22222 -"   报文字段的映射方式常量+PB变量池
                      "+ 33333 -"   报文字段的映射方式PB变量池+常量
                      "+ 44444 -"   报文字段直接映射程序中的变量
                      其他          报文字段直接映射一个常量数据

            **/
            /* 使用一个PB变量池数据填充至报文中 */
            if( strcmp(pbbnet_tyzf.memo, "+ 00000 -") == 0 )
            {
                GetPoolDataByName( pbbnet_tyzf.dict_name, pbbnet_tyzf.pb_fld, 0, 0, fld_value, 0 );
                trim( fld_value );
                sprintf( HeadMsg_ESB, "%s<%s>%s</%s>\n", HeadMsg_ESB, pbbnet_tyzf.tyzf_fld, fld_value, pbbnet_tyzf.tyzf_fld );
            }
            /* 使用两个PB变量池数据填充至报文中 */
            else if( strcmp(pbbnet_tyzf.memo, "+ 11111 -") == 0 )
            {
                GetPoolDataByName( pbbnet_tyzf.dict_name, pbbnet_tyzf.pb_fld, 0, 0, fld_value, 0 );
                trim( fld_value );
                rtrim( pbbnet_tyzf.backup1 );
                rtrim( pbbnet_tyzf.backup2 );
                GetPoolDataByName( pbbnet_tyzf.backup1, pbbnet_tyzf.backup2, 0, 0, fld_value2, 0 );
                trim( fld_value2 );
                sprintf( HeadMsg_ESB, "%s<%s>%s%s</%s>\n", HeadMsg_ESB, pbbnet_tyzf.tyzf_fld, fld_value, fld_value2, pbbnet_tyzf.tyzf_fld );
            }
            /* 使用常量+PB变量池数据填充至报文中 */
            else if( strcmp(pbbnet_tyzf.memo, "+ 22222 -") == 0 )
            {
                GetPoolDataByName( pbbnet_tyzf.dict_name, pbbnet_tyzf.pb_fld, 0, 0, fld_value, 0 );
                trim( fld_value );

                rtrim( pbbnet_tyzf.backup1 );
                if( strlen(pbbnet_tyzf.backup1) > 0 )
                {
                    rtrim( pbbnet_tyzf.backup2 );
                    GetPoolDataByName( pbbnet_tyzf.backup1, pbbnet_tyzf.backup2, 0, 0, fld_value2, 0 );
                    trim( fld_value2 );
                }
                rtrim( pbbnet_tyzf.backup3 );
                sprintf( HeadMsg_ESB, "%s<%s>%s%s%s</%s>\n",
                         HeadMsg_ESB, pbbnet_tyzf.tyzf_fld, pbbnet_tyzf.backup3, fld_value, fld_value2, pbbnet_tyzf.tyzf_fld );
            }
            /* 使用PB变量池+常量数据填充至报文中 */
            else if( strcmp(pbbnet_tyzf.memo, "+ 33333 -") == 0 )
            {
                GetPoolDataByName( pbbnet_tyzf.dict_name, pbbnet_tyzf.pb_fld, 0, 0, fld_value, 0 );
                trim( fld_value );
                rtrim( pbbnet_tyzf.backup1 );

                if( strlen(pbbnet_tyzf.backup1) > 0 )
                {
                    rtrim( pbbnet_tyzf.backup2 );
                    GetPoolDataByName( pbbnet_tyzf.backup1, pbbnet_tyzf.backup2, 0, 0, fld_value2, 0 );
                    trim( fld_value2 );
                }
                rtrim( pbbnet_tyzf.backup3 );
                sprintf( HeadMsg_ESB, "%s<%s>%s%s%s</%s>\n",
                         HeadMsg_ESB, pbbnet_tyzf.tyzf_fld, fld_value, fld_value2, pbbnet_tyzf.backup3, pbbnet_tyzf.tyzf_fld );
            }
            /* 使用其他方式填充至报文中 */
            else if( strcmp(pbbnet_tyzf.memo, "+ 44444 -") == 0 )
            {
                if( strcmp(pbbnet_tyzf.tyzf_fld, "appSign") == 0 )
                {
                    /* 自HeadMsg_ESB中依次取appId、channelId、transId、reqTime四个字段的值组成appSign域 */
                    memset( fld_value, 0x00, sizeof(fld_value) );
                    memset( fld_value2, 0x00, sizeof(fld_value2) );

                    /* 取appId */
                    ret = getXmlNodeContent( HeadMsg_ESB, pbbnet_tyzf.dict_name, &TmpMsg );
                    if( ret < 1 )
                    {
                        WriteLog( ERR_LVL, "ERROR:无法取域 <%s> 的值", pbbnet_tyzf.dict_name );
                        EXEC SQL CLOSE net_tyzf_cur;
                        EXEC SQL FREE net_tyzf_cur;
                        EXEC SQL FREE net_tyzf_str;
                        return -2;
                    }
                    strncpy(fld_value, TmpMsg, ret);
                    fld_value[ret] = '\0';
                    strcpy( fld_value2, fld_value );
                    WriteLog( APP_LVL, "[%s] [%d] fld_value[%s] fld_value2[%s]", pbbnet_tyzf.dict_name, ret, fld_value, fld_value2 );

                    /* 取channelId */
                    memset( fld_value, 0x00, sizeof(fld_value) );
                    ret = getXmlNodeContent( HeadMsg_ESB, pbbnet_tyzf.pb_fld, &TmpMsg );
                    if( ret < 1 )
                    {
                        WriteLog( ERR_LVL, "ERROR:无法取域 <%s> 的值", pbbnet_tyzf.dict_name );
                        EXEC SQL CLOSE net_tyzf_cur;
                        EXEC SQL FREE net_tyzf_cur;
                        EXEC SQL FREE net_tyzf_str;
                        return -2;
                    }
                    strncpy(fld_value, TmpMsg, ret);
                    fld_value[ret] = '\0';
                    sprintf( fld_value2, "%s_%s", fld_value2, fld_value );
                    WriteLog( APP_LVL, "[%s] [%d] fld_value[%s] fld_value2[%s]", pbbnet_tyzf.pb_fld, ret, fld_value, fld_value2 );

                    /* 取transId */
                    memset( fld_value, 0x00, sizeof(fld_value) );
                    trim( pbbnet_tyzf.backup1 );
                    ret = getXmlNodeContent( HeadMsg_ESB, pbbnet_tyzf.backup1, &TmpMsg );
                    if( ret < 1 )
                    {
                        WriteLog( ERR_LVL, "ERROR:无法取域 <%s> 的值", pbbnet_tyzf.dict_name );
                        EXEC SQL CLOSE net_tyzf_cur;
                        EXEC SQL FREE net_tyzf_cur;
                        EXEC SQL FREE net_tyzf_str;
                        return -2;
                    }
                    strncpy(fld_value, TmpMsg, ret);
                    fld_value[ret] = '\0';
                    sprintf( fld_value2, "%s_%s", fld_value2, fld_value );
                    WriteLog( APP_LVL, "[%s] [%d] fld_value[%s] fld_value2[%s]", pbbnet_tyzf.backup1, ret, fld_value, fld_value2 );

                    /* 取reqTime */
                    memset( fld_value, 0x00, sizeof(fld_value) );
                    trim( pbbnet_tyzf.backup2 );
                    ret = getXmlNodeContent( HeadMsg_ESB, pbbnet_tyzf.backup2, &TmpMsg );
                    if( ret < 1 )
                    {
                        WriteLog( ERR_LVL, "ERROR:无法取域 <%s> 的值", pbbnet_tyzf.dict_name );
                        EXEC SQL CLOSE net_tyzf_cur;
                        EXEC SQL FREE net_tyzf_cur;
                        EXEC SQL FREE net_tyzf_str;
                        return -2;
                    }
                    strncpy(fld_value, TmpMsg, ret);
                    fld_value[ret] = '\0';
                    sprintf( fld_value2, "%s_%s", fld_value2, fld_value );
                    WriteLog( APP_LVL, "[%s] [%d] fld_value[%s] fld_value2[%s]", pbbnet_tyzf.backup2, ret, fld_value, fld_value2 );

                    /* 调用MD5加密算法组织appSign */
                    memset( fld_value, 0x00, sizeof(fld_value) );
                    MD5_encrypt( fld_value2, fld_value );
                    sprintf( HeadMsg_ESB, "%s<%s>%s</%s>", HeadMsg_ESB, pbbnet_tyzf.tyzf_fld, fld_value, pbbnet_tyzf.tyzf_fld );

                }

            }
            /* 使用常量填充至报文中 */
            else
            {
                sprintf( HeadMsg_ESB, "%s<%s>%s</%s>\n", HeadMsg_ESB, pbbnet_tyzf.tyzf_fld, pbbnet_tyzf.memo, pbbnet_tyzf.tyzf_fld );
            }
        }
        /* 组织统一支付平台报文头的头信息、尾信息 */
        else if( (strcmp(pbbnet_tyzf.msg_type, "14") == 0) || (strcmp(pbbnet_tyzf.msg_type, "16") == 0) )
        {
            sprintf( HeadMsg_TYZF, "%s%s\n", HeadMsg_TYZF, pbbnet_tyzf.memo );
        }
        /* 组织统一支付报文头的主信息 */
        else if( strcmp(pbbnet_tyzf.msg_type, "15") == 0 )
        {
            /**  memo配置报文组织形式，
                      "+ 00000 -"   报文字段直接映射变量池中一个字段
                      "+ 11111 -"   报文字段直接映射变量池中两个个字段
                      "+ 22222 -"   报文字段的映射方式常量+PB变量池
                      "+ 33333 -"   报文字段的映射方式PB变量池+常量
                      "+ 44444 -"   报文字段直接映射程序中的一个变量
                      其他          报文字段直接映射一个常量数据

            **/
            /* 使用一个PB变量池数据填充至报文中 */
            if( strcmp(pbbnet_tyzf.memo, "+ 00000 -") == 0 )
            {
                GetPoolDataByName( pbbnet_tyzf.dict_name, pbbnet_tyzf.pb_fld, 0, 0, fld_value, 0 );
                trim( fld_value );
                sprintf( HeadMsg_TYZF, "%s<%s>%s</%s>\n", HeadMsg_TYZF, pbbnet_tyzf.tyzf_fld, fld_value, pbbnet_tyzf.tyzf_fld );
            }
            /* 使用两个PB变量池数据填充至报文中 */
            else if( strcmp(pbbnet_tyzf.memo, "+ 11111 -") == 0 )
            {
                GetPoolDataByName( pbbnet_tyzf.dict_name, pbbnet_tyzf.pb_fld, 0, 0, fld_value, 0 );
                trim( fld_value );
                rtrim( pbbnet_tyzf.backup1 );
                rtrim( pbbnet_tyzf.backup2 );
                GetPoolDataByName( pbbnet_tyzf.backup1, pbbnet_tyzf.backup2, 0, 0, fld_value2, 0 );
                trim( fld_value2 );
                sprintf( HeadMsg_TYZF, "%s<%s>%s%s</%s>\n", HeadMsg_TYZF, pbbnet_tyzf.tyzf_fld, fld_value, fld_value2, pbbnet_tyzf.tyzf_fld );
            }
            /* 使用常量+PB变量池数据填充至报文中 */
            else if( strcmp(pbbnet_tyzf.memo, "+ 22222 -") == 0 )
            {
                GetPoolDataByName( pbbnet_tyzf.dict_name, pbbnet_tyzf.pb_fld, 0, 0, fld_value, 0 );
                trim( fld_value );
                rtrim( pbbnet_tyzf.backup1 );

                if( strlen(pbbnet_tyzf.backup1) > 0 )
                {
                    rtrim( pbbnet_tyzf.backup2 );
                    GetPoolDataByName( pbbnet_tyzf.backup1, pbbnet_tyzf.backup2, 0, 0, fld_value2, 0 );
                    trim( fld_value2 );
                }
                rtrim( pbbnet_tyzf.backup3 );
                sprintf( HeadMsg_TYZF, "%s<%s>%s%s%s</%s>\n",
                         HeadMsg_TYZF, pbbnet_tyzf.tyzf_fld, pbbnet_tyzf.backup3, fld_value, fld_value2, pbbnet_tyzf.tyzf_fld );
            }
            /* 使用PB变量池+常量数据填充至报文中 */
            else if( strcmp(pbbnet_tyzf.memo, "+ 33333 -") == 0 )
            {
                GetPoolDataByName( pbbnet_tyzf.dict_name, pbbnet_tyzf.pb_fld, 0, 0, fld_value, 0 );
                trim( fld_value );
                rtrim( pbbnet_tyzf.backup1 );

                if( strlen(pbbnet_tyzf.backup1) > 0 )
                {
                    rtrim( pbbnet_tyzf.backup2 );
                    GetPoolDataByName( pbbnet_tyzf.backup1, pbbnet_tyzf.backup2, 0, 0, fld_value2, 0 );
                    trim( fld_value2 );
                }
                rtrim( pbbnet_tyzf.backup3 );
                sprintf( HeadMsg_TYZF, "%s<%s>%s%s%s</%s>\n",
                         HeadMsg_TYZF, pbbnet_tyzf.tyzf_fld, fld_value, fld_value2, pbbnet_tyzf.backup3, pbbnet_tyzf.tyzf_fld );
            }
            /* 使用一个程序变量填充至报文中 */
            else if( strcmp(pbbnet_tyzf.memo, "+ 44444 -") == 0 )
            {
                GetPoolDataByName( pbbnet_tyzf.dict_name, pbbnet_tyzf.pb_fld, 0, 0, fld_value, 0 );
                rtrim( pbbnet_tyzf.memo );
                sprintf( HeadMsg_TYZF, "%s<%s>%s</%s>\n", HeadMsg_TYZF, pbbnet_tyzf.tyzf_fld, fld_value, pbbnet_tyzf.tyzf_fld );
            }
            /* 使用常量填充至报文中 */
            else
            {
                sprintf( HeadMsg_TYZF, "%s<%s>%s</%s>\n", HeadMsg_TYZF, pbbnet_tyzf.tyzf_fld, pbbnet_tyzf.memo, pbbnet_tyzf.tyzf_fld );
            }
        }
        /* 组织报文体的头信息、尾信息 */
        else if( (strcmp(pbbnet_tyzf.msg_type, "17") == 0) || (strcmp(pbbnet_tyzf.msg_type, "19") == 0) )
        {
            sprintf( BodyMsg, "%s%s\n", BodyMsg, pbbnet_tyzf.memo );
        }
        /* 组织报文体的主信息 */
        else if( strcmp(pbbnet_tyzf.msg_type, "18") == 0 )
        {
            /* 使用一个PB变量池数据填充至报文中 */
            if( strcmp(pbbnet_tyzf.memo, "+ 00000 -") == 0 )
            {
                GetPoolDataByName( pbbnet_tyzf.dict_name, pbbnet_tyzf.pb_fld, 0, 0, fld_value, 0 );
                trim( fld_value );
                rtrim( pbbnet_tyzf.tyzf_fld );
                sprintf( BodyMsg, "%s<%s>%s</%s>\n", BodyMsg, pbbnet_tyzf.tyzf_fld, fld_value, pbbnet_tyzf.tyzf_fld );
            }
            /* 使用两个PB变量池数据填充至报文中 */
            else if( strcmp(pbbnet_tyzf.memo, "+ 11111 -") == 0 )
            {
                GetPoolDataByName( pbbnet_tyzf.dict_name, pbbnet_tyzf.pb_fld, 0, 0, fld_value, 0 );
                trim( fld_value );
                rtrim( pbbnet_tyzf.backup1 );
                rtrim( pbbnet_tyzf.backup2 );
                GetPoolDataByName( pbbnet_tyzf.backup1, pbbnet_tyzf.backup2, 0, 0, fld_value2, 0 );
                trim( fld_value2 );
                sprintf( BodyMsg, "%s<%s>%s%s</%s>\n", BodyMsg, pbbnet_tyzf.tyzf_fld, fld_value, fld_value2, pbbnet_tyzf.tyzf_fld );
            }
            /* 使用常量+PB变量池数据填充至报文中 */
            else if( strcmp(pbbnet_tyzf.memo, "+ 22222 -") == 0 )
            {
                GetPoolDataByName( pbbnet_tyzf.dict_name, pbbnet_tyzf.pb_fld, 0, 0, fld_value, 0 );
                trim( fld_value );
                rtrim( pbbnet_tyzf.backup1 );
                if( strlen(pbbnet_tyzf.backup1) > 0 )
                {
                    rtrim( pbbnet_tyzf.backup2 );
                    GetPoolDataByName( pbbnet_tyzf.backup1, pbbnet_tyzf.backup2, 0, 0, fld_value2, 0 );
                    trim( fld_value2 );
                }
                rtrim( pbbnet_tyzf.backup3 );
                sprintf( BodyMsg, "%s<%s>%s%s%s</%s>\n",
                         BodyMsg, pbbnet_tyzf.tyzf_fld, pbbnet_tyzf.backup3, fld_value, fld_value2, pbbnet_tyzf.tyzf_fld );
            }
            /* 使用PB变量池+常量数据填充至报文中 */
            else if( strcmp(pbbnet_tyzf.memo, "+ 33333 -") == 0 )
            {
                GetPoolDataByName( pbbnet_tyzf.dict_name, pbbnet_tyzf.pb_fld, 0, 0, fld_value, 0 );
                trim( fld_value );
                rtrim( pbbnet_tyzf.backup1 );
                if( strlen(pbbnet_tyzf.backup1) > 0 )
                {
                    rtrim( pbbnet_tyzf.backup2 );
                    GetPoolDataByName( pbbnet_tyzf.backup1, pbbnet_tyzf.backup2, 0, 0, fld_value2, 0 );
                    trim( fld_value2 );
                }
                rtrim( pbbnet_tyzf.backup3 );
                sprintf( BodyMsg, "%s<%s>%s%s%s</%s>\n",
                         BodyMsg, pbbnet_tyzf.tyzf_fld, fld_value, fld_value2, pbbnet_tyzf.backup3, pbbnet_tyzf.tyzf_fld );
            }
            /* 使用一个程序变量填充至报文中 */
            else if( strcmp(pbbnet_tyzf.memo, "+ 44444 -") == 0 )
            {
                GetPoolDataByName( pbbnet_tyzf.dict_name, pbbnet_tyzf.pb_fld, 0, 0, fld_value, 0 );
                trim( fld_value );
                sprintf( BodyMsg, "%s<%s>%s</%s>\n", BodyMsg, pbbnet_tyzf.tyzf_fld, fld_value, pbbnet_tyzf.tyzf_fld );
            }
            /* 使用常量填充至报文中 */
            else
            {
                sprintf( BodyMsg, "%s<%s>%s</%s>\n", BodyMsg, pbbnet_tyzf.tyzf_fld, pbbnet_tyzf.memo, pbbnet_tyzf.tyzf_fld );
            }
        }
    }

    sprintf( reqMSG, "%s%s%s", HeadMsg_ESB, HeadMsg_TYZF, BodyMsg );

    WriteLog( ERR_LVL, "ESB PKG GBK:reqMSG[%d][%s]", strlen(reqMSG), reqMSG);

    return (0);
}



/*****************************************
 *Function    :	pb_socket_tyzf
 *DESC        :	PB与统一支付平台报文通讯
 *INPUT       :	请求报文 | 返回报文 | 交易码
 *Return:    0 - 成功

 *------------------------------------
 *Author	Date			    Action
 *MSJ 		2015/09/10		Create
*****************************************/
int pb_socket_tyzf( char *pb_reqMSG, char *pb_rcvMSG, char *outtrancode )
{
    EXEC SQL BEGIN DECLARE SECTION;
        char tyzfIP[20 + 1];
        char tyzfPORT[10 + 1];
        char pb_code[20 + 1];
        char tyzf_code[20 + 1];
    EXEC SQL END DECLARE SECTION;
    char *pbuf = NULL;
    char tyzf_reqMSG[MSGBUF_LEN];
    char tyzf_rcvMSG[MSGBUF_LEN];
    char UTF_reqMSG[MSGBUF_LEN];
    char ESB_headMSG[MSGBUF_LEN];
    int sktConnect;
    int nReceiveBytes;
    long ret = 0;
    int n = 0;

    unsigned long ul = 0;
    struct fd_set      fds;
    struct timeval     time_out;
    struct sockaddr_in svr_addr;

    memset( tyzfIP, 0x00, sizeof(tyzfIP) );
    memset( tyzfPORT, 0x00, sizeof(tyzfPORT) );
    memset( pb_code, 0x00, sizeof(pb_code) );
    memset( tyzf_code, 0x00, sizeof(tyzf_code) );
    memset( &fds, 0x00, sizeof(fds) );
    memset( &time_out, 0x00, sizeof(time_out) );
    memset( &svr_addr, 0x00, sizeof(svr_addr) );

    memset( tyzf_reqMSG, 0x00, MSGBUF_LEN );
    memset( tyzf_rcvMSG, 0x00, MSGBUF_LEN );
    memset( UTF_reqMSG, 0x00, MSGBUF_LEN );
    memset( ESB_headMSG, 0x00, MSGBUF_LEN );

    /* 获取统一支付平台IP及端口 */
    EXEC SQL SELECT pb_fld, tyzf_fld, dict_name, memo
                 INTO :pb_code, :tyzf_code, :tyzfIP, :tyzfPORT
             FROM  t_pbbnet_tyzf_mgmt
             WHERE msg_type = "99"
               AND seqno = "9999"
               AND trancode = 'PUB';
    if( SQLCODE != 0 )
    {
        WriteLog( ERR_LVL, "数据库错误! sqlcode[%ld]", sqlca.sqlcode );
        return ( -1 );
    }
    trim( pb_code );
    trim( tyzf_code );
    trim( tyzfIP );
    trim( tyzfPORT );
    WriteLog( ERR_LVL, "pb_code[%s] tyzf_code[%s]", pb_code, tyzf_code );
    WriteLog( APP_LVL, "tyzfIP[%s] tyzfPORT[%s]", tyzfIP, tyzfPORT );

    /*超时控制*/
    /*
    act.sa_handler=catch_term;
    act.sa_flags=0;
    memset(&act.sa_mask,0,sizeof (act.sa_mask));
    sigaction(SIGTERM,&act,NULL);
    */

    /*创建socket*/
    sktConnect = socket(PF_INET, SOCK_STREAM, 0);
    if( sktConnect == -1 )
    {
        WriteLog( ERR_LVL, "建立socket失败[%d][%d]", sktConnect, errno );
        close(sktConnect);
        return (-1);
    }

    ServerAddr.sin_family = PF_INET;
    ServerAddr.sin_port = htons( atoi(tyzfPORT) );
    ServerAddr.sin_addr.s_addr = inet_addr(tyzfIP);

    /*WriteLog( ERR_LVL, "设置非阻塞模式" );
    ul = 0;
    ioctl( sktConnect, FIONBIO, &ul );*/
    /*发起连接connect*/
    ret = connect( sktConnect, (struct sockaddr *)&ServerAddr, sizeof(ServerAddr) );
    if( ret < 0 )
    {
        WriteLog( ERR_LVL, "连接统一支付平台服务器失败[%d][%d]", ret, errno );
        close(sktConnect);
        return (-1);
    }
    WriteLog( ERR_LVL, "发起连接成功.........PID[%d] ret[%ld]", getpid(), ret );

    time_out.tv_sec = 0;
    time_out.tv_usec = 1000; /* 微秒 */
    FD_ZERO( &fds );
    FD_SET( sktConnect, &fds );
    ret = select( sktConnect + 1, NULL, &fds, NULL, &time_out );
    if( ret > 0 )
    {
        /* 连接成功 */
        WriteLog( ERR_LVL, "select SUCCESS[%d]", ret );
    }
    else
    {
        if( ret == 0 )  /* 超时 */
            WriteLog( ERR_LVL, "向[%s][%d]建立连接超时 sec[%d], usec[%d]", tyzfIP, tyzfPORT, time_out.tv_sec, time_out.tv_usec );
        else
            WriteLog( ERR_LVL, "向[%s][%d]建立连接失败 error[%d][%s]", tyzfIP, tyzfPORT, errno, strerror(errno) );
        /**WriteLog( ERR_LVL, "设置阻塞模式" );
        ul = 1;
        ioctl( sktConnect, FIONBIO, &ul );**/
        close( sktConnect );
        return (-1);
    }

    /* 发送报文需为UTF-8，做字符集转换 */
    pbuf = sca_iconv( pb_code, tyzf_code, pb_reqMSG );
    if( pbuf == NULL )
    {
        WriteLog( ERR_LVL, "报文字符集[%s]转[%s]失败", pb_code, tyzf_code );
        close(sktConnect);
        return (-1);
    }
    else
    {
        strcpy (UTF_reqMSG, pbuf);
        free(pbuf);
        pbuf = NULL;
    }

    strcpy ( tyzf_reqMSG, UTF_reqMSG );

    WriteLog( APP_LVL, "SEND ESB UTF:tyzf_reqMSG[%ld][%s]", strlen(tyzf_reqMSG), tyzf_reqMSG );
    ret = send( sktConnect, tyzf_reqMSG, strlen(tyzf_reqMSG), 0 );
    if( ret < 0 )
    {
        WriteLog( ERR_LVL, "同步连接发送失败[%d][%d]", ret, errno );
        close(sktConnect);
        return (-1);
    }
    WriteLog( ERR_LVL, "同步连接发送成功.........PID[%d] ret[%ld]", getpid(), ret );

    ret = recv_data(sktConnect, tyzf_rcvMSG, 25);
    if( ret < 0 )
    {
        WriteLog( ERR_LVL, "同步连接接收失败[%d][%d]", ret, errno );
        close(sktConnect);
        return (-2);
    }
    WriteLog( ERR_LVL, "同步连接接收成功.........PID[%d] ret[%ld] [%d]", getpid(), ret, MSGBUF_LEN - 1 );
    WriteLog( APP_LVL, "RECV ESB UTF: rcvMSG[%d][%s]", strlen(tyzf_rcvMSG), tyzf_rcvMSG );

    trim( tyzf_rcvMSG );
    if( strlen(tyzf_rcvMSG) == 0 )
    {
        /* 接收报文为UTF-8，做字符集转换 */
        pbuf = sca_iconv( tyzf_code, pb_code, ESB_headMSG );
        if( *pbuf == NULL )
        {
            WriteLog( ERR_LVL, "报文字符集[%s]转[%s]失败", tyzf_code, pb_code );
            close(sktConnect);
            return (-1);
        }
        else
        {
            strcpy (pb_rcvMSG, pbuf);
            free(pbuf);
            pbuf = NULL;
        }
    }
    else
    {
        /* 接收报文为UTF-8，做字符集转换 */
        pbuf = sca_iconv( tyzf_code, pb_code, tyzf_rcvMSG );
        if( pbuf == NULL )
        {
            WriteLog( ERR_LVL, "报文字符集[%s]转[%s]失败", tyzf_code, pb_code );
            close(sktConnect);
            return (-1);
        }
        else
        {
            strcpy (pb_rcvMSG, pbuf);
            free(pbuf);
            pbuf = NULL;
        }
    }

    WriteLog( ERR_LVL, "ESB PKG GBK:rcvMSG[%ld][%s]", strlen(pb_rcvMSG), pb_rcvMSG );

    close(sktConnect);

    return 0;
}

/*****************************************
 *Function    :	deal_rcvMSG
 *DESC        :	统一支付平台返回报文处理
 *INPUT       :	接收报文 | 外部交易码
 *Return:   0 - 成功

 *------------------------------------
 *Author	Date			    Action
 *MSJ 		2015/09/10		Create
*****************************************/
int deal_rcvMSG( char *rcvMSG, char *outtrancode )
{
    EXEC SQL BEGIN DECLARE SECTION;
        char SQLstr[1024 + 1];
        struct s_pbbnet_tyzf_mgmt pbbnet_tyzf_mgmt;
    EXEC SQL END DECLARE SECTION;
    const char *pbody;
    const char *content;
    char   fld_value[128 + 1];
    int    fldLEN = 0, ret = 0;
    int    i = 0;

    WriteLog( ERR_LVL, "----准备解析统一支付平台返回报文----"  );

    memset( SQLstr, 0x00, sizeof(SQLstr) );
    memset( &pbbnet_tyzf_mgmt, 0x00, sizeof(pbbnet_tyzf_mgmt) );
    memset( fld_value, 0x00, sizeof(fld_value) );

    WriteLog( APP_LVL, "返回报文 [%s]rcvMSG[%s]", outtrancode, rcvMSG );

    /* 构建取报文头SQL */
    memset( SQLstr, 0x00, sizeof(SQLstr) );
    sprintf( SQLstr, "select * from t_pbbnet_tyzf_mgmt where msg_type[1,1]='2' and (trancode='PUB' or trancode='%s')  order by msg_type,seqno; ", outtrancode );
    WriteLog( APP_LVL, "SQLstr[%s]", SQLstr );

    EXEC SQL PREPARE net_tyzf_mgmt_str FROM :SQLstr;
    if( SQLCODE != 0 )
    {
        WriteLog( ERR_LVL, "准备游标错！prepare error!sqlcode[%ld]", sqlca.sqlcode );
        return ( -1 );
    }

    EXEC SQL DECLARE net_tyzf_mgmt_cur SCROLL CURSOR FOR net_tyzf_mgmt_str;
    if( SQLCODE != 0 )
    {
        WriteLog( ERR_LVL, "声明游标错！Declare error!sqlcode[%ld]", sqlca.sqlcode );
        EXEC SQL FREE net_tyzf_mgmt_str;
        return ( -1 );
    }

    EXEC SQL OPEN net_tyzf_mgmt_cur;
    if( SQLCODE != 0 )
    {
        WriteLog( ERR_LVL, "打开游标错! Open error!sqlcode[%ld]", sqlca.sqlcode );
        EXEC SQL FREE net_tyzf_mgmt_str;
        EXEC SQL FREE net_tyzf_mgmt_cur;
        return ( -1 );
    }

    for( i = 0; pbbnet_tyzf_mgmt.seqno < 9999; i++ )
    {
        memset( &pbbnet_tyzf_mgmt, 0x00, sizeof(pbbnet_tyzf_mgmt) );
        WriteLog( APP_LVL, "i[%d]", i );
        EXEC SQL FETCH net_tyzf_mgmt_cur INTO :pbbnet_tyzf_mgmt;
        if( sqlca.sqlcode == 100 )
        {
            WriteLog( ERR_LVL, "数据库表t_pbbnet_tyzf_mgmt已无记录,查询退出 i[%d] sqlcode[%ld]", i, sqlca.sqlcode);
            EXEC SQL CLOSE net_tyzf_head_mgmt_cur;
            EXEC SQL FREE net_tyzf_head_mgmt_cur;
            EXEC SQL FREE net_tyzf_mgmt_str;
            WriteLog( ERR_LVL, "查询完毕，循环退出 i[%d]", i );
            break;
        }
        else if( (sqlca.sqlcode != 100) && (sqlca.sqlcode != 0) )
        {
            WriteLog( ERR_LVL, "取游标错误 sqlcode[%ld]", i, sqlca.sqlcode);
            EXEC SQL CLOSE net_tyzf_head_mgmt_cur;
            EXEC SQL FREE net_tyzf_head_mgmt_cur;
            EXEC SQL FREE net_tyzf_mgmt_str;
            return (-1);
        }


        /* 获取返回报文中有效字段 */
        memset( fld_value, 0x00, sizeof(fld_value) );
        trim( pbbnet_tyzf_mgmt.tyzf_fld );
        fldLEN = getXmlNodeContent( rcvMSG, pbbnet_tyzf_mgmt.tyzf_fld, &content );
        if ( fldLEN < 1 )
        {
            WriteLog( ERR_LVL, "ERROR:无法取域 <%s> 的值", pbbnet_tyzf_mgmt.tyzf_fld );
            EXEC SQL CLOSE net_tyzf_head_mgmt_cur;
            EXEC SQL FREE net_tyzf_head_mgmt_cur;
            EXEC SQL FREE net_tyzf_mgmt_str;
            return -2;
        }

        if (fldLEN > 128) fldLEN = 128;

        strncpy( fld_value, content, fldLEN );
        fld_value[fldLEN] = '\0';
        PutPoolDataByName( pbbnet_tyzf_mgmt.dict_name, pbbnet_tyzf_mgmt.pb_fld, 0, 0, fld_value, 0);
        WriteLog( APP_LVL, "dict_name[%s] pb_fld[%s] tyzf_fld[%s] fld_value[%s]",
                  pbbnet_tyzf_mgmt.dict_name, pbbnet_tyzf_mgmt.pb_fld, pbbnet_tyzf_mgmt.tyzf_fld, fld_value );
        /**WriteLog( APP_LVL, "content[%s]", content );**/

        if( pbbnet_tyzf_mgmt.seqno == 5050 )
        {
            /* 判定统一支付是否返回为失败 */
            memset( fld_value, 0x00, sizeof(fld_value) );
            GetPoolDataByName( "BUSIIB", "merchNb", 0, 0, fld_value, 0);
            trim( fld_value );
            if( strcmp(fld_value, "000000") == 0 )
            {
                WriteLog( ERR_LVL, "统一支付交易返回成功[%s]", fld_value );
            }
            else
            {
                WriteLog( ERR_LVL, "统一支付交易返回失败[%s]", fld_value );
                EXEC SQL CLOSE net_tyzf_head_mgmt_cur;
                EXEC SQL FREE net_tyzf_head_mgmt_cur;
                EXEC SQL FREE net_tyzf_mgmt_str;
                return 100;
            }
        }

    }

    WriteLog( ERR_LVL, "----解析统一支付平台返回报文成功----" );
    return (0);
}



/*****************************************
 *Function    :	After_Deal
 *DESC        :	统一支付平台通讯后处理
 *INPUT       :	外部交易码
 *Return:   0 - 成功

 *------------------------------------
 *Author	Date			    Action
 *MSJ 		2015/12/10		Create
*****************************************/
int After_Deal( char *outtrancode )
{
    EXEC SQL BEGIN DECLARE SECTION;
        char  trandate[10 + 1];
        char  seqno[10 + 1];
        char  hostSeqNb[32 + 1];
        char  tyzf_msg[32 + 1];
        char  payinstno[4 + 1];
        char  rcvinstno[4 + 1];
        char  paybankno[32 + 1];
        char  rcvbankno[32 + 1];
        char  paybankname[128 + 1];
        char  rcvbankname[128 + 1];
        char  sndAppCd[3 + 1];
        char  transchnl[32 + 1];
        char  feeflag[2 + 1];
        double fee;
    EXEC SQL END DECLARE SECTION;
    int    ret;
    char   err_code[6 + 1];
    char   err_msg[256 + 1];
    char   tyzf_errno[32 + 1];
    char   tyzf_errmsg[128 + 1];
    char   s_fee[16 + 1];
    int    core_err_no = 0;

    memset( err_code, 0x00, sizeof(err_code) );
    memset( err_msg, 0x00, sizeof(err_msg) );
    memset( tyzf_errno, 0x00, sizeof(tyzf_errno) );
    memset( tyzf_errmsg, 0x00, sizeof(tyzf_errmsg) );
    memset( trandate, 0x00, sizeof(trandate) );
    memset( seqno, 0x00, sizeof(seqno) );
    memset( hostSeqNb, 0x00, sizeof(hostSeqNb) );
    memset( tyzf_msg, 0x00, sizeof(tyzf_msg) );
    memset( payinstno, 0x00, sizeof(payinstno) );
    memset( rcvinstno, 0x00, sizeof(rcvinstno) );
    memset( paybankno, 0x00, sizeof(paybankno) );
    memset( rcvbankno, 0x00, sizeof(rcvbankno) );
    memset( paybankname, 0x00, sizeof(paybankname) );
    memset( rcvbankname, 0x00, sizeof(rcvbankname) );
    memset( sndAppCd, 0x00, sizeof(sndAppCd) );
    memset( transchnl, 0x00, sizeof(transchnl) );
    memset( feeflag, 0x00, sizeof(feeflag) );
    memset( s_fee, 0x00, sizeof(s_fee) );

    /* 判定统一支付平台返回交易是否成功 */
    /* 错误码 */
    GetPoolDataByName( "BUSIIB", "merchNb", 0, 0, tyzf_errno, 0 );
    trim( tyzf_errno );
    WriteLog( ERR_LVL, "outtrancode[%s] tyzf_errno[%s]", outtrancode, tyzf_errno );

    /* 错误信息 */
    GetPoolDataByName( "BUSIIB", "merchNm", 0, 0, tyzf_errmsg, 0 );
    trim( tyzf_errmsg );
    WriteLog( ERR_LVL, "tyzf_errmsg[%s]", tyzf_errmsg );

    if( strcmp(tyzf_errno, "000000") == 0 )
    {
        WriteLog( ERR_LVL, "与统一支付交易成功" );
    }
    else
    {
        WriteLog( ERR_LVL, "统一支付返回交易失败" );
        core_err_no = 99999;
        strcpy( err_code, "99999");
        PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, err_code, 0 );
        PutPoolDataByName( "BUSIIB", "thsdesc", 0, 0, tyzf_errmsg, 0 );
        PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, &core_err_no, 0 );
        PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, tyzf_errmsg, 0 );
        return (100);

    }

    /* 统一支付平台交易需更正对应流水号与对应信息 */
    /* 交易日期 */
    GetPoolDataByName( "PBSYS", "PbDate", 0, 0, trandate, 0 );
    trim( trandate );
    WriteLog( ERR_LVL, "trandate[%s]", trandate );

    /* 渠道流水号 */
    GetPoolDataByName( "PBSYS", "SrcJourNo", 0, 0, seqno, 0 );
    trim( seqno );
    WriteLog( ERR_LVL, "seqno[%s]", seqno );

    /* 账务主机记账流水号 */
    GetPoolDataByName( "BUSIIB", "hostSeqNb", 0, 0, hostSeqNb, 0 );
    trim( hostSeqNb );
    WriteLog( ERR_LVL, "hostSeqNb[%s]", hostSeqNb );

    /* 取转出账户的开户机构号 */
    GetPoolDataByName( "BUSIIB", "payBrchID", 0, 0, payinstno, 0 );
    trim( payinstno );
    WriteLog( APP_LVL, "payinstno[%s]", payinstno );

    /* 取转出账户的开户行号 */
    GetPoolDataByName( "BUSIIB", "bookBrchID", 0, 0, paybankno, 0 );
    trim( paybankno );
    WriteLog( APP_LVL, "paybankno[%s]", paybankno );

    /* 取转出账户的开户行名 */
    GetPoolDataByName( "BUSIIB", "bookBrchNm", 0, 0, paybankname, 0 );
    trim( paybankname );
    WriteLog( APP_LVL, "paybankname[%s]", paybankname );

    /* 交易发起平台代码 */
    GetPoolDataByName( "BUSIIB", "thmsndAppCd", 0, 0, sndAppCd, 0 );
    trim( sndAppCd );
    WriteLog( APP_LVL, "sndAppCd[%s]", sndAppCd );

    strcpy( tyzf_msg, "本交易由统一支付平台完成" );

    EXEC SQL begin work;

    EXEC SQL UPDATE t_pb_net_log
             SET midtrancode[1,10] = :hostSeqNb,
                 midtrancode[11,14] = :sndAppCd
             WHERE trandate = :trandate
               AND seqno=:seqno;
    if( SQLCODE != 0 )
    {
        WriteLog( ERR_LVL, "更新网银日志表失败[%d] [%s][%s]", SQLCODE, trandate, seqno );
        EXEC SQL rollback work;
        if( SQLCODE != 0 )
        {
            WriteLog( ERR_LVL, "rollback 失败！！[%d]", SQLCODE );
        }
        return (-1);
    }

    if( strcmp(outtrancode, "CBS0000100") == 0 )
    {
        WriteLog( APP_LVL, "行内转账更新网银流水表" );
        /* 取转入账户的开户机构号 */
        GetPoolDataByName( "BUSIIB", "rcvBrchID", 0, 0, rcvinstno, 0 );
        trim( rcvinstno );
        WriteLog( APP_LVL, "rcvinstno[%s]", rcvinstno );

        /* 取转入账户的开户行号 */
        GetPoolDataByName( "BUSIIB", "loanBrchID", 0, 0, rcvbankno, 0 );
        trim( rcvbankno );
        WriteLog( APP_LVL, "rcvbankno[%s]", rcvbankno );

        /* 取转入账户的开户行号 */
        GetPoolDataByName( "BUSIIB", "loanBrchNm", 0, 0, rcvbankname, 0 );
        trim( rcvbankname );
        WriteLog( APP_LVL, "rcvbankname[%s]", rcvbankname );

        EXEC SQL UPDATE t_pb_net_dtl
                 SET payinstno = :payinstno,
                     payopeninst = :paybankno,
                     payopenname = :paybankname,
                     rcvinstno = :rcvinstno,
                     rcvopeninst = :rcvbankno,
                     rcvopenname = :rcvbankname,
                     backup3 = :hostSeqNb,
                     backup4 = :sndAppCd,
                     backup5 = :tyzf_msg
                 WHERE trandate = :trandate
                   AND seqno=:seqno;
        if( SQLCODE != 0 )
        {
            WriteLog( ERR_LVL, "更新网银流水表失败[%d] [%s][%s]", SQLCODE, trandate, seqno );
            EXEC SQL rollback work;
            if( SQLCODE != 0 )
            {
                WriteLog( ERR_LVL, "rollback 失败！！[%d]", SQLCODE );
            }
            return (-1);
        }
    }
    else if( strcmp(outtrancode, "CBS0000110") == 0 )
    {
        WriteLog( APP_LVL, "跨行转账更新网银流水表" );

        /* 取大小额渠道标志 1-小额；2-大额 */
        GetPoolDataByName( "BUSIIB", "transferChnl", 0, 0, transchnl, 0 );
        trim( transchnl );
        WriteLog( APP_LVL, "transchnl[%s]", transchnl );

        /* 取手续费 */
        GetPoolDataByName( "BUSIIB", "fee", 0, 0, s_fee, 0 );
        trim( s_fee );
        fee = atof( s_fee);
        WriteLog( APP_LVL, "s_fee[%s][%.2f]", s_fee, fee );
        if( fee < 0.001 )
        {
            memset( s_fee, 0x00, sizeof(s_fee) );
            GetPoolDataByName( "BUSIIB", "noticeAmt", 0, 0, s_fee, 0 );
            trim( s_fee );
            fee = atof( s_fee);
            WriteLog( APP_LVL, "s_fee[%s][%.2f]", s_fee, fee );
        }

        /* 取手续费标志 */
        GetPoolDataByName( "BUSIIB", "feeFlg", 0, 0, feeflag, 0 );
        trim( feeflag );
        WriteLog( APP_LVL, "feeflag[%s]", feeflag );

        EXEC SQL UPDATE t_pb_net_dtl
                 SET payinstno = :payinstno,
                     payopeninst = :paybankno,
                     payopenname = :paybankname,
                     rcvinstno = :rcvinstno,
                     rcvopeninst = :rcvbankno,
                     rcvopenname = :rcvbankname,
                     transchnl = :transchnl,
                     fee = :fee,
                     feeflag = :feeflag,
                     backup3 = :hostSeqNb,
                     backup4 = :sndAppCd,
                     backup5 = :tyzf_msg
                 WHERE trandate = :trandate
                   AND seqno=:seqno;
        if( SQLCODE != 0 )
        {
            WriteLog( ERR_LVL, "更新网银流水表失败[%d] [%s][%s]", SQLCODE, trandate, seqno );
            EXEC SQL rollback work;
            if( SQLCODE != 0 )
            {
                WriteLog( ERR_LVL, "rollback 失败！！[%d]", SQLCODE );
            }
            return (-1);
        }
    }
    else if( strcmp(outtrancode, "CBS0000130") == 0 )
    {
        WriteLog( ERR_LVL, "本交易为流水查证，无需做统一支付平台通讯后处理" );
    }
    else
    {
        WriteLog( ERR_LVL, "======错误交易码[%s]==========", outtrancode );
        EXEC SQL rollback work;
        if( SQLCODE != 0 )
        {
            WriteLog( ERR_LVL, "rollback 失败！！[%d]", SQLCODE );
        }
        return (-1);
    }

    EXEC SQL commit work;
    if( SQLCODE != 0 )
    {
        WriteLog( ERR_LVL, "rollback 失败！！[%d]", SQLCODE );
        return (-1);
    }


    WriteLog( ERR_LVL, "----统一支付平台通讯后处理成功----" );
    return (0);
}

/*****************************************
 *Function    :	getXmlNodeContent
 *DESC        :	根据XML报文中的字段名取其域值
 *INPUT       :	报文 | 目标报文字段 | 空指针
 *Return:   0 - 成功

 *------------------------------------
 *Author	Date			    Action
 *
*****************************************/
int getXmlNodeContent(const char *xml, const char *node, const char **content)
{
    int  nodeLen = strlen(node);
    const char *p = xml;

    *content = NULL;
    while ( *p != '\0' )
    {
        if ( *p == '<' )
        {
            p++;

            if ( (strncmp(p, node, nodeLen) == 0) && (*(p + nodeLen) == '>') )
            {
                p = p + nodeLen + 1;
                *content = p;
            }
            else if ( (*p == '/')
                      && (strncmp(p + 1, node, nodeLen) == 0)
                      && (*(p + nodeLen + 1) == '>')
                    )
            {
                if ( *content != NULL )
                    return p - *content - 1;

                p = p + nodeLen + 2;
            }
        }
        else
            p++;
    }
    WriteLog( ERR_LVL, "未取到对应数据[%s]", node );

    return -1;
}

/*编码转换程序*/
char *sca_iconv(char *from_charset, char *to_charset, char *inbuf)
{
    size_t inlen;
    size_t outlen;

    char *in;
    char *out;
    char *outbuf;
    iconv_t cd;

    inlen = strlen(inbuf);
    WriteLog( APP_LVL, "inlen[%d]", inlen );
    if(inbuf == NULL || inlen == 0)
    {
        WriteLog(ERR_LVL, "要转码的字符串为空或长度为0");
        return NULL;
    }

    cd = iconv_open(to_charset, from_charset);
    if(cd == (iconv_t) - 1)
    {
        WriteLog(ERR_LVL, "打开字符集(%s  %s)失败：%s", to_charset, from_charset, strerror(errno));
        return NULL;
    }

    outlen = 2 * inlen - 1;
    outbuf = (char *)malloc(outlen);
    if( outbuf == NULL )
    {
        WriteLog(ERR_LVL, "malloc失败：outbuf");
        return NULL;
    }
    memset(outbuf, 0x00, outlen);

    in = inbuf;
    out = outbuf;

    if( iconv(cd, &in, &inlen, &out, &outlen) != 0)
    {
        iconv_close(cd);
        free(outbuf);
        WriteLog(ERR_LVL, "字符集转换失败：%s", strerror(errno));
        return NULL;
    }

    iconv_close(cd);

    WriteLog( APP_LVL, "报文自[%s]到[%s]转换成功", from_charset, to_charset );
    return outbuf;
}

/*修改该函数*/
int get_tyzf_head( char *tyzf_msg, char *outtrancode, char *tyzf_head )
{
    EXEC SQL BEGIN DECLARE SECTION;
        char strSQL[1024 + 1];
        char memo[100 + 1];
    EXEC SQL END DECLARE SECTION;
    long MSG_len = 0;
    int num = 0;

    memset( strSQL, 0x00, sizeof(strSQL) );
    memset( memo, 0x00, sizeof(memo) );

    /* 取报文长度 */
    MSG_len = strlen(tyzf_msg);

    /* 构建统一支付报文头配置信息SQL */
    sprintf( strSQL, "select memo from t_pbbnet_tyzf_mgmt where msg_type='00' and (trancode='PUB' or trancode='%s') order by msg_type,seqno;", outtrancode );
    WriteLog( APP_LVL, "取统一支付报文头配置SQL[%s]", strSQL );

    EXEC SQL PREPARE pbbnet_tyzf_str FROM :strSQL;
    if( SQLCODE != 0 )
    {
        WriteLog( ERR_LVL, "准备游标错！prepare error!sqlcode[%ld]", sqlca.sqlcode );
        return -1;
    }

    EXEC SQL DECLARE pbbnet_tyzf_cur SCROLL CURSOR FOR pbbnet_tyzf_str;
    if( SQLCODE != 0 )
    {
        WriteLog( ERR_LVL, "声明游标错！Declare error!sqlcode[%ld]", sqlca.sqlcode );
        EXEC SQL FREE pbbnet_tyzf_str;
        return -1;
    }

    EXEC SQL OPEN pbbnet_tyzf_cur;
    if( SQLCODE != 0 )
    {
        WriteLog( ERR_LVL, "打开游标错! Open error!sqlcode[%ld]", sqlca.sqlcode );
        EXEC SQL FREE pbbnet_tyzf_cur;
        EXEC SQL FREE pbbnet_tyzf_str;
        return -1;
    }

    while( 1 )
    {
        memset( memo, 0x00, sizeof(memo) );
        EXEC SQL FETCH pbbnet_tyzf_cur INTO :memo;
        if( sqlca.sqlcode == 100 )
        {
            WriteLog( ERR_LVL, "数据库表t_pbbnet_tyzf_mgmt已无记录,查询退出 num[%d] sqlcode[%ld]", num, sqlca.sqlcode);
            EXEC SQL CLOSE net_tyzf_cur;
            EXEC SQL FREE net_tyzf_cur;
            EXEC SQL FREE net_tyzf_str;
            break;
        }
        else if( (sqlca.sqlcode != 100) && (sqlca.sqlcode != 0) )
        {
            WriteLog( ERR_LVL, "取游标错误 num[%d] sqlcode[%ld]", num, sqlca.sqlcode);
            EXEC SQL CLOSE net_tyzf_cur;
            EXEC SQL FREE net_tyzf_cur;
            EXEC SQL FREE net_tyzf_str;
            return -1;
        }

        trim( memo );
        WriteLog( APP_LVL, "num[%d] memo[%s]", num, memo );
        if( num == 0 )
        {
            /* 每一行末尾加字符 \r\n */
            sprintf( tyzf_head, "%s\r\n", memo );
        }
        else if( strncmp(memo, "Content-Length", 14) == 0 )
        {
            /* 每一行末尾加字符 \r\n */
            sprintf( tyzf_head, "%s%s %d\r\n", tyzf_head, memo, MSG_len );

        }
        else
        {
            /* 每一行末尾加字符 \r\n */
            sprintf( tyzf_head, "%s%s\r\n", tyzf_head, memo );
        }
        num++;
    }

    WriteLog( APP_LVL, "===========拼统一支付头报文成功============" );
    return 0;
}

/* 手续费计算 */
int net_fee_amt()
{
    struct pkg_cbs0000120 pkg_in;
    struct pkg_cbs0000121 pkg_out;
    char fee_flag[2 + 1];
    char fee_amt[16 + 1];

    int ret = 0;

    memset (&pkg_in, 0x00, sizeof(pkg_in) );
    memset (&pkg_out, 0x00, sizeof(pkg_out) );

    GetPoolDataByName( "BUSIIB", "cardAcctFlg", 0, 0, pkg_in.cardAcctFlg, 0 );
    GetPoolDataByName( "BUSIIB", "payCardAcctNb", 0, 0, pkg_in.payCardAcctNb, 0 );
    GetPoolDataByName( "BUSIIB", "payCurTyp", 0, 0, pkg_in.payCurTyp, 0 );
    GetPoolDataByName( "BUSIIB", "payCashFlg", 0, 0, pkg_in.payCashFlg, 0 );
    GetPoolDataByName( "BUSIIB", "payCustNm", 0, 0, pkg_in.payCustNm, 0 );
    GetPoolDataByName( "BUSIIB", "payBrchID", 0, 0, pkg_in.payBrchID, 0 );
    GetPoolDataByName( "BUSIIB", "payBrchNm", 0, 0, pkg_in.payBrchNm, 0 );
    GetPoolDataByName( "BUSIIB", "chkPwdFlg", 0, 0, pkg_in.chkPwdFlg, 0 );
    GetPoolDataByName( "BUSIIB", "pwdTyp", 0, 0, pkg_in.pwdTyp, 0 );
    GetPoolDataByName( "BUSIIB", "pwd", 0, 0, pkg_in.pwd, 0 );
    GetPoolDataByName( "BUSIIB", "transferChnl", 0, 0, pkg_in.transferChnl, 0 );
    GetPoolDataByName( "BUSIIB", "fastFlg", 0, 0, pkg_in.fastFlg, 0 );
    GetPoolDataByName( "BUSIIB", "manualFlg", 0, 0, pkg_in.manualFlg, 0 );
    GetPoolDataByName( "BUSIIB", "rcvAcct", 0, 0, pkg_in.rcvAcct, 0 );
    GetPoolDataByName( "BUSIIB", "rcvCustNm", 0, 0, pkg_in.rcvCustNm, 0 );
    GetPoolDataByName( "BUSIIB", "rcvAcctSvcr", 0, 0, pkg_in.rcvAcctSvcr, 0 );
    GetPoolDataByName( "BUSIIB", "rcvAcctSvcrNm", 0, 0, pkg_in.rcvAcctSvcrNm, 0 );
    GetPoolDataByName( "BUSIIB", "transAmt", 0, 0, pkg_in.transAmt, 0 );

    rtrim(pkg_in.cardAcctFlg);		/*卡账号标志*/
    rtrim(pkg_in.payCardAcctNb);		/*转出卡号/账号*/
    rtrim(pkg_in.payCurTyp);			/*转出币种*/
    rtrim(pkg_in.payCustNm);			/*转出客户名称*/
    rtrim(pkg_in.chkPwdFlg);			/*是否校验密码*/
    rtrim(pkg_in.rcvAcct);			/*转入账号*/
    rtrim(pkg_in.rcvCustNm);			/*转入户名*/
    rtrim(pkg_in.transAmt);			/*转出金额*/

    rtrim(pkg_in.fastFlg);        /*加急标志*/
    rtrim(pkg_in.transferChnl);   /*渠道标志*/

    if (pkg_in.fastFlg[0] == '1' && pkg_in.transferChnl[0] == '1')
        pkg_in.transferChnl[0] = '2';

    ret = calc_fee_amt(pkg_in, &pkg_out, 0);
    if (ret != 0)
    {
        WriteLog( ERR_LVL, "调用函数calc_fee_amt失败" );
        return -1;
    }

    memset(fee_flag, 0, sizeof(fee_flag) );
    memset(fee_amt, 0, sizeof(fee_amt) );
    sprintf(fee_flag, "%d", pkg_out.isFreeFlag);
    sprintf(fee_amt, "%.2f", pkg_out.fee);

    WriteLog( ERR_LVL, "RUN: flag[%s]fee[%s]", fee_flag, fee_amt);

    PutPoolDataByName( "BUSIIB", "feeFlg", 0, 0, fee_flag, 0 );
    PutPoolDataByName( "BUSIIB", "noticeAmt", 0, 0, fee_amt, 0 );

    if( pkg_out.isFreeFlag == 1 )
    {
        WriteLog( ERR_LVL, "手续费试算交易可能未调用，需重做交易" );
        return 10;
    }

    return 0;
}

#define BUFLEN 1024

/**循环接收数据***/
static int recv_data(int sockfd, char *buf, int sec_timeout)
{
    int n = 0;
    char *p = buf;

    set_rcv_time_out(sockfd, sec_timeout);

    while ( (n = recv(sockfd, p, BUFLEN, 0)) > 0)
        p += n;

    *p = '\0';

    return n;
}

/*设置接收超时间*/
int set_rcv_time_out(const int sockt, const int rcv_timeout)
{
    struct fd_set      fds;
    struct timeval     tm;
    int  ret = 0;

    /* 等待接收报文 设置为非阻塞模式 */
    FD_ZERO( &fds );
    FD_SET( sockt, &fds );
    tm.tv_sec = rcv_timeout;
    tm.tv_usec = 0;

    ret = select( sockt + 1, &fds, NULL, NULL, &tm );
    if( ret == 0  )
    {
        WriteLog(ERR_LVL, "ret[%d] 获取数据超时 errno[%d][%s]", ret, errno, strerror(errno) );
        close( sockt );
        return (-2);
    }
    else if( ret <= 0 || FD_ISSET( sockt, &fds) == 0 )
    {
        WriteLog(ERR_LVL, "ret[%d] 获取数据失败 errno[%d][%s]", ret, errno, strerror(errno) );
        close( sockt );
        return (-1);
    }

    return 0;
}

