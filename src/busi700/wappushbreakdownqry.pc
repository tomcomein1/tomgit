/*PB3.0系统自动生成demo源码文件*/

#include <stdio.h>
#include <stdlib.h>
#include <sys/types.h>
#include <time.h>
#include "pbconstval.h" 
#include "pbstructdef.h" 
#ifdef ORACLE_DATABASE
EXEC SQL include "pbranchdb.h";
#else
#include "pbranchdb.h"
#endif
#include "pberrlog.h"
#include "pbglbvardef.h"
#include "pbbasefunc.h"

EXEC SQL  include "pb_s_agt_batch.h";

int WappushbreakdownQry()
{
	EXEC SQL BEGIN DECLARE SECTION;
	char sql_str[1024+1];
	char batch_no[10+1];
	char instno[4+1];
	char hopedate[10+1];
	char chnlseqno[32+1];
	char btchNb[32+1];
	char work_date[10+1];
	char cmp_date[10+1];
	char trandate[8+1];
	char seqno[10+1];
	char seqNb[15+1];
	char flag[6+1];
	char err_code[6+1];
	char err_msg[256+1];
	char dtl_msg[40+1];
	char remake2[40+1];
	long agt_num = -1;
	long ag_tx_seqno = -1;
	long cnt;
	EXEC SQL END DECLARE SECTION;
	char filename[256+1];
	char cfgfile[256+1];
	char xmloutput[256+1];
	char ftpfilename[256+1];
	char cmd[256+1];
	char txtfile[128+1];
	char stat[1+1];
	char errRes[60+1];
	
	char thver[6+1];
	char thcn2utf8[1+1];
	
	char thpsndMbrCd[4+1];
	char thpsndAppCd[3+1];
	char thpsndDt[8+1];
	char thpsndTm[6+1];
	char thprcvMbrCd[4+1];
	char thprcvAppCd[3+1];
	
	char thmmsgCd[10+1];
	char thmcallTyp[4+1];
	char thmseqNb[15+1];
	char thmsndMbrCd[4+1];
	char thmsndAppCd[3+1];
	char thmsndDt[8+1];
	char thmsndTm[6+1];
	char thmrcvMbrCd[4+1];
	char thmrcvAppCd[3+1];
	char thmrefMsgCd[10+1];
	char thmrefCallTyp[4+1];
	char thmrefSndMbrCd[4+1];
	char thmrefSndAppCd[3+1];
	char thmrefSndDt[8+1];
	char thmrefSeqNb[15+1];
	
	char thsretCd[6+1];	
	char thsdesc[256+1];	
	char thslocation[256+1];	
	char thsmbrCd[4+1];	
	char thsappCd[3+1];	
	
	FILE * fp;
	int ret = 0;
	long errcode = 0;

	/* Added by MSJ 20121214 - Start */
	int l_hopedate=0;
	int l_work_date=0;
	/* 20121214 - End */

	memset( sql_str, 0, sizeof( sql_str ) );
	memset( batch_no, 0, sizeof( batch_no ) );
	memset( instno, 0, sizeof( instno ) );
	memset( hopedate, 0, sizeof( hopedate ) );
	memset( chnlseqno, 0, sizeof( chnlseqno ) );
	memset( btchNb, 0, sizeof( btchNb ) );
	memset( work_date, 0, sizeof( work_date ) );
	memset( cmp_date, 0, sizeof( cmp_date ) );
	memset( flag, 0, sizeof( flag ) );
	memset( err_code, 0, sizeof( err_code ) );
	memset( err_msg, 0, sizeof( err_msg ) );
	memset( filename, 0, sizeof( filename ) );
	memset( cfgfile, 0, sizeof( cfgfile ) );
	memset( xmloutput, 0, sizeof( xmloutput ) );
	memset( ftpfilename, 0, sizeof( ftpfilename ) );
	memset( cmd, 0, sizeof( cmd ) );
	memset( txtfile, 0, sizeof( txtfile ) );
	memset( stat, 0, sizeof( stat ) );
	memset( errRes, 0, sizeof( errRes ) );
	memset( seqno, 0, sizeof( seqno ) );
	memset( seqNb, 0, sizeof( seqNb ) );
	memset( trandate, 0, sizeof( trandate ) );
	
	memset( thver, 0, sizeof( thver ) );
	memset( thcn2utf8, 0, sizeof( thcn2utf8 ) );
	
	memset( thpsndMbrCd, 0, sizeof( thpsndMbrCd ) );
	memset( thpsndAppCd, 0, sizeof( thpsndAppCd ) );
	memset( thpsndDt, 0, sizeof( thpsndDt ) );
	memset( thpsndTm, 0, sizeof( thpsndTm ) );
	memset( thprcvMbrCd, 0, sizeof( thprcvMbrCd ) );
	memset( thprcvAppCd, 0, sizeof( thprcvAppCd ) );
	
	memset( thmmsgCd, 0, sizeof( thmmsgCd ) );
	memset( thmcallTyp, 0, sizeof( thmcallTyp ) );
	memset( thmseqNb, 0, sizeof( thmseqNb ) );
	memset( thmsndMbrCd, 0, sizeof( thmsndMbrCd ) );
	memset( thmsndAppCd, 0, sizeof( thmsndAppCd ) );
	memset( thmsndDt, 0, sizeof( thmsndDt ) );
	memset( thmsndTm, 0, sizeof( thmsndTm ) );
	memset( thmrcvMbrCd, 0, sizeof( thmrcvMbrCd ) );
	memset( thmrcvAppCd, 0, sizeof( thmrcvAppCd ) );
	memset( thmrefMsgCd, 0, sizeof( thmrefMsgCd ) );
	memset( thmrefCallTyp, 0, sizeof( thmrefCallTyp ) );
	memset( thmrefSndMbrCd, 0, sizeof( thmrefSndMbrCd ) );
	memset( thmrefSndAppCd, 0, sizeof( thmrefSndAppCd ) );
	memset( thmrefSndDt, 0, sizeof( thmrefSndDt ) );
	memset( thmrefSeqNb, 0, sizeof( thmrefSeqNb ) );
	
	memset( thsretCd, 0, sizeof( thsretCd ) );
	memset( thsdesc, 0, sizeof( thsdesc ) );
	memset( thslocation, 0, sizeof( thslocation ) );
	memset( thsmbrCd, 0, sizeof( thsmbrCd ) );
	memset( thsappCd, 0, sizeof( thsappCd ) );

	/***从变量池中取值***/
	/**
	GetPoolDataByName( "PBSYS", "SysDate", 0, 0, work_date, 0 );
	**/
	GetPoolDataByName( "BUSIIB", "thmseqNb", 0, 0, chnlseqno, 0 );
	GetPoolDataByName( "BUSIIB", "btchNb", 0, 0, btchNb, 0 );
	GetPoolDataByName( "PBSYS", "SrcJourNo", 0, 0, seqno, 0 );
	GetPoolDataByName( "PBSYS", "PbDate", 0, 0, trandate, 0 );
	memcpy( seqNb, trandate, 8 );
	memcpy( seqNb+8, seqno+3, 7 );
	ret = PayGetPbDate( work_date );
	if( ret != 0 )
	{
		WriteLog( ERR_LVL, "取系统日期错\n" );
		strcpy( err_code, "99999" );
		errcode = 99999;
		strcpy( err_msg, "取系统日期错!" );
		PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode, 0 );
		PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
		return (-1);
	}
	WriteLog( APP_LVL, "cnt[%d]\n", cnt );
	/***查询网银流水表***/
	EXEC SQL SELECT batchno, instno, hopedate, agt_num
		INTO :batch_no, :instno, :hopedate, :agt_num
		FROM t_pb_net_dtl
		WHERE btchnb = :btchNb;
	if( sqlca.sqlcode != 0 )
	{
		WriteLog( ERR_LVL, "sqlcode[%d]\n", sqlca.sqlcode );
		if( sqlca.sqlcode == 100 )
		{
			strcpy( err_code, "20027" );
			errcode = 20027;
			strcpy( err_msg, "无此批次号!" );
			PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode, 0 );
			PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
			return (-1);
		}
		else
		{
			strcpy( err_code, "20028" );
			errcode = 20028;
			strcpy( err_msg, "代发工资查询失败!" );
			PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode, 0 );
			PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
			return (-1);
		}
	}
	strncpy( cmp_date, btchNb, 8 );
	WriteLog( APP_LVL, "batchno[%s],hopedate[%s],agt_num[%d],instno[%s],cmp_date[%s],work_date[%s]\n", batch_no, hopedate, agt_num, instno, cmp_date, work_date );

	rtrim( cmp_date );
	rtrim( work_date );
	rtrim( hopedate );

	/* Added by MSJ 20121214 - Start */
	rdefmtdate( &l_work_date, "yyyymmdd", work_date);
	rdefmtdate( &l_hopedate, "yyyymmdd", hopedate);
	WriteLog( ERR_LVL,"batchno[%s],hopedate[%s],agt_num[%d],instno[%s],work_date[%s]\n",
		   batch_no, hopedate, agt_num, instno, work_date );
	/* 代理明细表中存储当天与前一天记录*/
	/* if( strncmp( hopedate, work_date, 8 ) == 0 ) */
	if( (l_work_date-l_hopedate==0) || (l_work_date-l_hopedate==1) )
	{
		/**
		sprintf( sql_str, "select ag_tx_seqno, flag, msg from t_sc_agt_dtl where batch_no = '%s' and hope_date = '%s' and col_inst = '%s' and agt_num = %d", batch_no, hopedate, instno, agt_num );
		**/
		sprintf( sql_str, "select remake2, flag, msg from t_sc_agt_dtl where batch_no = '%s' and hope_date = '%s' and col_inst = '%s' and agt_num = %d", batch_no, hopedate, instno, agt_num );
        /***取总笔数***/
        EXEC SQL SELECT count(*) INTO :cnt
            FROM t_sc_agt_dtl
            WHERE batch_no = :batch_no
                AND hope_date = :hopedate
                AND col_inst = :instno
                AND agt_num = :agt_num;
        if( SQLCODE )
        {
            WriteLog( ERR_LVL, "数据库操作出错!sqlcode[%d]\n", SQLCODE );
            strcpy( err_code, "99999" );
            errcode = 99999;
            strcpy( err_msg, "数据库操作出错!" );
            PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode, 0 );
            PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
            return (-1);
        }
	}
	else
	{
		/**
		sprintf( sql_str, "select ag_tx_seqno, flag, msg from t_sc_agt_dtl_his where batch_no = '%s' and hope_date = '%s' and col_inst = '%s' and agt_num = %d", batch_no, hopedate, instno, agt_num );
		**/
		sprintf( sql_str, "select remake2, flag, msg from t_sc_agt_dtl_his where batch_no = '%s' and hope_date = '%s' and col_inst = '%s' and agt_num = %d", batch_no, hopedate, instno, agt_num );
        /***取总笔数***/
        EXEC SQL SELECT count(*) INTO :cnt
            FROM t_sc_agt_dtl_his
            WHERE batch_no = :batch_no
                AND hope_date = :hopedate
                AND col_inst = :instno
                AND agt_num = :agt_num;
        if( SQLCODE )
        {
            WriteLog( ERR_LVL, "数据库操作出错!sqlcode[%d]\n", SQLCODE );
            strcpy( err_code, "99999" );
            errcode = 99999;
            strcpy( err_msg, "数据库操作出错!" );
            PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode, 0 );
            PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
            return (-1);
        }
	}
	/* 20121214 - End */

	WriteLog( APP_LVL, "sql_str[%s]\n", sql_str );
	WriteLog( APP_LVL, "cnt[%d]\n", cnt );

	EXEC SQL PREPARE agt_dtl_sql FROM :sql_str;
	if( SQLCODE )
	{
		WriteLog( ERR_LVL, "准备游标出错!" );
		strcpy( err_code, "99999" );
		errcode = 99999;
		strcpy( err_msg, "准备游标出错!" );
		PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode, 0 );
		PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
		return (-1);
	}
	EXEC SQL DECLARE agt_dtl_cur SCROLL CURSOR for agt_dtl_sql;
	if( SQLCODE )
	{
		WriteLog( ERR_LVL, "声明游标出错!" );
		strcpy( err_code, "99999" );
		errcode = 99999;
		strcpy( err_msg, "声明游标出错!" );
		PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode, 0 );
		PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
		EXEC SQL FREE agt_dtl_sql;
		return (-1);
	}
	EXEC SQL OPEN agt_dtl_cur;
	if( SQLCODE )
	{
		WriteLog( ERR_LVL, "打开游标出错!" );
		strcpy( err_code, "99999" );
		errcode = 99999;
		strcpy( err_msg, "打开游标出错!" );
		PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode, 0 );
		PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
		EXEC SQL FREE agt_dtl_cur;
		EXEC SQL FREE agt_dtl_sql;
		return (-1);
	}
	sprintf( filename, "%s/NETBANK/TOPB/WappushbreakdownQry%s%s.txt", getenv("PRINTERDIR"), work_date, btchNb );
	sprintf( txtfile, "WappushbreakdownQry%s%s.txt", work_date, btchNb );
	WriteLog( APP_LVL, "filename[%s]\n", filename );
	fp = fopen( filename, "w+" );
	if( fp == NULL )
	{
		WriteLog( ERR_LVL, "打开文件失败!" );
		strcpy( err_code, "99999" );
		errcode = 99999;
		strcpy( err_msg, "打开文件失败!" );
		PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode, 0 );
		PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
		EXEC SQL CLOSE agt_dtl_cur;
		EXEC SQL FREE agt_dtl_cur;
		EXEC SQL FREE agt_dtl_sql;
		return (-1);
	}
	/***写包头信息***/
	fprintf( fp, "!1|!1|\n" );
	GetPoolDataByName( "BUSIIB", "thver", 0, 0, thver, 0 );
	GetPoolDataByName( "BUSIIB", "thcn2utf8", 0, 0, thcn2utf8, 0 );
	
	fprintf( fp, "%s|%s|!1|!1|!1|\n", thver, thcn2utf8 );
	
	GetPoolDataByName( "BUSIIB", "thpsndMbrCd", 0, 0, thpsndMbrCd, 0 );
	GetPoolDataByName( "BUSIIB", "thpsndAppCd", 0, 0, thpsndAppCd, 0 );
	GetPoolDataByName( "BUSIIB", "thpsndDt", 0, 0, thpsndDt, 0 );
	GetPoolDataByName( "BUSIIB", "thpsndTm", 0, 0, thpsndTm, 0 );
	GetPoolDataByName( "BUSIIB", "thprcvMbrCd", 0, 0, thprcvMbrCd, 0 );
	GetPoolDataByName( "BUSIIB", "thprcvAppCd", 0, 0, thprcvAppCd, 0 );
	fprintf( fp, "%s|%s|%s|%s|%s|%s|\n", "6500", "CBS", thpsndDt, thpsndTm, "0000", "ESB" );
	
	GetPoolDataByName( "BUSIIB", "thmmsgCd", 0, 0, thmmsgCd, 0 );
	GetPoolDataByName( "BUSIIB", "thmcallTyp", 0, 0, thmcallTyp, 0 );
	GetPoolDataByName( "BUSIIB", "thmseqNb", 0, 0, thmseqNb, 0 );
	GetPoolDataByName( "BUSIIB", "thmsndMbrCd", 0, 0, thmsndMbrCd, 0 );
	GetPoolDataByName( "BUSIIB", "thmsndAppCd", 0, 0, thmsndAppCd, 0 );
	GetPoolDataByName( "BUSIIB", "thmsndDt", 0, 0, thmsndDt, 0 );
	GetPoolDataByName( "BUSIIB", "thmsndTm", 0, 0, thmsndTm, 0 );
	GetPoolDataByName( "BUSIIB", "thmrcvMbrCd", 0, 0, thmrcvMbrCd, 0 );
	GetPoolDataByName( "BUSIIB", "thmrcvAppCd", 0, 0, thmrcvAppCd, 0 );
	GetPoolDataByName( "BUSIIB", "thmrefMsgCd", 0, 0, thmrefMsgCd, 0 );
	GetPoolDataByName( "BUSIIB", "thmrefCallTyp", 0, 0, thmrefCallTyp, 0 );
	GetPoolDataByName( "BUSIIB", "thmrefSndMbrCd", 0, 0, thmrefSndMbrCd, 0 );
	GetPoolDataByName( "BUSIIB", "thmrefSndAppCd", 0, 0, thmrefSndAppCd, 0 );
	GetPoolDataByName( "BUSIIB", "thmrefSndDt", 0, 0, thmrefSndDt, 0 );
	GetPoolDataByName( "BUSIIB", "thmrefSeqNb", 0, 0, thmrefSeqNb, 0 );
	fprintf( fp, "CBS0000461|%s|%s|%s|%s|", thmcallTyp, seqNb, "6500", "CBS" );
	fprintf( fp, "%s|%s|%s|%s|%s|", thmsndDt, thmsndTm, "0000", "ESB", thmmsgCd );
	fprintf( fp, "%s|%s|%s|%s|%s|\n", thmcallTyp, thmsndMbrCd, thmsndAppCd, thmsndDt, thmseqNb );
	
	GetPoolDataByName( "BUSIIB", "thsretCd", 0, 0, thsretCd, 0 );
	GetPoolDataByName( "BUSIIB", "thsdesc", 0, 0, thsdesc, 0 );
	GetPoolDataByName( "BUSIIB", "thslocation", 0, 0, thslocation, 0 );
	GetPoolDataByName( "BUSIIB", "thsmbrCd", 0, 0, thsmbrCd, 0 );
	GetPoolDataByName( "BUSIIB", "thsappCd", 0, 0, thsappCd, 0 );
	
	fprintf( fp, "%s|%s|%s|%s|%s|\n", "000000", thsdesc, thslocation, "6500", "NNS" );
	
	fprintf( fp, "!1|\n" );
	fprintf( fp, "!1|\n" );
	fprintf( fp, "!%d|\n", cnt );
	cnt = 1;
	while(1)
	{
		ag_tx_seqno = 0;
		memset( flag, 0, sizeof( flag ) );
		memset( stat, 0, sizeof( stat ) );
		memset( dtl_msg, 0, sizeof( dtl_msg ) );
		memset( errRes, 0, sizeof( errRes ) );
		/**
		EXEC SQL FETCH ABSOLUTE :cnt agt_dtl_cur INTO :ag_tx_seqno, :flag, :dtl_msg;
		**/
		EXEC SQL FETCH ABSOLUTE :cnt agt_dtl_cur INTO :remake2, :flag, :dtl_msg;
		if( sqlca.sqlcode == 100 )
		{
			if( cnt == 1 )
			{
				strcpy( err_code, "20009" );
				errcode = 99999;
				strcpy( err_msg, "要查询的记录不存在!" );
				PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode, 0 );
				PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
				EXEC SQL CLOSE agt_dtl_cur;
				EXEC SQL FREE agt_dtl_cur;
				EXEC SQL FREE agt_dtl_sql;
				fclose( fp );
				return (-1);
			}
			break;
		}
		else if( sqlca.sqlcode < 0 )
		{
			strcpy( err_code, "20028" );
			errcode = 20028;
			strcpy( err_msg, "代发工资查询失败!" );
			PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode, 0 );
			PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
			EXEC SQL CLOSE agt_dtl_cur;
			EXEC SQL FREE agt_dtl_cur;
			EXEC SQL FREE agt_dtl_sql;
			fclose( fp );
			return (-1);
		}
		if( flag[2] == 'M' )
			stat[0] = '1';
		else if( flag[2] == 'A' || flag[2] == 'G' )
			stat[0] = '3';
		else if( flag[2] == 'B' )
		{
			stat[0] = '2';
			strcpy( errRes, "余额不足" );
		}
		else if( flag[2] == 'C' )
		{
			stat[0] = '2';
			strcpy( errRes, "账户状态不正确" );
		}
		else if( flag[2] == 'D' )
		{
			stat[0] = '2';
			strcpy( errRes, "未签约" );
		}
		else if( flag[2] == 'E' )
		{
			stat[0] = '2';
			strcpy( errRes, "交易账号不存在(或证件号码不符)" );
		}
		else if( flag[2] == 'F' )
		{
			stat[0] = '2';
			strcpy( errRes, "明细总金额不等于入账总金额" );
		}
		else if( flag[2] == 'H' )
		{
			stat[0] = '2';
			strcpy( errRes, "G/L账户不存在" );
		}
		else if( flag[2] == 'I' )
		{
			stat[0] = '2';
			strcpy( errRes, "客户名称检查失败" );
		}
		else if( flag[2] == 'J' )
		{
			stat[0] = '2';
			strcpy( errRes, "账户已销户" );
		}
		else if( flag[2] == 'K' )
		{
			stat[0] = '2';
			strcpy( errRes, "手续费率/金额有误" );
		}
		else if( flag[2] == 'L' )
		{
			stat[0] = '2';
			strcpy( errRes, "其它原因" );
		}
		else if( flag[2] == 'N' )
		{
			stat[0] = '2';
			strcpy( errRes, "可用余额不足" );
		}
		else
		{
			stat[0] = '2';
			strcpy( errRes, "未知错误" );
		}

		if( strlen( dtl_msg ) != 0 )
		{
			memset( errRes, 0x00, sizeof( errRes ) );
			strcpy( errRes, dtl_msg );
		}
		/**
		fprintf( fp, "%d|%c|%s|\n", ag_tx_seqno, stat[0], errRes );
		**/
		rtrim( remake2 );
		rtrim( errRes );
		fprintf( fp, "%s|%c|%s|\n", remake2, stat[0], errRes );
		cnt ++;
	}
	EXEC SQL CLOSE agt_dtl_cur;
	EXEC SQL FREE agt_dtl_cur;
	EXEC SQL FREE agt_dtl_sql;
	fclose( fp );

	/***文件格式转换***/
	memset( cfgfile, 0x00, sizeof( cfgfile ) );
	sprintf( cfgfile, "%s/etc/%s", getenv( "HOME" ), "xml700.cfg" );
	WriteLog( APP_LVL, "cfgfile[%s]\n", cfgfile );

	memset( xmloutput, 0x00, sizeof( xmloutput ) );
	sprintf( xmloutput, "%s/print/NETBANK/TOPB/CBS0000461%s%s.xml", getenv( "HOME" ), work_date, btchNb );
	WriteLog( APP_LVL, "xmloutput[%s]\n", xmloutput );
	
	memset( cmd, 0x00, sizeof( cmd ) );
	sprintf( cmd, "XmlExchTxt 2 %s CBS0000461 %s %s UTF-8 1>null 2>&1", cfgfile,xmloutput, filename );
	WriteLog( APP_LVL, "cmd[%s]\n", cmd );
	ret = system( cmd );
	if( ret )
	{
		WriteLog( ERR_LVL, "txt文件转换出错!" );
		strcpy( err_code, "99999" );
        errcode = 99999;
		sprintf( err_msg, "txt文件转换出错!" );
 		PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode, 0 );
		PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
        return ( -1 );
	}

	memset( ftpfilename, 0x00, sizeof( ftpfilename ) );
	sprintf( ftpfilename, "CBS0000461%s%s.xml", work_date, btchNb );
	WriteLog( APP_LVL, "ftpfilename[%s]\n", ftpfilename );

	/***发送文件***/
	ret = FtpFileName( "7000000001", 1, ftpfilename, ftpfilename, ftpfilename );
	if( ret )
	{
		WriteLog( ERR_LVL, "Ftp文件[%s]失败!\n", txtfile );
		strcpy( err_code, "99999" );
		errcode = 99999;
		strcpy( err_msg, "Ftp文件[%s]失败!", txtfile );
 		PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode, 0 );
		PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
		return (-1);
	}

	WriteLog( APP_LVL, "over!\n" );
	PutPoolDataByName( "BUSIIB", "transfilename", 0, 0, ftpfilename, 0 );
	return ( 0 );
}
