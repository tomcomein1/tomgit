#include <stdio.h>
#include <stdlib.h>
#include <sys/types.h>
#include <errno.h>
#include <string.h>
#include <unistd.h>
#include <time.h>
#include <dlfcn.h>

#include "pbconstval.h"
#include "pbstructdef.h"
#ifdef ORACLE_DATABASE
EXEC SQL include "pbranchdb.h";
#else
#include "pbranchdb.h"
#endif
#include "pbappdb.h"
#include "pberrlog.h"
#include "pbglbvardef.h"
#include "pbbasefunc.h"
#include "pbvarmacro.h"
EXEC SQL include "PAGT.h";

#include "pbdb.h"
#include "fml32.h"
#include "atmi.h"
#include "pbsrv.h"
#define     TRAN_CODE           "633001"
#define     BUFFER_SIZE         1024

/*TIPS银行端缴税申报缴款网银前处理*/
long
sky_wyaccprocfront()
{
	EXEC SQL BEGIN DECLARE SECTION;
	char inst_no[5];
	char acc[25];
	double tranamt=0,tranfee=0;
	char pb_date[10+1];
	char pb_seqno[10+1];
	char midTransNb[8];/**add by wangou20130106 */
	EXEC SQL END DECLARE SECTION;
	char hostseqno[11];
	char code[256];
	long errcode;
	char err_msg[128];
	char paynb[128];
	char payseqno[256];
	char cstm_name[128+1];
	long ret;
	char amt[20],fee[20];
	

	memset(inst_no,0x00,sizeof(inst_no));
	memset(hostseqno,0x00,sizeof(hostseqno));
	memset(code,0x00,sizeof(code));
	memset(err_msg,0x00,sizeof(err_msg));
	memset(paynb,0x00,sizeof(paynb));
	memset(payseqno,0x00,sizeof(payseqno));
	memset(acc,0x00,sizeof(acc));
	memset(cstm_name,0x00,sizeof(cstm_name));
	memset(amt,0x00,sizeof(amt));
	memset(fee,0x00,sizeof(fee));
	memset(midTransNb,0x00,sizeof(midTransNb));/**add by wangou20130106 */
	memset(pb_date,0x00,sizeof(pb_date));/**add by wangou20130106 */
	memset(pb_seqno,0x00,sizeof(pb_seqno));/**add by wangou20130106 */

	/* 柜员号  */
	PutPoolDataByName("APSYS","BusiType1",0,0,"700",0);	
	PutPoolDataByName("PAGTBUF","tlr_no",0,0,"888888",0);	
	/* 流水号 */
	GetPoolDataByName( "BUSIIB", "hostSeqNb", 0, 0, hostseqno, 0);
	rtrim(hostseqno);
	PutPoolDataByName( "APSYS", "RltSysSeqNum", 0, 0, hostseqno, 0);
	/* 征收机关代码 */
	GetPoolDataByName( "BUSIIB", "backup1", 0, 0, code, 0);
	/** 平台交易码**/
	GetPoolDataByName( "BUSIIB", "midTransNb", 0, 0, midTransNb, 0);
	rtrim(midTransNb);
	rtrim(code);
	if ( (strncmp(midTransNb,"100091",6)==0 
		||strncmp(midTransNb,"100092",6)==0)
		&&strlen(code ) == 0 )
	{
        WriteLog( ERR_LVL, "征收机关代码为空" );
        errcode = 99999;
        strcpy( err_msg, "征收机关代码为空" );
        PutPoolDataByName("ABSHEAD","app_err_no",0,0,(char *)&errcode,0);
        PutPoolDataByName("ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
        return ( -1 );
	}
	PutPoolDataByName( "PAGTBUF", "unit_no", 0, 0, code, 0);
	/* 纳税人编码   */
	GetPoolDataByName( "BUSIIB", "payNb", 0, 0, paynb, 0);
	rtrim(paynb);
	if ( (strncmp(midTransNb,"100091",6)==0
		||strncmp(midTransNb,"100092",6)==0)
		&&strlen(code ) == 0 )

	{
		
		WriteLog( ERR_LVL,"纳税人编号为空 ?");
        errcode = 99999;
		strcpy( err_msg,"纳税人编号为空 ?");
        PutPoolDataByName("ABSHEAD","app_err_no",0,0,(char *)&errcode,0);
        PutPoolDataByName("ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
	}
	PutPoolDataByName( "PAGTBUF", "s_unit_no", 0, 0, paynb, 0);
	/* 外部申报电子序号 */
	GetPoolDataByName( "BUSIIB", "backup2", 0, 0, payseqno, 0);
	rtrim(payseqno);
	PutPoolDataByName( "PAGTBUF", "prsn_no", 0, 0, payseqno, 0);
	/* 现转标志 */
	PutPoolDataByName( "APSYS", "TxfFlg", 0, 0, "2", 0);
	/* 交易金额 */
	GetPoolDataByName( "BUSIIB", "payAmt", 0, 0,amt, 0);
	rtrim(amt);
	tranamt=atof(amt);
	GetPoolDataByName( "BUSIIB", "fee", 0, 0,fee, 0);
	rtrim(fee);
	tranfee=atof(fee);
	PutPoolDataByName( "APSYS", "TranAmt", 0, 0, amt, 0);
	/* 付款账号 */
	GetPoolDataByName( "BUSIIB", "cardAcctNb", 0, 0,acc, 0);
	rtrim(acc);
	PutPoolDataByName( "PAGTBUF", "accno", 0, 0, acc, 0);
	PutPoolDataByName("PAGTBUF","pagt_inst_no",0,0,"9996",0);	

	if ( strlen(acc) == 0 ||
		!(strncmp(midTransNb,"100091",6)==0
		||strncmp(midTransNb,"100092",6)==0)
	)
    {
        WriteLog( ERR_LVL, "账号为空，程序退出且为成功！" );
        return ( 0 );
    }
	/*查询可用*/
    ret = AccQryPub5711( acc );
    if( ret )
    {
        WriteLog( ERR_LVL, "调用5711查询转出账号[%s]信息失败", acc );
        errno = 200090;
        strcpy( err_msg, "与核心通讯失败" );
        PutPoolDataByName("ABSHEAD","app_err_no",0,0,(char *)&errcode,0);
        PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
        return ( -1 );
    }
	GetPoolDataByName ( "CBS", "CustName", 0, 0,cstm_name, 0);
	rtrim(cstm_name);
	PutPoolDataByName( "PAGTBUF","cstm_name",0,0,cstm_name, 0);
	/* 机构号 */
	GetPoolDataByName( "CBS", "OpenInstNo", 0, 0, inst_no, 0 );
	rtrim(inst_no);
	PutPoolDataByName("PAGTBUF","pagt_inst_no",0,0,inst_no,0);	
	 /*取核心日期*/
    PayGetCoreDate( pb_date);
    /*取交易流水*/
    memset( pb_seqno, 0x00, sizeof(pb_seqno) );
    GetPoolDataByName( "PBSYS", "SrcJourNo", 0, 0, pb_seqno, 0 );
	/*登记机构及金额信息*/
    EXEC SQL UPDATE t_pb_net_dtl
        SET payinstno = :inst_no,
            accinstno = :inst_no,
			payacc=:acc,
			midtrancode = :midTransNb,
            fee = :tranfee,
            transamt = :tranamt
        WHERE trandate = :pb_date
        AND seqno = :pb_seqno;
    if( sqlca.sqlcode || sqlca.sqlerrd[2] != 1)
    {
        WriteLog( ERR_LVL, "update net_dtl err[%d][%d]", sqlca.sqlcode, sqlca.sqlerrd[2]);
        WriteLog( ERR_LVL, "pb_date[%s]pb_seqno[%s]", pb_date, pb_seqno);
		strcpy(err_msg,"系统忙，请稍后重试，或联系客服处理");
        errno = 99999;
        PutPoolDataByName("ABSHEAD","app_err_no",0,0,(char *)&errcode,0);
        PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
        return ( -1 );
    }
    return 0;
}
long
sky_wyqryback()
{
	char msgvalue[128];		
        char name1[100];
	char aval_bal[16];
	char msgvalue1[400];
        char name[128+1];
        char code[10];
        char errcode[10];
        char num[4];
        char serno[30];
        int i;
        int j;
		long errno;

        memset(name,0x00,sizeof(name));
        memset(name,0x00,sizeof(name));
        memset(aval_bal,0x00,sizeof(aval_bal));
        memset(code,0x00,sizeof(code));
        memset(errcode,0x00,sizeof(errcode));
        memset(num,0x00,sizeof(num));
        memset(msgvalue,0x00,sizeof(msgvalue));
        memset(serno,0x00,sizeof(serno));

        GetPoolDataByName( "APSYS", "TranStat", 0, 0,code, 0);
        rtrim(code);
        PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0,code, 0 );

		GetPoolDataByName( "APSYS", "InstRspCode", 0, 0, errcode, 0 );
        rtrim(errcode);
		if ( strlen(errcode ) == 0 )
		{
			strcpy(errcode,"200080");
        	rtrim(errcode);
			memset(code,0x00,sizeof(code));
			strcpy(code,"-1");
        	PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0,code, 0 );
		}
		errno = atol(errcode)/10;
        PutPoolDataByName("ABSHEAD","app_err_no",0,0,(char *)&errno,0);

		memset(aval_bal,0x00,sizeof(aval_bal));
        GetPoolDataByName( "APSYS", "TranAmt", 0, 0,aval_bal, 0);
        rtrim(aval_bal);
        if ( strlen(aval_bal) == 0 )
            strcpy(aval_bal,"0.00");
        PutPoolDataByName( "BUSIIB", "payAmt", 0, 0,aval_bal, 0 );

        GetPoolDataByName( "PAGTBUF", "prsn_no", 0, 0,serno, 0);
        rtrim(serno);
        PutPoolDataByName( "BUSIIB", "backup4", 0, 0,serno, 0 );

        GetPoolDataByName( "PAGTBUF", "num", 0, 0,num, 0);
        rtrim(num);
        i = atoi(num);
        msgvalue[0]='=';
		memset(msgvalue1,0x00,sizeof(msgvalue1));
        for(j = 0 ; j < i ;j++ )
        {
            memset(name,0x00,sizeof(name));
            GetPoolDataByName( "RCBIB", "custNm", 0, j,name, 0);
            memset(aval_bal,0x00,sizeof(aval_bal));
            GetPoolDataByName( "RCBIB", "avlBal", 0, j,aval_bal, 0);
            memset(name1,0x00,sizeof(name1));
            sprintf(name1,"%s#%s=",name,aval_bal);
			rtrim(name1);
			if ( strlen(msgvalue) + strlen(name1) < 126 )
            	strcat(msgvalue,name1);
			else
			{
				if ( strlen(msgvalue1) + strlen(name) < 386 )
					strcat(msgvalue1,name1);
			    else
					break;
			}

        }
		rtrim(msgvalue);
		rtrim(msgvalue1);
		if ( strlen(msgvalue) == 0 )
		{
			strcpy(msgvalue,"=查询不存在=");
		}
        WriteLog(ERR_LVL,"msgvalue=[%s][%s]",msgvalue,msgvalue1);
        PutPoolDataByName( "BUSIIB", "backup5", 0, 0,msgvalue, 0 );
        PutPoolDataByName("BUSIIB","transfilename", 0, 0,msgvalue1, 0 );
        return 0;
}
long
sky_wyaccprocback()
{
	char acc[25];		
	char aval_bal[15];
	char bal[15];
	char err_msg[60];
	long ret;
	char errcode[10];
	long errno;
	char code[10];
	double b_bal=0.00;

	memset(acc,0x00,sizeof(acc));
	memset(aval_bal,0x00,sizeof(aval_bal));
	memset(bal,0x00,sizeof(bal));
	memset(err_msg,0x00,sizeof(err_msg));
	memset(code,0x00,sizeof(code));
	memset(errcode,0x00,sizeof(errcode));

	GetPoolDataByName( "PAGTBUF", "accno", 0, 0, acc, 0);
	rtrim(acc);
	/*查询可用? */
	ret = AccQryPub5711( acc );
    if( ret )
    {
        WriteLog( ERR_LVL, "调用5711查询转出账号[%s]信息失败", acc );
		errno = 200090;
        PutPoolDataByName("ABSHEAD","app_err_no",0,0,(char *)&errcode,0);
        PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
        return ( -1 );
    }
	/* 可用余额 */
	GetPoolDataByName ( "CBS", "TxFlag", 0, 0,aval_bal, 0);
	b_bal = atof(aval_bal)/100.00;
	memset(aval_bal,0x00,sizeof(aval_bal));
	sprintf(aval_bal,"%.2f",b_bal);
	PutPoolDataByName( "BUSIIB", "avlBal", 0, 0, aval_bal, 0);

	GetPoolDataByName ( "CBS", "TranBranch", 0, 0,bal, 0);
	b_bal = atof(bal)/100.00;
	memset(bal,0x00,sizeof(bal));
	sprintf(bal,"%.2f",b_bal);
	PutPoolDataByName( "BUSIIB", "bal", 0, 0,bal, 0);

	GetPoolDataByName( "APSYS", "TranStat", 0, 0,code, 0);
	rtrim(code);
	PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, code, 0 );

	if ( code[0] == '0')
	{
		memset(bal,0x00,sizeof(bal));
		PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0,"0", 0 );
		GetPoolDataByName( "BUSIIB", "payAmt", 0, 0, bal, 0);
		PutPoolDataByName( "BUSIIB", "realFee", 0, 0, bal, 0);
	}
	else
	{
		memset(bal,0x00,sizeof(bal));
		memset(errcode,0x00,sizeof(errcode));

		strcpy(bal,"0.00");
		rtrim(bal);
		PutPoolDataByName( "BUSIIB", "realFee",0,0,bal,0);

		GetPoolDataByName( "APSYS", "InstRspCode", 0, 0, errcode, 0 );
        rtrim(errcode);
		if ( strlen(errcode) == 0 )
		{
			strcpy(errcode,"200090");
			rtrim(errcode);
		}
		errno = atol(errcode)/10;
		if( strncmp(errcode , "20004",5) == 0 )
		{
			errno = 99999;
			strcpy( err_msg,"取银行节点代码出错");
			PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
		}

        PutPoolDataByName("ABSHEAD","app_err_no",0,0,(char *)&errno,0);
		PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0,"-1", 0 );
	}
	memset(bal,0x00,sizeof(bal));
	strcpy(bal,"0.00");
	PutPoolDataByName( "BUSIIB", "realManFee", 0, 0, bal, 0);

    return 0;
}


/********************************************
 * Function    : Comm_PBSyncCall()
 * Description : PB平台TUXEDO服务同步调用
 * Input       : 请求渠道|请求交易码
 * Output      : 无
 * Return      : 0  -- 成功
 *               -1 -- 失败
 * -------------------------------------
 * Create         Date        Action
 * luojy        2012/09/13    Created.
**********************************************/
int Comm_PBSyncCall( char *para)
{
	EXEC SQL BEGIN DECLARE SECTION;
		char    trannb[20];
		char    chno[20];
		char    tranno[20];
		char    tran_code[40];
		struct s_pb_multchnl_tranmap t_tranmap;
	EXEC SQL END DECLARE SECTION;
	FRONT_BUFF   fbuf;  
	ATOM_PARA  Para;
	int      ret = 0;
	char    tran_no[20];
    char        *sendbuf, *recvbuf;
	char 	inst_no[10];
	char    node_no[20];
	char    content[60];
	char    sername[20];
	char    tranname[20];
    char        *bos, *eos;
    long        ilen, olen, field_len;	
         char TraceCode_bb[100];
         char MsgFlag_bb[10];
         int     datasize_bb = 0;

	WriteLog(ERR_LVL, "处理开始................\n "  );

	memset(&fbuf, 0x00, sizeof(FRONT_BUFF));
	memset(inst_no,0x00,sizeof(inst_no));
	memset(content,0x00,sizeof(content));
	memset(trannb,0x00,sizeof(trannb));
	memset(sername,0x00,sizeof(sername));
	memset(tranname,0x00,sizeof(tranname));
	memset(chno,0x00,sizeof(chno));
	memset(node_no,0x00,sizeof(node_no));
	memset(tran_no,0x00,sizeof(tran_no));
	memset(tranno,0x00,sizeof(tranno));
	memset(&t_tranmap,0x00,sizeof(t_tranmap));
	memset(tran_code,0x00,sizeof(tran_code));
	memset( &Para, 0, sizeof(Para));
        memset( TraceCode_bb, 0x00, sizeof( TraceCode_bb));
        memset( MsgFlag_bb, 0x00, sizeof( MsgFlag_bb));

	rtrim(para);
    ParseAtomPara( &Para, para);

    /*fengjx 备份原跟踪码 20150306*/
    MsgFlagHandleNew( "700" , 'G' , MsgFlag_bb  ) ;
    rtrim( FrontBuff.TraceCode );
    strcpy( TraceCode_bb, FrontBuff.TraceCode);
    datasize_bb = cstmlen2size ( FrontBuff.TraceCode , 4 ) ;
    WriteLog(DEBUG_LVL,"渠道跟踪号1:[%s][%d]code[%s]flag[%s]",FrontBuff.ChnlNo,datasize_bb,TraceCode_bb, MsgFlag_bb);


    if( Para.ParaNum != 4 )
	{
	    WriteLog(ERR_LVL,"参数个数错误FAIL[%d]",Para.ParaNum);
		return -1;
	}

	/* 判断参数个数 */
    if( Para.ParaNum == 4)
    {
		/* 第三个参数为数据字典 */
		rtrim(Para.Para[2]);
		/* 第四个参数为数据字典中的字段*/
		rtrim(Para.Para[3]);
        GetPoolDataByName(Para.Para[2], Para.Para[3],0,0,tranno,0);
        strcpy(tran_code,Para.Para[1] );
		rtrim(tranno);
		rtrim(tran_code);
                /*
		sprintf(tran_code,"%s_%s",Para.Para[1],rtrim(tranno));
		*/
	}
	strcpy(chno,Para.Para[0]);
	rtrim(chno);


    WriteLog(ERR_LVL,"chnl_no=[%s][%s][%s]",chno,tran_code,tranno);
	/* 获取渠道号 */
    EXEC SQL SELECT * INTO :t_tranmap
        FROM t_pb_multchnl_tranmap
    WHERE chnlno = :chno 
      AND trancode = :tran_code
      AND midtransnb = :tranno;
    if( sqlca.sqlcode != 0 )
    {
	    WriteLog(ERR_LVL,"查询PB多渠道交易影射表FAIL[%d]",sqlca.sqlcode);
        return ( -1 );
    }

	/* 渠道号 发起渠道? */
	WriteLog(ERR_LVL,"svrname=[%s][%s][%s]",t_tranmap.fnodeno,t_tranmap.ftrancode,t_tranmap.fsvrname);
        /* 打包格式号.解包格式号*/
	WriteLog(ERR_LVL,"svrname=[%s][%s]",t_tranmap.packfmtno,t_tranmap.unpackfmtno);
        rtrim(t_tranmap.packfmtno);
        rtrim(t_tranmap.unpackfmtno);
        /* 根据格式号打包 */
        ret = Data_LoanXMLPack(t_tranmap.packfmtno);
        if( ret )
        {
	    WriteLog(ERR_LVL,"打包失败");
            return ( -1 );
        }

	rtrim(t_tranmap.fchnlno);
	strncpy((char *)fbuf.ChnlNo,t_tranmap.fchnlno,sizeof(fbuf.ChnlNo)-1);
	rtrim(t_tranmap.fnodeno);
	strncpy((char *)fbuf.NodeNo,t_tranmap.fnodeno,sizeof(fbuf.NodeNo)-1);
	rtrim(t_tranmap.ftrancode);
	strncpy((char *)fbuf.FTranCode,t_tranmap.ftrancode,sizeof(fbuf.FTranCode) - 1);
 
	memcpy(fbuf.DataBuff,PkgBuff.DataBuff,PkgBuff.DataLen);
    ilen = strlen((char *)(&fbuf.DataBuff));
    size2cstmlen(fbuf.PkgLen, ilen, 2);
    ilen += sizeof(FRONT_BUFF) - PBFDATA_LEN;	
	/* 分配上送和接收缓存 */
    if ((sendbuf = tpalloc("CARRAY",NULL,sizeof(FRONT_BUFF))) == NULL)
	{
        WriteLog(ERR_LVL,"AGTSB001: 初始化传输BUFFER 失败" "DESC:ErrMsg[%s]" "ACTION:", tpstrerror(tperrno));
        return (-1);
    }
    if ((recvbuf = tpalloc("CARRAY", NULL, BUFFER_SIZE)) == NULL) 
	{
        WriteLog(ERR_LVL,"AGTSB001: 初始化接收BUFFER失败""DESC:ErrMsg [%s]" "ACTION:", tpstrerror(tperrno));
        tpfree(sendbuf);
        return (-1);
    }	
	/* 给上送缓存付值 */
    memset(sendbuf, 0x00, sizeof(FRONT_BUFF));
    memcpy(sendbuf, &fbuf, ilen);
	Pr_FrontBuff( DATALOG_LVL , &fbuf ,  "TPCALL PbMain315" ) ;
	rtrim(t_tranmap.fsvrname); 
	ret = tpcall(t_tranmap.fsvrname, sendbuf, ilen, &recvbuf, &olen, 0);

       /*fjx 新一代还原跟踪码 20150306*/
    memset (FrontBuff.TraceCode, 0x00, sizeof(FrontBuff.TraceCode));
    MsgFlagHandleNew("700", 'S', MsgFlag_bb);
    strcpy( FrontBuff.TraceCode, TraceCode_bb);
    datasize_bb = cstmlen2size ( FrontBuff.TraceCode , 4 ) ;
    WriteLog(DEBUG_LVL,"渠道跟踪号3:[%s][%d]code[%s]flag[%s]",FrontBuff.ChnlNo,datasize_bb,TraceCode_bb, MsgFlag_bb); 

    if (ret < 0) {
        WriteLog(ERR_LVL, "AGTSB001: ERR: TPCall 失败" "DESC:ErrMsg [%s]"
                          "ACTION: 请检查Tuxedo配置;主控服务是否启动",
                          tpstrerror(tperrno));
        tpfree(sendbuf);
        tpfree(recvbuf);
        return (-1);
    }
	memset(PkgBuff.DataBuff,0x00,sizeof(PBFDATA_LEN));
	memcpy(PkgBuff.DataBuff,recvbuf,olen);
	PkgBuff.DataLen = olen;
    WriteLog(ERR_LVL, "AGTSB001: 返回报文=[%s]", recvbuf);

    ret = Data_LoanXMLUnpack(t_tranmap.unpackfmtno);
    if( ret )
    {
        WriteLog(ERR_LVL,"解包失败");
		tpfree( (char *)sendbuf );
		tpfree( (char *)recvbuf );
        return ( -1 );
    }
	tpfree( (char *)sendbuf );
	tpfree( (char *)recvbuf );
	return 0;
}

/*  查询缴费结果   */
int
wy_qrydtl()
{
    EXEC SQL BEGIN DECLARE SECTION; 
        struct qry_dtl{
            char paynum[32];
            char custnm[128+1];
            char trandate[128+1];
            double payamt;
            char btchstat[2];
            char acct[32];
            char paycustnm[128+1];
            char transchnl[32];
            char backup1[128+1];
            char backup2[128+1];
        }sky_dtl;

        char paynb[32];
        char bgndt[20];
        char enddt[20];
        long bgnno;
        long qnt;
        long errcode;
        char memo[128];
        char err_msg[256+1];
		long total_num;

    EXEC SQL END DECLARE SECTION;

    long l_bgn_date = 0;
    long l_end_date = 0;
    long cur_no = 1;
    long cur_num = 0;
    int i = 0;
    char bgn_no[33];
    char t_qnt[33];
    char chnl_no[5];
    char amt[20];
    char stat[2];

    memset(paynb  , 0x00,  sizeof(paynb));
    memset(bgndt  , 0x00,  sizeof(bgndt));
    memset(enddt  , 0x00,  sizeof(enddt));
    memset(memo   , 0x00,  sizeof(memo));
    memset(bgn_no , 0x00,  sizeof(bgn_no));
    memset(t_qnt  , 0x00,  sizeof(t_qnt));

    GetPoolDataByName( "BUSIIB", "payNb"          , 0, 0, paynb  , 0);
    GetPoolDataByName( "BUSIIB", "bgnDt"          , 0, 0, bgndt  , 0);
    GetPoolDataByName( "BUSIIB", "endDt"          , 0, 0, enddt  , 0);
    GetPoolDataByName( "BUSIIB", "turnPageBgnPos" , 0, 0, bgn_no , 0);
    GetPoolDataByName( "BUSIIB", "turnPageShowQnt", 0, 0, t_qnt   , 0);
    GetPoolDataByName( "BUSIIB", "memo"           , 0, 0, memo   , 0);

    rtrim(paynb);
    rtrim(bgndt);
    rtrim(enddt);
    rtrim(memo);
    if ( strlen(paynb ) == 0 )
    {
        WriteLog( ERR_LVL, "缴费编号为空FAIL" );
        errcode = 63001;
        PutPoolDataByName( "ABSHEAD", "app_err_no",0,0,(char *)&errcode,0);
        PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0,"-1", 0 );
        return ( -1 );
    }
    if ( strlen(bgndt ) == 0 || strlen(enddt) == 0 )
    {   
        WriteLog( ERR_LVL, "日期为空FAIL" );
        errcode = 63002;
        PutPoolDataByName( "ABSHEAD", "app_err_no",0,0,(char *)&errcode,0);
        PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0,"-1", 0 );
        return ( -1 );
    }
    if ( strlen(bgndt ) == 8 && strlen(enddt ) == 8 )
    {
        l_bgn_date = atol( bgndt);
        l_end_date = atol( enddt);
        if ( l_end_date < l_bgn_date) 
        {
            WriteLog( ERR_LVL, "结束日期小于起始日期FAIL" );
            errcode = 63003;
            PutPoolDataByName( "ABSHEAD", "app_err_no",0,0,(char *)&errcode,0);
            PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0,"-1", 0 );
            return ( -1 ); 
        }
    }
    else
    {
       WriteLog( ERR_LVL, "日期长度非法FAIL" );
       errcode = 63004;
       PutPoolDataByName( "ABSHEAD", "app_err_no",0,0,(char *)&errcode,0);
       PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0,"-1", 0 );
       return ( -1 ); 
    }
    bgnno = atol(bgn_no);
    if ( bgnno < 0 )
    {   
       WriteLog( ERR_LVL, "起始号错误FAIL" );
       errcode = 63005;
       PutPoolDataByName( "ABSHEAD", "app_err_no",0,0,(char *)&errcode,0);
       PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0,"-1", 0 );
       return ( -1 ); 
    }
    qnt = atol(t_qnt);
    if ( qnt < 0 )
    {   
       WriteLog( ERR_LVL, "查询笔数非法FAIL" );
       errcode = 63006;
       PutPoolDataByName( "ABSHEAD", "app_err_no",0,0,(char *)&errcode,0);
       PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0,"-1", 0 );
       return ( -1 ); 
    }
    if (qnt == 0 || qnt > 29 )
    {
        qnt = 29;
    }
	/* 计算返回总笔数 */
	EXEC SQL SELECT count(*) INTO :total_num
	 FROM T_SKY_DTL
    WHERE TaxPayCode =  :paynb
       AND TRAN_DATE >= :bgndt
       AND TRAN_DATE <= :enddt;
	if ( SQLCODE )	
	{
        if ( SQLCODE == 100 )
        {
           WriteLog( ERR_LVL, "无缴费信息FAIL" );
           errcode = 34005;
           PutPoolDataByName( "ABSHEAD", "app_err_no",0,0,(char *)&errcode,0);
           PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0,"-1", 0 );
           return ( -1 ); 
        }
        else
        {
           WriteLog( ERR_LVL, "查询表失败FAIL" );
           errcode = 90001;
           PutPoolDataByName( "ABSHEAD", "app_err_no",0,0,(char *)&errcode,0);
           PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0,"-1", 0 );
           return -1;
        }
	}
	if ( total_num == 0 )
	{
           WriteLog( ERR_LVL, "无缴费信息FAIL" );
           errcode = 34005;
           PutPoolDataByName( "ABSHEAD", "app_err_no",0,0,(char *)&errcode,0);
           PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0,"-1", 0 );
    	   PutPoolDataByName( "BUSIIB", "turnPageTotalQnt", 0, 0,"0",0);
    	   PutPoolDataByName( "BUSIIB", "v", 0, 0, "0", 0);
           return ( -1 ); 
	}

    EXEC SQL DECLARE sky_dtl_cur CURSOR for
    SELECT TaxPayCode,TaxPayName,Tran_Date,TraAmt,
           ProcFlag  ,PayAcct   ,HandOrgName,Chnlno,
           TaxOrgCode,PayeeName 
      FROM T_SKY_DTL
     WHERE TaxPayCode = : paynb
       AND TRAN_DATE >= :bgndt
       AND TRAN_DATE <= :enddt
	   ORDER BY Tran_Date;
    if ( SQLCODE )
    {
        if ( SQLCODE == 100 )
        {
           WriteLog( ERR_LVL, "无缴费信息FAIL" );
           errcode = 34005;
           PutPoolDataByName( "ABSHEAD", "app_err_no",0,0,(char *)&errcode,0);
           PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0,"-1", 0 );
           return ( -1 ); 
        }
        else
        {
           WriteLog( ERR_LVL, "查询表失败FAIL" );
           errcode = 90001;
           PutPoolDataByName( "ABSHEAD", "app_err_no",0,0,(char *)&errcode,0);
           PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0,"-1", 0 );
           return -1;
        }
    }
    EXEC SQL OPEN sky_dtl_cur;
    if ( SQLCODE )
    {
       WriteLog( ERR_LVL, "打开游标失败FAIL[%s]",SQLCODE );
       errcode = 90001;
       PutPoolDataByName( "ABSHEAD", "app_err_no",0,0,(char *)&errcode,0);
       PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0,"-1", 0 );
       return -1;
    }
    while(1)
    {
        memset(&sky_dtl,0x00,sizeof(sky_dtl));
        EXEC SQL FETCH sky_dtl_cur INTO :sky_dtl;
        if ( SQLCODE == 100 )
        {
            WriteLog( ERR_LVL, "Fetch Over!" );
            EXEC SQL CLOSE sky_dtl_cur;
            EXEC SQL FREE sky_dtl_cur;
            break;
        }
        else if (sqlca.sqlcode < 0)
        {
            WriteLog( ERR_LVL, "获取数据失败FAIL[%s]",SQLCODE );
            errcode = 90001;
            PutPoolDataByName( "ABSHEAD", "app_err_no",0,0,(char *)&errcode,0);
            PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0,"-1", 0 );
            EXEC SQL CLOSE sky_dtl_cur;
            EXEC SQL FREE sky_dtl_cur;
            return (-1);
        }
        if ( cur_no < bgnno )
        {
            cur_no += 1;
            continue;
        }
        if ( cur_num >= qnt )
        {
            EXEC SQL CLOSE sky_dtl_cur;
            EXEC SQL FREE sky_dtl_cur;
            break;
        }
        /* 放入缓冲池 */
        memset(amt ,0x00 ,sizeof(amt));
        memset(stat,0x00 ,sizeof(stat));
        memset(chnl_no,0x00,sizeof(chnl_no));

        rtrim(sky_dtl.paynum);
        rtrim(sky_dtl.custnm);
        rtrim(sky_dtl.trandate);
        sprintf(amt,"%.2f",sky_dtl.payamt);
        rtrim(amt);
        rtrim(sky_dtl.btchstat ); 
        if ( sky_dtl.btchstat[0] == '1' ) 
            stat[0] = '0';
        else
            stat[0] = '1';
        rtrim(stat);
        rtrim(sky_dtl.acct);
        if ( strlen(sky_dtl.acct) == 0 )
            strcpy(sky_dtl.acct,"现金缴费");
        rtrim(sky_dtl.paycustnm);
        rtrim(sky_dtl.backup1);
        rtrim(sky_dtl.backup2);
        rtrim(sky_dtl.transchnl);
        if ( strcmp(sky_dtl.transchnl,"001" ) == 0 )
            strcpy(chnl_no,"01");
        if ( strcmp(sky_dtl.transchnl,"700" ) == 0 )
            strcpy(chnl_no,"02");
        if ( strcmp(sky_dtl.transchnl,"122" ) == 0 )
            strcpy(chnl_no,"06");
        if ( strcmp(sky_dtl.transchnl,"120" ) == 0 )
            strcpy(chnl_no,"03");
        rtrim(chnl_no);
		WriteLog(ERR_LVL,"i=[%d]",i);
		if ( i == 0 )
		{
        	PutPoolDataByName("BUSIIB","payNb",0,0,sky_dtl.paynum, 0);
        	PutPoolDataByName("BUSIIB","custNm",0,0, sky_dtl.custnm,0);
		}
        PutPoolDataByName( "BUSIIB", "tranDate",i,0,sky_dtl.trandate,0);
        PutPoolDataByName( "BUSIIB", "payAmt", i, 0, amt, 0);
        PutPoolDataByName( "BUSIIB", "btchStat", i, 0, stat, 0);
        PutPoolDataByName( "BUSIIB", "acct", i, 0, sky_dtl.acct, 0);
        PutPoolDataByName( "BUSIIB","payCustNm",i,0,sky_dtl.paycustnm,0);
        PutPoolDataByName( "BUSIIB", "transChnl", i, 0, chnl_no, 0);
        PutPoolDataByName( "BUSIIB", "backup1", i, 0, sky_dtl.backup1,0);
        PutPoolDataByName( "BUSIIB", "backup2", i, 0, sky_dtl.backup2,0);
        i++;
        cur_num++;
    }
    memset(amt,0x00,sizeof(amt));
    sprintf(amt,"%ld",cur_num);
    PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0,"0", 0 );
    PutPoolDataByName( "BUSIIB", "v", 0, 0, amt, 0);
	/* 总笔数 */
    memset(amt,0x00,sizeof(amt));
    sprintf(amt,"%ld",total_num);
    PutPoolDataByName( "BUSIIB", "turnPageTotalQnt", 0, 0, amt, 0);
    return 0;
}
int
wy_fputfld( char * para)
{
    long num;
    char name[1024];
	ATOM_PARA Para ;        /*  配置参数    */
    double  amt;
    long errcode;
    EXEC SQL BEGIN DECLARE  SECTION;
      struct fldmap{
    	char d_fld[120];
    	char dict[120];
    	char s_fld[120];
    	}t_fld;

    	char src_dict[60];
    	char dst_dict[60];

    	char src_flag[10];
    	char src_fld[60];

    	char dst_flag[10];
    	char dst_fld[60];

    	char tran_no[60];
    EXEC SQL END DECLARE SECTION;

    memset(tran_no,0x00,sizeof(tran_no));
	memset( &Para, 0x00, sizeof(ATOM_PARA) );
	ParseAtomPara( &Para , para );
    strcpy( tran_no,Para.Para[0]);
    rtrim(tran_no);

    EXEC SQL DECLARE pay_sys_para_cur CURSOR for
    SELECT data_code,data_desc,content FROM t_pay_sys_para
    WHERE inst_no = "WFLD"
      AND flag = :tran_no;
    if ( SQLCODE )
    {
      	WriteLog(ERR_LVL,"FAIL 查询参数配置表错误");
        return -1;
    }
    EXEC SQL OPEN pay_sys_para_cur;
    if( SQLCODE )
    {
        WriteLog( ERR_LVL,"FAIL 打开游标错误" );
        EXEC SQL FREE pay_sys_para_cur;
        return -1;
    }
    while(1 )
    {
     	memset(&t_fld,0x00,sizeof(t_fld));
        EXEC SQL FETCH pay_sys_para_cur INTO :t_fld;
        if( SQLCODE == SQLNOTFOUND )
        {
            WriteLog( ERR_LVL, "Fetch Over!" );
            EXEC SQL CLOSE pay_sys_para_cur;
            EXEC SQL FREE pay_sys_para_cur;
            break;
        }
        else if ( SQLCODE )
        {
            WriteLog( ERR_LVL,"FETCH pay_sys_para_cur Fail[%d]",SQLCODE);
            EXEC SQL CLOSE pay_sys_para_cur;
            EXEC SQL FREE  pay_sys_para_cur;
            return -1;
        }

        rtrim(t_fld.dict);
        rtrim(t_fld.s_fld);
        rtrim(t_fld.d_fld);
    	if ( strchr( t_fld.dict, '|' ) == NULL )
    	{
            WriteLog( ERR_LVL,"Fail!需为 [原字典|目标字典" );
            return -1;
        }
     	if ( strchr( t_fld.s_fld, '|' ) == NULL )
    	{
            WriteLog( ERR_LVL,"Fail!需为 [字段类型|字段名]" );
            return -1;
        }
        if ( strchr( t_fld.d_fld, '|' ) == NULL )
    	{
            WriteLog( ERR_LVL,"Fail!需为 [字段类型|字段名]" );
            return -1;
        }
        memset( src_dict  ,0x00 ,  sizeof(src_dict));
        memset( dst_dict  ,0x00 ,  sizeof(dst_dict));
        memset( src_flag  ,0x00 ,  sizeof(src_flag));
        memset( src_fld   ,0x00 ,  sizeof(src_fld));
        memset( dst_flag  ,0x00 ,  sizeof(dst_flag));
        memset( dst_dict  ,0x00 ,  sizeof(dst_dict));

        /* 数据字典 */
        strncpy( src_dict, t_fld.dict,  ( strchr( t_fld.dict, '|' ) - t_fld.dict ) );
        strcpy( dst_dict, strchr( t_fld.dict, '|' ) + sizeof(char) );
        rtrim(src_dict);
        rtrim(dst_dict);
        /* 原数据类型数据名 */
        strncpy( src_flag, t_fld.s_fld,  ( strchr( t_fld.s_fld, '|' ) -t_fld.s_fld ) );
        strcpy( src_fld, strchr( t_fld.s_fld, '|' ) + sizeof(char) );
        rtrim(src_flag);
        rtrim(src_fld);
        /* 目标数据类型数据名 */
        strncpy( dst_flag, t_fld.d_fld,  ( strchr( t_fld.d_fld, '|' ) - t_fld.d_fld ) );
        strcpy( dst_fld, strchr( t_fld.d_fld, '|' ) + sizeof(char) );
        rtrim(dst_flag);
        rtrim(dst_fld);

        WriteLog(ERR_LVL,"dict=[%s][%s][%s]",t_fld.s_fld,t_fld.d_fld,t_fld.dict);
        if ( src_flag[0] == 'D' )
        {
            GetPoolDataByName(src_dict, src_fld, 0, 0, &amt,0);
            if ( dst_flag[0] == 'D' )
                PutPoolDataByName(dst_dict,dst_fld,0,0,&amt,0);
            else if ( dst_flag[0] == 'C' )
            {
                memset(name,0x00,sizeof(name));
                sprintf(name,"%.2f",amt);
                rtrim(name);
                PutPoolDataByName(dst_dict,dst_fld,0,0,name,0);
            }
            else
            {
                WriteLog(ERR_LVL,"FAIL[%s][%s]",t_fld.s_fld,t_fld.d_fld);
                return -1;
            }
        }
        if ( src_flag[0] == 'L' )
        {
            GetPoolDataByName(src_dict, src_fld, 0, 0, &num,0);
            if ( dst_flag[0] == 'L' )
                PutPoolDataByName(dst_dict,dst_fld,0,0,&num,0);
            else if ( dst_flag[0] == 'C' )
            {
                memset(name,0x00,sizeof(name));
                sprintf(name,"%d",num);
                rtrim(name);
                PutPoolDataByName(dst_dict,dst_fld,0,0,name,0);
            }
            else
            {
                WriteLog(ERR_LVL,"FAIL[%s][%s]",t_fld.s_fld,t_fld.d_fld);
                return -1;
            }
        }
        if ( src_flag[0] == 'C' )
        {
            memset(name,0x00,sizeof(name));
            GetPoolDataByName(src_dict, src_fld, 0, 0, name,0);
            rtrim(name);
            if ( src_flag[1] == '1' )
            {
                if ( strlen(name) == 0 )
                {
                    errcode = 99999;
                    PutPoolDataByName("ABSHEAD","app_err_no",0,0,(char *)&errcode,0);
                    PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0,"字段不能为空", 0 );
                    return -1;
                }
            }
            if ( dst_flag[0] == 'C' )
                PutPoolDataByName(dst_dict,dst_fld,0,0,name,0);
            else if ( dst_flag[0] == 'L' )
                PutPoolDataByName(dst_dict,dst_fld,0,0,atoi(name),0);
            else if ( dst_flag[0] == 'D' )
                PutPoolDataByName(dst_dict,dst_fld,0,0,atof(name),0);
            else
            {
                WriteLog(ERR_LVL,"FAIL[%s][%s]",t_fld.s_fld,t_fld.d_fld);
                return -1;
            }
        }
        if ( src_flag[0] == 'c' )
        {
            memset(name,0x00,sizeof(name));
            strcpy(name,src_fld);
            rtrim(name);
            if ( dst_flag[0] == 'C' )
                PutPoolDataByName(dst_dict,dst_fld,0,0,name,0);
            else if ( dst_flag[0] == 'L' )
                PutPoolDataByName(dst_dict,dst_fld,0,0,atoi(name),0);
            else if ( dst_flag[0] == 'D' )
                PutPoolDataByName(dst_dict,dst_fld,0,0,atof(name),0);
            else
            {
                WriteLog(ERR_LVL,"FAIL[%s][%s]",t_fld.s_fld,t_fld.d_fld);
                return -1;
            }
        }
    }
    return 0;
}
/* 处理函数调用 
*/
int
Fun_Proc(char *chnl,char *jym,int flag)
{
    char    content[ 256 + 1 ];
    char    lib_name[ 128 + 1 ];
    char    lib_path[ 128 + 1 ];
    char    proc_name[ 128 + 1 ];

    void    *handle;
    int     (*func) ();
    int     ret;

    memset( content,   0x00, sizeof( content ) );
    memset( lib_name,  0x00, sizeof( lib_name ) );
    memset( lib_path,  0x00, sizeof( lib_path ) );
    memset( proc_name, 0x00, sizeof( proc_name ) );

    /*  查询处理函数 */
    if (PayGetPreProc(chnl,jym,content,flag) != 0 )
    {
        WriteLog( ERR_LVL,"Fail! 查询处理函数失败" );
        return ( -1 );
    }
    rtrim(content);
    if ( strlen(content ) < 5 )
    {
        WriteLog( ERR_LVL,"不需要进行处理" );
        return 0;
    }

    if ( strchr( content, '|' ) == NULL )
    {
        WriteLog( ERR_LVL,"Fail! 配置参数据有误，毕需为 [库名|函数]" );
        return  -1;
    }
    
    strncpy( lib_name, content,  ( strchr( content, '|' ) - content ) );
    strcpy ( proc_name, strchr( content, '|' ) + sizeof(char) );
    WriteLog(ERR_LVL, "处理函数:lib_name[%s] proc_name[%s]", lib_name,proc_name);

    /* 调用处理函数 */
    sprintf( lib_path, "%s/lib/%s", getenv("HOME"), lib_name );
    if ( (handle = dlopen(lib_path,RTLD_NOW)) == NULL)
    {
        WriteLog(ERR_LVL, "FAIL: Open DLL[%s] Failed", lib_name);
        return -1;
    }
    func =(int (*)())dlsym(handle, proc_name);
    if ( func == NULL)
    {
        WriteLog( ERR_LVL, "FAIL: Find Function[%s] Failed", proc_name );
        dlclose( handle );
        return -1;
    }

    ret = ( *func ) ();
    dlclose( handle );
    return ( ret );
}

/*
** Function       :  PayGetPreProc()
** Description    :  获取前处理函数或后处理函数
** Input          :  chnl1 :  渠道号
                     jym1  :  请求交易码
                     flag  ： 标志
                       0   ： 获取前处理函数
                       1   ： 获取后处理函数
**
** Output         :  preproc  - 函数名
** Return         : <0 失败
**                   0 成功
** Create         ljy 2012.10.11
*/

int
PayGetPreProc( char *chnl1, char *jym1,char *preproc,int flag)
{
    EXEC SQL BEGIN DECLARE SECTION;
        char chnl_no[4];
        char lib_jym[60];
        char prename[60];
        char endname[60];
    EXEC SQL END DECLARE SECTION;

    memset( chnl_no   ,0x00,sizeof(chnl_no));
    memset( lib_jym   ,0x00,sizeof(chnl_no));
    memset( prename   ,0x00,sizeof(prename));
    memset( endname   ,0x00,sizeof(endname));

    strcpy( chnl_no , chnl1);
    strcpy( lib_jym , jym1);
    rtrim(  chnl_no );
    rtrim(  lib_jym );
    
    EXEC SQL SELECT preproc ,postproc 
        INTO :prename,:endname
    FROM t_pb_multchnl_tranmap 
    WHERE CHNLNO    = :chnl_no
      AND TRANCODE  = :lib_jym ;
    if ( sqlca.sqlcode == 100 )
    {
        WriteLog( ERR_LVL, "找不到参数[%s][%s]", chnl_no, lib_jym );
        return( -1);
    } 
    else if ( sqlca.sqlcode )
    {
        WriteLog( ERR_LVL, "查询参数错误[%s][%s]",chnl_no,lib_jym);
        WriteLog( ERR_LVL, "sqlca.sqlcode[%d]", sqlca.sqlcode);
        return( -1);
    }
    if ( flag == 0 )
    {
        rtrim(prename);
        strcpy(preproc,prename);
    }
    if ( flag == 1 )
    {
        rtrim(endname);
        strcpy(preproc,endname);
    } 
    return 0;
}
