/*PB3.0系统自动生成demo源码文件*/

#include <stdio.h>
#include <stdlib.h>
#include <sys/types.h>
#include <time.h>
#include "pbconstval.h" 
#include "pbstructdef.h" 
#ifdef ORACLE_DATABASE
EXEC SQL include "pbranchdb.h";
#else
#include "pbranchdb.h"
#endif
#include "pberrlog.h"
#include "pbglbvardef.h"
#include "pbbasefunc.h"
#include "pbvarmacro.h"
#include "fml32.h"
#include "atmi.h"
#include "pbstructdef.h"

long NetBankRetConv( char *, char *, char *, char * );
char *rdeln(char* str);

int  pbbusi700baseDemo ()
{
	return ( 0 );
}

/*	解包前处理	*/
int  pbbusi700beforetran ()
{
	char tmpbuf[PACKDATA_LEN+1];
	int PkgLen = 0;
	memset( tmpbuf, 0x00, sizeof(tmpbuf) );
	memcpy( tmpbuf, PkgBuff.DataBuff+24, PkgBuff.DataLen - 24 );
	memset( PkgBuff.DataBuff, 0x00, sizeof(PkgBuff.DataBuff) );
	PkgBuff.DataLen -= 24;
	memcpy( PkgBuff.DataBuff, tmpbuf, PkgBuff.DataLen );
	WriteLog( ERR_LVL, "DataBuff[%s][%d]", PkgBuff.DataBuff, PkgBuff.DataLen );

	return ( 0 );
}

/*****************************************
 *    Function    :	pbbusi700afterdeal
 *    DESC        :	通用网银后处理
 *    INPUT       :	返回交易码|返回交易属性|是否账务类交易(0-否 1-是)
				例:	CBS0000010|111|1|111|
					交易属性：
						第一位:1-实时 2-批量
						第二位:1-发送 2-接收
						第三位:1-报文 2-文件
 *    Return:   0 -- 成功  -1 -- 失败
 *    ------------------------------------
 *    Author	Date			Action
 *    DJZ 		2010/10/13		Create
*****************************************/
int  pbbusi700afterdeal( char * para )
{
	EXEC SQL BEGIN DECLARE SECTION;
		char packstr[20+1];
		char FTranCode[20+1];
		char trancode[6+1];
		char errcode[20+1];
		char errmsg[100+1];
		char cntoutf[1+1];
		char transtatus[20+1];
		char trandate[8+1];
		char chnl_no[3+1];
		char seqno[10+1];
		/*定义XML报文变量*/
		char seqnb[15+1];
		char seqNb[15+1];
		char snddt[8+1];
		char sndmbrcd[4+1];
		char msgcd[10+1];
		char sndtm[6+1];
		char rcvmbrcd[4+1];
		char sndappcd[3+1];
		char calltyp[4+1];

		char s_ret_code[20+1];
		/* Modified by MSJ - 20130227 */
		/**char ret_msg[40+1];**/
		char ret_msg[80+1];
		char s_ret_msg[256+1];/**add by wo 20141029**/
		
		long app_err_no = 0;
	EXEC SQL END   DECLARE SECTION;

	ATOM_PARA Para ;        /*  配置参数    */
	char s_msgtype[8+1];
	long l_msgtype;
	long ret;
        char thmsndAppCd[3+1];  /*区分网银新一代*/
        struct PKG_DATA_BUFF pkg;

	memset( &Para, 0x00, sizeof(ATOM_PARA) );
	ParseAtomPara( &Para , para );
	WriteLog( ERR_LVL, "交易码Para.Para[0]=[%s]交易属性Para.Para[1][%s]",
		Para.Para[0], Para.Para[1] );

        memset( thmsndAppCd, 0x00, sizeof(thmsndAppCd) );
        memset( &pkg, 0x00,sizeof( struct PKG_DATA_BUFF ));
	memset( errcode, 0x00, sizeof(errcode) );
	memset( errmsg, 0x00, sizeof(errmsg) );
	memset( chnl_no, 0x00, sizeof(chnl_no) );
	memset( s_ret_code, 0x00, sizeof(s_ret_code) );
	memset( ret_msg, 0x00, sizeof(ret_msg) );
	memset( s_ret_msg, 0x00, sizeof(s_ret_msg));/**add by wangou 20141029**/
	memset( trancode, 0x00, sizeof(trancode) );
	memset( cntoutf,0x00,sizeof(cntoutf));
    /*add by dly 20120330 begin*/
    memset( calltyp, 0x00, sizeof(calltyp));
    /*add by dly 20120330 end*/

	GetPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&app_err_no, 0 );
	GetPoolDataByName( "ABSHEAD", "_error_code", 0, 0, ret_msg, 0 );
	GetPoolDataByName( "PBSYS", "SChnlNo", 0, 0, chnl_no, 0 );
	GetPoolDataByName( "BUSIIB", "thsretCd", 0, 0, errcode, 0 );
	GetPoolDataByName( "BUSIIB", "thsdesc", 0, 0, errmsg, 0 );
	GetPoolDataByName( "BUSIIB", "thcn2utf8", 0, 0, cntoutf, 0 );

	memset( trandate, 0x00, sizeof(trandate) );
	memset( seqno, 0x00, sizeof(seqno) );
	memset( transtatus, 0x00, sizeof(transtatus) );

	GetPoolDataByName( "PBSYS", "PbDate", 0, 0, trandate, 0 );
	GetPoolDataByName( "PBSYS", "SrcJourNo", 0, 0, seqno, 0 );
	GetPoolDataByName( "PBSYS", "TranCode", 0, 0, trancode, 0 );
	trim(cntoutf);
	if ( strlen( cntoutf ) == 0 )
	{
		cntoutf[0]='1';
		PutPoolDataByName( "BUSIIB", "thcn2utf8", 0, 0, cntoutf, 0);
	}

	if( errcode[0] == '0' )
	{
		transtatus[0] = '0';
		PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, "000000", 0);
		/**add by wangou 20141029 去换行符 **/
                GetPoolDataByName( "BUSIIB", "thsdesc", 0, 0, s_ret_msg, 0);
                rtrim( s_ret_msg );
                rdeln( s_ret_msg );
                PutPoolDataByName( "BUSIIB", "thsdesc", 0, 0, s_ret_msg, 0);
                /**end by wangou**/

		WriteLog( ERR_LVL, "交易成功" );
	}
	else
	{
		transtatus[0] = '1';
		WriteLog( ERR_LVL, "交易失败" );
		sprintf( s_ret_code, "%d", app_err_no );
		WriteLog( ERR_LVL, "s_ret_code[%s]\n", s_ret_code );
		ret = NetBankRetConv( s_ret_code, ret_msg, chnl_no, trancode );	
		rtrim( s_ret_code );
		rtrim( ret_msg );
		rdeln( ret_msg );/**add by wangou20141029去换行符**/
		WriteLog( APP_LVL, "s_ret_code[%s], ret_msg[%s]\n", s_ret_code, ret_msg );
		PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, s_ret_code, 0);
		PutPoolDataByName( "BUSIIB", "thsdesc", 0, 0, ret_msg, 0);
		
	}

	/* del by ch 20110222 EXEC SQL UPDATE T_PB_NET_LOG SET transtats[1,1]=:transtatus[0]
		WHERE trandate=:trandate AND seqno=:seqno;
	if( SQLCODE != 0 )
	{
		WriteLog( ERR_LVL, "更新网银日志表失败[%s][%s][%d]",
			trandate, seqno, SQLCODE );
		return -1;
	}
	else if( sqlca.sqlerrd[2] == 0 )
	{
		WriteLog( ERR_LVL, "更新网银日志表失败[%s][%s]更新条数为[%d]",
			trandate, seqno, sqlca.sqlerrd[2] );
		return -1;
	}
	del end*/
	EXEC SQL UPDATE T_PB_NET_LOG SET transtats[1,1]=:transtatus[0],
	/*add by ch 20110222*/
		result = :ret_msg
	/*add end*/
		WHERE trandate=:trandate AND seqno=:seqno;
	if( SQLCODE != 0 )
	{
		WriteLog( ERR_LVL, "更新网银日志表失败[%s][%s][%d]",
			trandate, seqno, SQLCODE );
		return -1;
	}
	else if( sqlca.sqlerrd[2] == 0 )
	{
		WriteLog( ERR_LVL, "更新网银日志表失败[%s][%s]更新条数为[%d]",
			trandate, seqno, sqlca.sqlerrd[2] );
		return -1;
	}
	/*	账务类交易,需更新网银流水表	*/	
	if( Para.Para[2][0] == '1' )
	{
		EXEC SQL UPDATE T_PB_NET_DTL SET transtats[1,1]=:transtatus[0],
		/*add by ch 20110222*/
			result = :ret_msg
		/*add end*/
			WHERE trandate=:trandate AND seqno=:seqno;
		if( SQLCODE != 0 )
		{
			WriteLog( ERR_LVL, "更新网银流水表失败[%s][%s][%d]",
				trandate, seqno, SQLCODE );
			return -1;
		}
		else if( sqlca.sqlerrd[2] == 0 )
		{
			WriteLog( ERR_LVL, "更新网银流水表失败[%s][%s]更新条数为[%d]",
				trandate, seqno, sqlca.sqlerrd[2] );
			return -1;
		}
	}
	/*	赋值返回包头	*/
	GetPoolDataByName( "BUSIIB", "thmseqNb", 0, 0, seqnb, 0);	
	GetPoolDataByName( "BUSIIB", "thmsndDt", 0, 0, snddt, 0);
	GetPoolDataByName( "BUSIIB", "thmsndMbrCd", 0, 0, sndmbrcd, 0);
	GetPoolDataByName( "BUSIIB", "thmmsgCd", 0, 0, msgcd, 0);
	GetPoolDataByName( "BUSIIB", "thmcallTyp", 0, 0, calltyp, 0);
	GetPoolDataByName( "BUSIIB", "thmsndAppCd", 0, 0, sndappcd, 0);

        /*mode by fjx 20150512取交易渠道*/
        GetPoolDataByName( "RCBIB", "thmsndAppCd", 0, 0, thmsndAppCd, 0 );       
        rtrim( thmsndAppCd );
	if( strlen(thmsndAppCd) == 0)
	{
		GetPoolDataByName( "BUSIIB", "thmsndAppCd", 0, 0, thmsndAppCd, 0 );
		rtrim( thmsndAppCd );
	}

	PutPoolDataByName( "BUSIIB", "thmrefSeqNb", 0, 0, seqnb, 0);	
	PutPoolDataByName( "BUSIIB", "thmrefSndDt", 0, 0, snddt, 0);
	PutPoolDataByName( "BUSIIB", "thmrefSndMbrCd", 0, 0, sndmbrcd, 0);
	PutPoolDataByName( "BUSIIB", "thmrefMsgCd", 0, 0, msgcd, 0);
	PutPoolDataByName( "BUSIIB", "thmrefCallTyp", 0, 0, calltyp, 0);
	PutPoolDataByName( "BUSIIB", "thmrefSndAppCd", 0, 0, sndappcd, 0);

	PutPoolDataByName( "BUSIIB", "thpsndMbrCd", 0, 0, "6500", 0);
	PutPoolDataByName( "BUSIIB", "thpsndAppCd", 0, 0, "CBS", 0);
	PutPoolDataByName( "BUSIIB", "thprcvMbrCd", 0, 0, "0000", 0);
	PutPoolDataByName( "BUSIIB", "thprcvAppCd", 0, 0, "ESB", 0);

	PutPoolDataByName( "BUSIIB", "thmsndMbrCd", 0, 0, "6500", 0);
	PutPoolDataByName( "BUSIIB", "thmsndAppCd", 0, 0, "CBS", 0);
	PutPoolDataByName( "BUSIIB", "thmrcvMbrCd", 0, 0, "0000", 0);
	PutPoolDataByName( "BUSIIB", "thmrcvAppCd", 0, 0, "ESB", 0);

	PutPoolDataByName( "BUSIIB", "thsmbrCd", 0, 0, "6500", 0);
	PutPoolDataByName( "BUSIIB", "thsappCd", 0, 0, "NNS", 0);

	memset( seqNb, 0x00, sizeof(seqNb) );
	memcpy( seqNb, trandate, 8 );
	memcpy( seqNb+8, seqno+3, 7 );
	PutPoolDataByName( "BUSIIB", "thmseqNb", 0, 0, seqNb, 0);	

    /*赋值跟踪码 区分新一代交易*/
/* Modified by zhangxch&fengjx on 20150508 for 短信百分之五超时 生产紧急版本  begin
    if ( strncmp ( thmsndAppCd, "NNS", 3 ) == 0 || strncmp ( thmsndAppCd, "MBS", 3 ) == 0 ) */
    if ( strncmp ( thmsndAppCd, "XYD", 3 ) != 0 && strncmp ( thmsndAppCd, "FFT", 3 ) != 0 )
/* Modified by zhangxch&fengjx on 20150508 for 短信百分之五超时 生产紧急版本  end */
    { 
        MsgFlagHandleNew( "700" , 'S' , "3"  ) ;
        memset( s_msgtype, 0, sizeof(s_msgtype) );
        memcpy( s_msgtype, seqno + 2, 8 );
        l_msgtype = atol( s_msgtype );
        TraceCodeHandleNew ( "700" , 'S' ,  &l_msgtype ) ;
     }
    
	/*	赋值交易属性	*/
    PutPoolData30(V_SrcID, 0 , 0 , Para.Para[1], VAR_SrcID.cb);

	/*	赋值交易码	*/
	PutPoolDataByName( "BUSIIB", "thmmsgCd", 0, 0, Para.Para[0], 0 );

	/*	取外部交易码	*/
	memset( FTranCode, 0x00, sizeof(FTranCode) );
	GetPoolDataByName( "PBSYS", "RTranCode", 0, 0, FTranCode, 0 );

	/*	报文打包	*/
	memset( packstr, 0x00, sizeof(packstr) );
	sprintf( packstr, "F|700|%s", FTranCode );
	ret = Data_Pack( packstr );
	if( ret < 0 )
	{
		WriteLog( ERR_LVL, "打包失败[%s]", packstr );
		return 0;
	}
	WriteLog( ERR_LVL, "DataBuff[%s][%d]", PkgBuff.DataBuff, PkgBuff.DataLen );

	/*	增加MAC	*/

	/*发送 区分新一代交易*/
/* Modified by zhangxch&fengjx on 20150508 for 短信百分之五超时 生产紧急版本  begin
        if ( strncmp ( thmsndAppCd, "NNS", 3 ) != 0  && strncmp ( thmsndAppCd, "MBS", 3 ) != 0) */
        if ( strncmp ( thmsndAppCd, "XYD", 3 ) == 0  || strncmp ( thmsndAppCd, "FFT", 3 ) == 0)
/* Modified by zhangxch&fengjx on 20150508 for 短信百分之五超时 生产紧急版本  End */
        {
            strcpy( pkg.DataBuff, PkgBuff.DataBuff);
            memset( PkgBuff.DataBuff, 0x00, sizeof(PkgBuff.DataBuff));
            sprintf( PkgBuff.DataBuff, "%08d%s", PkgBuff.DataLen, pkg.DataBuff);
            PkgBuff.DataLen = PkgBuff.DataLen + 8;
            ret = Comm_AcCall("700009|928000");
            if( ret < 0 )
            {
                WriteLog( ERR_LVL, "发送失败" );
                return 0;
            }
        }
        else
        {
	    ret = Comm_AcCall("700001|928000");
	    if( ret < 0 )
	    {
		WriteLog( ERR_LVL, "发送失败" );
		return 0;
	    }
         }

	return 0;
}

int
PutPkgHeadPubDate()
{
	int ret = 0;
	
	ret = ApGetDumVar( "B700" );
	if( ret < 0 ) {
		WriteLog( ERR_LVL, ">>>>>>>>>取虚拟柜员失败!" );
		return ( -1 );
	}

    PutPoolDataByName( "ABSHEAD", "_tx_op_stat", 0, 0, "N", 0 );
    PutPoolDataByName( "ABSHEAD", "chnl_no",  0, 0, "W", 0 );

	return 0;
}

long 
NetBankRetConv( retcode, retmsg, chnlno, trancode )
char *retcode;
char *retmsg;
char *chnlno;
char *trancode;
{
	EXEC SQL BEGIN DECLARE SECTION;
	char pb_ret_code[10+1];
	char ChnlNo[6+1];
	char TranCode[6+1];
	char sys_err_no[5+1];
	char chnl_ret_code[10+1];
	char ret_msg[40+1];
	EXEC SQL END DECLARE SECTION;

	/* Modified by MSJ - 20130227 */
	/**char tmp_ret_msg[40+1];**/
	char tmp_ret_msg[80+1];
	int i = 0;

	memset( pb_ret_code, 0x00, sizeof( pb_ret_code ) );
	memset( ChnlNo, 0x00, sizeof( ChnlNo ) );
	memset( TranCode, 0x00, sizeof( TranCode ) );
	memset( sys_err_no, 0x00, sizeof( sys_err_no ) );
	memset( chnl_ret_code, 0x00, sizeof( chnl_ret_code ) );
	memset( ret_msg, 0x00, sizeof( ret_msg ) );
	memset( tmp_ret_msg, 0x00, sizeof( tmp_ret_msg ) );

	WriteLog( TEST_LVL, "===NetBankRetConv===" );
	strcpy( ChnlNo, chnlno );
	rtrim( ChnlNo );
	strcpy( TranCode, trancode );
	rtrim( TranCode );
	strcpy( tmp_ret_msg, retmsg );
	rtrim( tmp_ret_msg );

	strcpy( sys_err_no, retcode );
	rtrim( sys_err_no );
	
	WriteLog( APP_LVL, "retcode[%s]retmsg[%s]chnlno[%s]trancode[%s]", retcode, retmsg, chnlno, trancode );
	if( strlen( ChnlNo ) == 0 )
	{
		WriteLog( ERR_LVL, "渠道号为空,请检查!" );
		strcpy( retcode, "99999" );
		strcpy( retmsg, "渠道号为空,请检查!" );
		return ( -1 );
	}
	if( strlen( TranCode ) == 0 )
	{
		WriteLog( ERR_LVL, "内部交易码为空,请检查!" );
		strcpy( retcode, "99999" );
		strcpy( retmsg, "内部交易码为空,请检查!" );
		return ( -1 );
	}
	if( strcmp( sys_err_no, "99999" ) == 0 )
	{
		strcpy( TranCode, "000000" );	
	}

	while( i <= 5 )
	{
		EXEC SQL SELECT s_ret_code, ret_msg
			INTO :chnl_ret_code, :ret_msg
			FROM t_pb_c_r_conv1
			WHERE s_chnl_no = :ChnlNo
			AND s_area_no = :TranCode
			AND pb_ret_code = :sys_err_no;
		if( SQLCODE != 0 )
		{
			if( SQLCODE == -244 || SQLCODE == -245 )
			{
				WriteLog( ERR_LVL, "读渠道返回代码对照表1锁表[%d]!", SQLCODE );
				i++;
				continue;
			}
			else
			{
				WriteLog( ERR_LVL, "读渠道返回代码对照表1出错!SQLCODE[%d]", SQLCODE );
				strcpy( sys_err_no, "99999" );
				i++;
				continue;
			}
			break;
		}
		rtrim( chnl_ret_code );
		rtrim( ret_msg );
		strcpy( retcode, chnl_ret_code );
		if( strlen( tmp_ret_msg ) == 0 )
		{
			strcpy( retmsg, ret_msg );
		}
		WriteLog( TEST_LVL, "retcode=[%s], retmsg=[%s]\n", retcode, retmsg );
		break;
	}
	if( i > 5 )
	{
		strcpy( retcode, "99999" );
		/* Modified by MSJ - 20130917 */
		if( strlen( tmp_ret_msg ) == 0 )
		{
		    strcpy( retmsg, "不明错误" );
		}
		WriteLog( APP_LVL, "循环%d次后无法找到返回码,原值返回retcode[%s], retmsg[%s]\n", i, retcode, retmsg );
	}
	
	return ( 0 );
}
long NetParaConv( char * param )
{
	EXEC SQL BEGIN DECLARE SECTION;
	char busitype[3+1];
	char paratype[10+1];
	char outcode[20+1];
	char incode[20+1];
	EXEC SQL END DECLARE SECTION;

	ATOM_PARA Para;
	int i, ret;
	char err_code[6+1];
	char err_msg[256+1];
	long errcode=0;

	/* Added by MSJ for the custommer's name 20120907 */
	char CustName[128+1];
	char OutTranCode[40+1];
	char certTyp[4+1];

	memset( busitype, 0x00, sizeof( busitype ) );
	memset( paratype, 0x00, sizeof( paratype ) );
	memset( outcode, 0x00, sizeof( outcode ) );
	memset( incode, 0x00, sizeof( incode ) );
	memset( err_code, 0x00, sizeof( err_code ) );
	memset( err_msg, 0x00, sizeof( err_msg ) );
	memset( CustName, 0x00, sizeof( CustName ) );
	memset( OutTranCode, 0x00, sizeof( OutTranCode ) );
	memset( certTyp, 0x00, sizeof( certTyp ) );

	GetPoolDataByName( "PBSYS", "BusiType", 0, 0, busitype, 0 );
	rtrim( busitype );

	/* Added by MSJ for the custommer's name 20120907 - Start */
	GetPoolDataByName( "PBSYS", "RTranCode", 0, 0, OutTranCode, 0);
	GetPoolDataByName( "BUSIIB", "custNm", 0, 0, CustName, 0);
	GetPoolDataByName( "BUSIIB", "certTyp", 0, 0, certTyp, 0 );
	rtrim( OutTranCode );
	rtrim( CustName );
	rtrim( certTyp );

	if( strcmp(OutTranCode,"CBS0000010")==0 
		&& strlen(CustName)==0
		&& atoi(certTyp) < 50 )
	{
		WriteLog( ERR_LVL, "错误: OutTranCode[%s],CustName[%s]",OutTranCode,CustName);
		errcode=99999;
		strcpy( err_msg, "信息不足，请输入户名" );
		PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char*)&errcode, 0 );
		PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
		return ( -1 );
	}
	/* 20120907 - End */

	memset( &Para, 0x00, sizeof( ATOM_PARA ) );
	ParseAtomPara( &Para, param );
	for( i = 0; i < Para.ParaNum; i ++ )
	{
		rtrim( Para.Para[i] );
		memset( outcode, 0x00, sizeof( outcode ) );
		if( strcmp( Para.Para[i], "certTyp" ) == 0 )
		{
			GetPoolDataByName( "BUSIIB", "certTyp", 0, 0, outcode, 0 );
			strcpy( paratype, "certTyp" );
		}
		else if( strcmp( Para.Para[i], "currencyTyp" ) == 0 )
		{
			GetPoolDataByName( "BUSIIB", "currencyTyp", 0, 0, outcode, 0 );
			strcpy( paratype, "currencyTyp" );
		}
		else if( strcmp( Para.Para[i], "qryCls" ) == 0 )
		{
			GetPoolDataByName( "BUSIIB", "qryCls", 0, 0, outcode, 0 );
			strcpy( paratype, "qryCls" );
		}
		else if( strcmp( Para.Para[i], "transChnl" ) == 0 )
		{
			GetPoolDataByName( "BUSIIB", "transferChnl", 0, 0, outcode, 0 );
			strcpy( paratype, "transChnl" );
		}
		else if( strcmp( Para.Para[i], "summNo" ) == 0 )
		{
			GetPoolDataByName( "BUSIIB", "remarkCd", 0, 0, outcode, 0 );
			strcpy( paratype, "summNo" );
		}
		/** add dly 20110419 begin **/
		else if( strcmp( Para.Para[i], "voucherTyp" ) == 0 )
		{
			GetPoolDataByName( "BUSIIB", "voucherTyp", 0, 0, outcode, 0 );
			strcpy( paratype, "voucherTyp" );
		}
		/** add dly 20110419 end **/
		else
		{
			WriteLog( ERR_LVL, "未找到转换类型，请检查配置!" );
		}
	
		rtrim( outcode );
		if( strlen( outcode ) == 0 )
		{
			continue;
		}
		EXEC SQL SELECT incode INTO :incode
			FROM t_pb_net_para
			WHERE busitype = :busitype
			AND	paratype = :paratype
			AND	outcode = :outcode;
		if( SQLCODE != 0 && SQLCODE != 100 )
		{
			WriteLog( ERR_LVL, "查询网银系统参数对应表失败!SQLCODE[%d]busitype[%s]paratype[%s]outcode[%s]\n", sqlca.sqlcode, busitype, paratype, outcode );
			strcpy( err_code, "99999" );
			strcpy( err_msg, "查询网银系统参数对应表失败!" );
			PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, err_code, 0 );
			PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
			return ( -1 );
		}
		else if( SQLCODE == 100 )
		{
			WriteLog( ERR_LVL, "网银系统参数对应表配置有误，请检查!busitype[%s]paratype[%s]outcode[%s]\n", busitype, paratype, outcode );

			/* Added by Ma Shaojie for the error message - 20120503 - Start */
			strcpy( err_code, "99999" );
			strcpy( err_msg, "数据库配置有误" );
			PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, err_code, 0 );
			PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
			/* 20120503 - End */

			return ( -1 );
		}

		rtrim( incode );
		if( strcmp( paratype, "certTyp" ) == 0 )
		{
			WriteLog( ERR_LVL, "papertype[%s]", incode );
			PutPoolDataByName( "PAGTBUF", "papertype", 0, 0, incode, 0 );
			/**
			PutPoolDataByName( "BUSIIB", "certTyp", 0, 0, outcode, 0 );
			**/
		}
		else if( strcmp( paratype, "currencyTyp" ) == 0 )
		{
			WriteLog( ERR_LVL, "currtype[%s]", incode );
			PutPoolDataByName( "PAGTBUF", "currtype", 0, 0, incode, 0 );
			/**
			PutPoolDataByName( "BUSIIB", "currencyTyp", 0, 0, outcode, 0 );
			**/
		}
		else if( strcmp( paratype, "qryCls" ) == 0 )
		{
			WriteLog( ERR_LVL, "qryCls[%s]", incode );
			PutPoolDataByName( "BUSIIB", "qryCls", 0, 0, incode, 0 );
		}
		else if( strcmp( paratype, "transChnl" ) == 0 )
		{
			WriteLog( ERR_LVL, "transChnl[%s]", incode );
			PutPoolDataByName( "BUSIIB", "transferChnl", 0, 0, incode, 0 );
		}
		else if( strcmp( paratype, "summNo" ) == 0 )
		{
			WriteLog( ERR_LVL, "remarkCd[%s]", incode );
			PutPoolDataByName( "BUSIIB", "remarkCd", 0, 0, incode, 0 );
		}
		/** add dly 20110419 begin **/
		else if( strcmp( paratype, "voucherTyp" ) == 0 ) 
		{
			WriteLog( ERR_LVL, "voucherTyp[%s]", incode );
			PutPoolDataByName( "BUSIIB", "voucherTyp", 0, 0, incode, 0 );
		}
		/** add dly 20110419 end **/
		else
		{
			WriteLog( ERR_LVL, "未找到转换类型，请检查配置!" );
		}
	}

	return ( 0 );
}

long RetRecordNum( char * param )
{
	char rec_num[20];
	char tmp_str[20];
	char tmp_str1[20];
	char ret_msg[60];
    ATOM_PARA Para;
	long n_rec;
	long ret_num;

	n_rec = 0;
	ret_num = 0;
    memset( tmp_str, 0x00, sizeof( tmp_str ) );
    memset( tmp_str1, 0x00, sizeof( tmp_str1 ) );
    memset( rec_num, 0x00, sizeof( rec_num ) );
    memset( rec_num, 0x00, sizeof( rec_num ) );
    memset( ret_msg, 0x00, sizeof( ret_msg ) );
    memset( &Para, 0x00, sizeof( ATOM_PARA ) );
    ParseAtomPara( &Para, param );
    rtrim( Para.Para[0] );
	strcpy( tmp_str, Para.Para[0]);
	strcpy( tmp_str1, Para.Para[1]);

	WriteLog( ERR_LVL, "in RetRecordNum tmp_str[%s]", tmp_str );

	GetPoolDataByName( "BUSIIB", tmp_str, 0, 0, rec_num, 0 );
	n_rec = atol(rec_num);

	WriteLog( ERR_LVL, "in RetRecordNum rec_num[%s]", rec_num );

	/* 如果返回的记录数为 0 */
	if( n_rec == 0 && (strcmp(tmp_str1, "CBS0000230") == 0))
	{

		ret_num = 100;
		PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&ret_num, 0 );
        PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, "100", 0);
		
		return ( 100 );
	}

	if( n_rec == 0 && (strcmp(tmp_str1, "CBS0000250") == 0))
	{

		ret_num = 100;
		PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&ret_num, 0 );
        PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, "100", 0);
		
		return ( 100 );
	}

	return(0);
}

long BusiDataDeal()
{
	/***合同号***/
	char LoanCtrctNb[10][32+1];
	/***贷款状态***/
	char LoanStat[10][32+1];
	char LoanStatNm[10][32+1];
	char LoanIouLoanNo[10][32+1];
	char LoanLedLoanNo[10][32+1];
	char oppoAcct[10][32+1];
	/***还款方式***/
	char repayMode[10][32+1];
	char repayModeNm[10][32+1];
	char LoanTerm[10][32+1];
	long i = 0;
	long j = 0;
	long k = 0;
	
	for( i = 0; i < 10; i++ )
	{
		memset( &LoanCtrctNb[i], 0x00, sizeof( LoanCtrctNb[i] ) );
		memset( &LoanStat[i], 0x00, sizeof( LoanStat[i] ) );
		memset( &LoanStatNm[i], 0x00, sizeof( LoanStatNm[i] ) );
		memset( &LoanIouLoanNo[i], 0x00, sizeof( LoanIouLoanNo[i] ) );
		memset( &oppoAcct[i], 0x00, sizeof( oppoAcct[i] ) );
		memset( &repayMode[i], 0x00, sizeof( repayMode[i] ) );
		memset( &repayModeNm[i], 0x00, sizeof( repayModeNm[i] ) );
		memset( &LoanTerm[i], 0x00, sizeof( LoanTerm[i] ) );
		
		GetPoolDataByName( "BUSIIB", "backup3", i, 0, (char *)&LoanIouLoanNo[i], 0 );
		
		if( strlen( LoanIouLoanNo[i] ) == 0 )
		{
			break;
		}
		GetPoolDataByName( "BUSIIB", "loanCtrctNb", i, 0, (char *)&LoanCtrctNb[i], 0 );
		GetPoolDataByName( "BUSIIB", "loanStat", i, 0, (char *)&LoanStat[i], 0 );
		GetPoolDataByName( "BUSIIB", "loanStatNm", i, 0, (char *)&LoanStatNm[i], 0 );
		GetPoolDataByName( "BUSIIB", "loanTerm", i, 0, (char *)&LoanTerm[i], 0 );
		GetPoolDataByName( "BUSIIB", "repayMode", i, 0, (char *)&repayMode[i], 0 );
		GetPoolDataByName( "BUSIIB", "repayModeNm", i, 0, (char *)&repayModeNm[i], 0 );
		GetPoolDataByName( "BUSIIB", "repayCardAcctNb", i, 0, (char *)&oppoAcct[i], 0 );
		WriteLog( APP_LVL, "loanCtrctNb[%s]", LoanCtrctNb[i] );
		WriteLog( APP_LVL, "loanStat[%s]", LoanStat[i] );
		WriteLog( APP_LVL, "loanStatNm[%s]", LoanStatNm[i] );
		WriteLog( APP_LVL, "loanTerm[%s]", LoanTerm[i] );
		WriteLog( APP_LVL, "repayMode[%s]", repayMode[i] );
		WriteLog( APP_LVL, "repayModeNm[%s]", repayModeNm[i] );
		WriteLog( APP_LVL, "repaycardAcctNb[%s]", oppoAcct[i] );
		WriteLog( APP_LVL, "iouloanno[%s]", LoanIouLoanNo[i] );
	}
	
	for( j = 0; j < 10; j++ )
	{
		memset( &LoanLedLoanNo[j], 0x00, sizeof( LoanLedLoanNo[j] ) );
		GetPoolDataByName( "BUSIIB", "backup2", j, 0, (char *)&LoanLedLoanNo[j], 0 );
		rtrim( LoanLedLoanNo[j] );
		WriteLog( APP_LVL, "ledloanno[%s]", LoanLedLoanNo[j] );
		if( strlen( LoanLedLoanNo[j] ) == 0 )
		{
			break;
		}
		for( k = 0; k < i; k ++ )
		{
			rtrim( LoanIouLoanNo[k] );
			WriteLog( APP_LVL, "led_no_j[%s]iou_no_k[%s]", LoanLedLoanNo[j], LoanIouLoanNo[k] );
			if( strcmp( LoanLedLoanNo[j], LoanIouLoanNo[k] ) == 0 )
			{
				WriteLog( APP_LVL, "i[%d]j[%d]k[%d]", i, j, k );
				rtrim( LoanCtrctNb[k] );
				PutPoolDataByName( "BUSIIB", "loanCtrctNb", j, 0, (char *)&LoanCtrctNb[k], 0 );
				rtrim( LoanStat[k] );
				PutPoolDataByName( "BUSIIB", "loanStat", j, 0, (char *)&LoanStat[k], 0 );
				rtrim( LoanStatNm[k] );
				PutPoolDataByName( "BUSIIB", "loanStatNm", j, 0, (char *)&LoanStatNm[k], 0 );
				rtrim( LoanTerm[k] );
				PutPoolDataByName( "BUSIIB", "loanTerm", j, 0, (char *)&LoanTerm[k], 0 );
				rtrim( repayMode[k] );
				PutPoolDataByName( "BUSIIB", "repayMode", j, 0, (char *)&repayMode[k], 0 );
				rtrim( repayModeNm[k] );
				PutPoolDataByName( "BUSIIB", "repayModeNm", j, 0, (char *)&repayModeNm[k], 0 );
				rtrim( oppoAcct[k] );
				PutPoolDataByName( "BUSIIB", "repayCardAcctNb", j, 0, (char *)&oppoAcct[k], 0 );
				rtrim( LoanIouLoanNo[k] );
				PutPoolDataByName( "BUSIIB", "backup3", j, 0, (char *)&LoanIouLoanNo[k], 0 );
				continue;
			}
		}
	}
	
	return ( 0 );
}
/*****************************************
 *    Function    :	pbbusi700base010after
 *    DESC        :	网银客户信息查询后处理
 *    Return:   0 -- 成功  -1 -- 失败
 *    ------------------------------------
 *    Author	Date			Action
 *    DJZ 		2010/10/13		Create
*****************************************/
int  pbbusi700base010after ()
{
	char certTyp[10+1];
	char prsn_num[60+1];
	char corp_num[60+1];
	char cust_name[60+1];
	long app_err_no;


	memset( certTyp, 0x00, sizeof(certTyp) );
	memset( cust_name,0x00,sizeof(cust_name ));

	GetPoolDataByName( "BUSIIB", "certTyp", 0, 0, certTyp, 0 );
	/* add by luojy 20120313 */
	GetPoolDataByName( "PAGTBUF", "data20", 0, 0, cust_name, 0 );
	WriteLog( ERR_LVL, "凭证类型[%s]", certTyp );
	WriteLog( ERR_LVL, "cust_name[%s]", cust_name );
	
	memset( prsn_num, 0x00, sizeof(prsn_num) );
	GetPoolDataByName( "PAGTBUF", "data1", 0, 0, prsn_num, 0 );
	memset( corp_num, 0x00, sizeof(corp_num) );
	GetPoolDataByName( "PAGTBUF", "data2", 0, 0, corp_num, 0 );
	WriteLog( ERR_LVL, "prsn_num[%s]corp_num[%s]", prsn_num, corp_num );
	/* add by luojy 20120314*/
	PutPoolDataByName( "BUSIIB", "custNm", 0, 0, cust_name, 0 );
	memset(cust_name,0x00,sizeof(cust_name));
	GetPoolDataByName( "BUSIIB", "custNm", 0, 0, cust_name, 0 );
	WriteLog( ERR_LVL, "custNm[%s]", cust_name );
	/*	certType 小于 50 为个人证件类型	*/
	if( atoi( certTyp ) < 50 && atoi( prsn_num ) > 0 )
	{
		WriteLog( ERR_LVL, "网银查询个人客户，核心查询结果有值，直接返回成功" );
		return 0;
	}
	if( atoi( certTyp ) > 50 && atoi( corp_num ) > 0 )
	{
		WriteLog( ERR_LVL, "网银查询企业客户，核心查询结果有值，直接返回成功" );
		return 0;
	}
	PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, "100", 0 );
	app_err_no = 10023;
	PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char*)&app_err_no, 0 );
	PutPoolDataByName( "BUSIIB", "thsdesc", 0, 0, "查询不到该客户信息", 0 );
	/*	默认返回失败	*/
	return ( -1 );
}

long GetLoanInstNm()
{
	char inst_no[4+1];
	char inst_name[32+1];
	char inst_name_tmp[30+1];

	memset( inst_no, 0x00, sizeof( inst_no ) );
	memset( inst_name, 0x00, sizeof( inst_name ) );
	memset( inst_name_tmp, 0x00, sizeof( inst_name_tmp ) );

	GetPoolDataByName( "BUSIIB", "loanBrchID", 0, 0, inst_no, 0 );

	WriteLog( APP_LVL, "inst_no[%s]", inst_no );
	GetInstName( inst_no, inst_name );
	WriteLog( APP_LVL, "inst_name[%s]", inst_name );
	memcpy( inst_name_tmp,inst_name, 30);
	inst_name_tmp[31] = '\0';
	
	PutPoolDataByName( "BUSIIB", "loanBrchNm", 0, 0, inst_name_tmp, 0 );
	PutPoolDataByName( "BUSIIB", "loanBrchNmSt", 0, 0, inst_name_tmp, 0 );
	
	return ( 0 );
}

long LoanStatusDeal()
{
	char flag[32+1];
	char clr_flag[1+1];
	char loan_status[10+1];
	char s_num[10+1];

	long num = 0;

	memset( flag, 0x00, sizeof( flag ) );
	memset( clr_flag, 0x00, sizeof( clr_flag ) );
	memset( loan_status, 0x00, sizeof( loan_status ) );
	memset( s_num, 0x00, sizeof( s_num ) );

	GetPoolDataByName( "BUSIIB", "flag", 0, 0, (char*)&clr_flag[0], 0 );
	GetPoolDataByName( "BUSIIB", "stlFlg", 0, 0, flag, 0 );
	GetPoolDataByName( "PAGTBUF", "num", 0, 0, s_num, 0 );
	
	num = atol( s_num );
	WriteLog( APP_LVL, "num[%ld],s_num[%s]", num ,s_num );
	WriteLog( APP_LVL, "clr_flag[%c],flag[%s]", clr_flag[0], flag );

	if( clr_flag[0] == '1' )
	{
		strcpy( loan_status, "02" );
		PutPoolDataByName( "BUSIIB", "loanStatNm", 0, 0, "结清", 0 );
	}
	else if( clr_flag[0] != '0' )
	{
		/**其它**/
		WriteLog( ERR_LVL, "结清标志未知" );
		strcpy( loan_status, "99" );
		PutPoolDataByName( "BUSIIB", "loanStatNm", 0, 0, "其它", 0 );
	}
	else
	{
		if( num > 0 )
		{
			strcpy( loan_status, "05" );
			PutPoolDataByName( "BUSIIB", "loanStatNm", 0, 0, "展期", 0 );
		}
		else
		{
			if( flag[2] == '1' )
			{
				/**销户**/
				strcpy( loan_status, "04" );
				PutPoolDataByName( "BUSIIB", "loanStatNm", 0, 0, "销户", 0 );
			}
			else if( flag[2] != '0' )
			{
				/**其它**/
				WriteLog( ERR_LVL, "账户状态未知" );
				strcpy( loan_status, "99" );
				PutPoolDataByName( "BUSIIB", "loanStatNm", 0, 0, "其它", 0 );
			}
			else
			{
				if( flag[1] == '0' )
				{
					/***正常***/
					strcpy( loan_status, "01" );
					PutPoolDataByName( "BUSIIB", "loanStatNm", 0, 0, "正常", 0 );
				}
				else if ( flag[1] == '1' )
				{
					/***逾期***/
					strcpy( loan_status, "03" );
					PutPoolDataByName( "BUSIIB", "loanStatNm", 0, 0, "到期", 0 );
				}
				else
				{
					strcpy( loan_status, "99" );
					PutPoolDataByName( "BUSIIB", "loanStatNm", 0, 0, "其它", 0 );
				}
			}
		}
	}

	
	PutPoolDataByName( "BUSIIB", "loanStat", 0, 0, loan_status, 0 );
	
	return ( 0 );
}

int
ApGetDumVar( busitype_in )
char  *busitype_in;
{
EXEC SQL BEGIN DECLARE SECTION;
    char  tlr_no[6+1];
    char  inst_no[6+1];
    char  data_code[19];
    char  content[250];
    char  busitype[4+1];
EXEC SQL END DECLARE SECTION;

    memset( data_code, 0, sizeof data_code );
    memset( content, 0, sizeof content );
    memset( tlr_no, 0, sizeof tlr_no );
    memset( inst_no, 0, sizeof inst_no );


    strcpy( busitype, busitype_in );
    rtrim( busitype );
    GetPoolDataByName( "ABSHEAD", "_tlr_no", 0, 0, tlr_no, 0 );
    if( strlen( tlr_no )==0 )
    {
        strcpy( data_code,"dum_tlr" ); /*虚拟柜员*/
        EXEC SQL SELECT content INTO :tlr_no FROM t_pay_sys_para
        WHERE  inst_no = :busitype
        AND    data_code = :data_code;
        if( sqlca.sqlcode )
        {
            WriteLog( ERR_LVL, "获取虚拟柜员失败inst_no[%s] data_code[%s] sqlcode=[%d]", busitype, data_code ,sqlca.sqlcode );
            return( -1 );
        }
        rtrim( tlr_no );
        PutPoolDataByName( "ABSHEAD", "_tlr_no", 0, 0, tlr_no , 0 );
    }

    GetPoolDataByName( "ABSHEAD", "organ_no", 0, 0, inst_no, 0 );
    if( strlen( inst_no ) == 0)
    {
        strcpy( data_code,"dum_inst" );
        EXEC SQL SELECT content INTO :inst_no FROM t_pay_sys_para
        WHERE  inst_no = "PUB"
        AND    data_code =:data_code;
        if( sqlca.sqlcode )
        {
            WriteLog( ERR_LVL, "获取虚拟机构失败inst_no[PUB] data_code[%s] sqlcode=[%d]", busitype, data_code ,sqlca.sqlcode );
            return( -1 );
        }
        rtrim( inst_no );
        PutPoolDataByName( "ABSHEAD", "organ_no", 0, 0, inst_no , 0 );
    }
    return( 0 );
}
/** add by wo 20141029 **/
char *rdeln(char* str)
{
    char* s=str;

    if ( str == NULL )
        return ( str ) ;

    while(*s)
        ++s;
    --s;
    while (s >= str)
        if (*s == '\n')
            --s;
        else
            break;

    *(s+1) = 0;
    return( str ) ;
}
/** the end **/
/*****************************************
 *    Function    :	pbbusi700afternew
 *    DESC        :	通用网银后处理
 *    INPUT       :	返回交易码|返回交易属性|是否账务类交易(0-否 1-是)
				例:	CBS0000010|111|1|111|
					交易属性：
						第一位:1-实时 2-批量
						第二位:1-发送 2-接收
						第三位:1-报文 2-文件
 *    Return:   0 -- 成功  -1 -- 失败
 *    ------------------------------------
 *    Author	Date			Action
 *    XXJ 		2015/01/04		Create
*****************************************/
int  pbbusi700afternew( char * para )
{
	EXEC SQL BEGIN DECLARE SECTION;
		char packstr[20+1];
		char FTranCode[20+1];
		char trancode[6+1];
		char errcode[20+1];
		char errmsg[100+1];
		char cntoutf[1+1];
		char transtatus[20+1];
		char trandate[8+1];
		char chnl_no[3+1];
		char seqno[10+1];
		/*定义XML报文变量*/
		char seqnb[15+1];
		char seqNb[15+1];
		char snddt[8+1];
		char sndmbrcd[4+1];
		char msgcd[10+1];
		char sndtm[6+1];
		char rcvmbrcd[4+1];
		char sndappcd[3+1];
		char calltyp[4+1];

		char s_ret_code[20+1];
		/* Modified by MSJ - 20130227 */
		/**char ret_msg[40+1];**/
		char ret_msg[80+1];
		char s_ret_msg[256+1];/**add by wo 20141029**/
		
		long app_err_no = 0;
	EXEC SQL END   DECLARE SECTION;

	ATOM_PARA Para ;        /*  配置参数    */
	char s_msgtype[8+1];
	char *rcvbuff;
	long l_msgtype;
	long ret;
	char tmpbuf[PACKDATA_LEN+1];

	memset( &Para, 0x00, sizeof(ATOM_PARA) );
	ParseAtomPara( &Para , para );
	WriteLog( ERR_LVL, "交易码Para.Para[0]=[%s]交易属性Para.Para[1][%s]",
		Para.Para[0], Para.Para[1] );

	memset( errcode, 0x00, sizeof(errcode) );
	memset( errmsg, 0x00, sizeof(errmsg) );
	memset( chnl_no, 0x00, sizeof(chnl_no) );
	memset( s_ret_code, 0x00, sizeof(s_ret_code) );
	memset( ret_msg, 0x00, sizeof(ret_msg) );
	memset( s_ret_msg, 0x00, sizeof(s_ret_msg));/**add by wangou 20141029**/
	memset( trancode, 0x00, sizeof(trancode) );
	memset( cntoutf,0x00,sizeof(cntoutf));
    /*add by dly 20120330 begin*/
    memset( calltyp, 0x00, sizeof(calltyp));
    /*add by dly 20120330 end*/
	rcvbuff = (FBFR32 *)tpalloc("CARRAY", NULL, PkgBuff.DataLen+10);
        if( rcvbuff == NULL)
        {
                WriteLog( ERR_LVL, "分配核心使用输入缓冲池错");
                return -1;
        }

	GetPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&app_err_no, 0 );
	GetPoolDataByName( "ABSHEAD", "_error_code", 0, 0, ret_msg, 0 );
	GetPoolDataByName( "PBSYS", "SChnlNo", 0, 0, chnl_no, 0 );
	GetPoolDataByName( "BUSIIB", "thsretCd", 0, 0, errcode, 0 );
	GetPoolDataByName( "BUSIIB", "thsdesc", 0, 0, errmsg, 0 );
	GetPoolDataByName( "BUSIIB", "thcn2utf8", 0, 0, cntoutf, 0 );

	memset( trandate, 0x00, sizeof(trandate) );
	memset( seqno, 0x00, sizeof(seqno) );
	memset( transtatus, 0x00, sizeof(transtatus) );

	GetPoolDataByName( "PBSYS", "PbDate", 0, 0, trandate, 0 );
	GetPoolDataByName( "PBSYS", "SrcJourNo", 0, 0, seqno, 0 );
	GetPoolDataByName( "PBSYS", "TranCode", 0, 0, trancode, 0 );
	trim(cntoutf);
	if ( strlen( cntoutf ) == 0 )
	{
		cntoutf[0]='1';
		PutPoolDataByName( "BUSIIB", "thcn2utf8", 0, 0, cntoutf, 0);
	}

	if( errcode[0] == '0' )
	{
		transtatus[0] = '0';
		PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, "000000", 0);
		/**add by wangou 20141029 去换行符 **/
                GetPoolDataByName( "BUSIIB", "thsdesc", 0, 0, s_ret_msg, 0);
                rtrim( s_ret_msg );
                rdeln( s_ret_msg );
                PutPoolDataByName( "BUSIIB", "thsdesc", 0, 0, s_ret_msg, 0);
                /**end by wangou**/

		WriteLog( ERR_LVL, "交易成功" );
	}
	else
	{
		transtatus[0] = '1';
		WriteLog( ERR_LVL, "交易失败" );
		sprintf( s_ret_code, "%d", app_err_no );
		WriteLog( ERR_LVL, "s_ret_code[%s]\n", s_ret_code );
		ret = NetBankRetConv( s_ret_code, ret_msg, chnl_no, trancode );	
		rtrim( s_ret_code );
		rtrim( ret_msg );
		rdeln( ret_msg );/**add by wangou20141029去换行符**/
		WriteLog( APP_LVL, "s_ret_code[%s], ret_msg[%s]\n", s_ret_code, ret_msg );
		PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, s_ret_code, 0);
		PutPoolDataByName( "BUSIIB", "thsdesc", 0, 0, ret_msg, 0);
		
	}

	/* del by ch 20110222 EXEC SQL UPDATE T_PB_NET_LOG SET transtats[1,1]=:transtatus[0]
		WHERE trandate=:trandate AND seqno=:seqno;
	if( SQLCODE != 0 )
	{
		WriteLog( ERR_LVL, "更新网银日志表失败[%s][%s][%d]",
			trandate, seqno, SQLCODE );
		return -1;
	}
	else if( sqlca.sqlerrd[2] == 0 )
	{
		WriteLog( ERR_LVL, "更新网银日志表失败[%s][%s]更新条数为[%d]",
			trandate, seqno, sqlca.sqlerrd[2] );
		return -1;
	}
	del end*/
	EXEC SQL UPDATE T_PB_NET_LOG SET transtats[1,1]=:transtatus[0],
	/*add by ch 20110222*/
		result = :ret_msg
	/*add end*/
		WHERE trandate=:trandate AND seqno=:seqno;
	if( SQLCODE != 0 )
	{
		WriteLog( ERR_LVL, "更新网银日志表失败[%s][%s][%d]",
			trandate, seqno, SQLCODE );
		return -1;
	}
	else if( sqlca.sqlerrd[2] == 0 )
	{
		WriteLog( ERR_LVL, "更新网银日志表失败[%s][%s]更新条数为[%d]",
			trandate, seqno, sqlca.sqlerrd[2] );
		return -1;
	}
	/*	账务类交易,需更新网银流水表	*/	
	if( Para.Para[2][0] == '1' )
	{
		EXEC SQL UPDATE T_PB_NET_DTL SET transtats[1,1]=:transtatus[0],transtats[4,5]='11',backup10='CUPS',
		/*add by ch 20110222*/
			result = :ret_msg
		/*add end*/
			WHERE trandate=:trandate AND seqno=:seqno;
		if( SQLCODE != 0 )
		{
			WriteLog( ERR_LVL, "更新网银流水表失败[%s][%s][%d]",
				trandate, seqno, SQLCODE );
			return -1;
		}
		else if( sqlca.sqlerrd[2] == 0 )
		{
			WriteLog( ERR_LVL, "更新网银流水表失败[%s][%s]更新条数为[%d]",
				trandate, seqno, sqlca.sqlerrd[2] );
			return -1;
		}
	}
	/*	赋值返回包头	*/
	GetPoolDataByName( "BUSIIB", "thmseqNb", 0, 0, seqnb, 0);	
	GetPoolDataByName( "BUSIIB", "thmsndDt", 0, 0, snddt, 0);
	GetPoolDataByName( "BUSIIB", "thmsndMbrCd", 0, 0, sndmbrcd, 0);
	GetPoolDataByName( "BUSIIB", "thmmsgCd", 0, 0, msgcd, 0);
	GetPoolDataByName( "BUSIIB", "thmcallTyp", 0, 0, calltyp, 0);
	GetPoolDataByName( "BUSIIB", "thmsndAppCd", 0, 0, sndappcd, 0);

	PutPoolDataByName( "BUSIIB", "thmrefSeqNb", 0, 0, seqnb, 0);	
	PutPoolDataByName( "BUSIIB", "thmrefSndDt", 0, 0, snddt, 0);
	PutPoolDataByName( "BUSIIB", "thmrefSndMbrCd", 0, 0, sndmbrcd, 0);
	PutPoolDataByName( "BUSIIB", "thmrefMsgCd", 0, 0, msgcd, 0);
	PutPoolDataByName( "BUSIIB", "thmrefCallTyp", 0, 0, calltyp, 0);
	PutPoolDataByName( "BUSIIB", "thmrefSndAppCd", 0, 0, sndappcd, 0);

	PutPoolDataByName( "BUSIIB", "thpsndMbrCd", 0, 0, "6500", 0);
	PutPoolDataByName( "BUSIIB", "thpsndAppCd", 0, 0, "CBS", 0);
	PutPoolDataByName( "BUSIIB", "thprcvMbrCd", 0, 0, "0000", 0);
	PutPoolDataByName( "BUSIIB", "thprcvAppCd", 0, 0, "ESB", 0);

	PutPoolDataByName( "BUSIIB", "thmsndMbrCd", 0, 0, "6500", 0);
	PutPoolDataByName( "BUSIIB", "thmsndAppCd", 0, 0, "CBS", 0);
	PutPoolDataByName( "BUSIIB", "thmrcvMbrCd", 0, 0, "0000", 0);
	PutPoolDataByName( "BUSIIB", "thmrcvAppCd", 0, 0, "ESB", 0);

	PutPoolDataByName( "BUSIIB", "thsmbrCd", 0, 0, "6500", 0);
	PutPoolDataByName( "BUSIIB", "thsappCd", 0, 0, "NNS", 0);

	memset( seqNb, 0x00, sizeof(seqNb) );
	memcpy( seqNb, trandate, 8 );
	memcpy( seqNb+8, seqno+3, 7 );
	PutPoolDataByName( "BUSIIB", "thmseqNb", 0, 0, seqNb, 0);	

    /*	赋值跟踪码	
    MsgFlagHandleNew( "700" , 'S' , "3"  ) ;*/
    memset( s_msgtype, 0, sizeof(s_msgtype) );
    memcpy( s_msgtype, seqno + 2, 8 );
    l_msgtype = atol( s_msgtype );
/*
    TraceCodeHandleNew ( "700" , 'S' ,  &l_msgtype ) ;
*/

	/*	赋值交易属性	*/
    PutPoolData30(V_SrcID, 0 , 0 , Para.Para[1], VAR_SrcID.cb);

	/*	赋值交易码	*/
	PutPoolDataByName( "BUSIIB", "thmmsgCd", 0, 0, Para.Para[0], 0 );

	/*	取外部交易码	*/
	memset( FTranCode, 0x00, sizeof(FTranCode) );
	GetPoolDataByName( "PBSYS", "RTranCode", 0, 0, FTranCode, 0 );

	/*	报文打包	*/
	memset( packstr, 0x00, sizeof(packstr) );
	sprintf( packstr, "F|700|%s", FTranCode );
	ret = Data_Pack( packstr );
	if( ret < 0 )
	{
		WriteLog( ERR_LVL, "打包失败[%s]", packstr );
		return 0;
	}
	memset( tmpbuf, 0x00, sizeof(tmpbuf) );
	sprintf(tmpbuf,"%08d%s",PkgBuff.DataLen, PkgBuff.DataBuff);
	PkgBuff.DataLen+=8;
	memcpy( PkgBuff.DataBuff, tmpbuf, PkgBuff.DataLen  );
	WriteLog( ERR_LVL, "DataBuff[%s][%d]", PkgBuff.DataBuff, PkgBuff.DataLen );


	/*	发送	*/
	WriteLog( ERR_LVL, "zzzzzzzzzzzzz" );
 /*      发送    */
        ret = Comm_AcCall("700009|928000");
        if( ret < 0 )
        {
                WriteLog( ERR_LVL, "发送失败" );
                return 0;
        }


	

	return 0;
}
