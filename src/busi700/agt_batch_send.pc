/*PB3.0系统自动生成demo源码文件*/

#include <stdio.h>
#include <stdlib.h>
#include <sys/types.h>
#include <errno.h>
#include <string.h>
#include <unistd.h>

#include <time.h>
#include "pbconstval.h" 
#include "pbstructdef.h" 
#ifdef ORACLE_DATABASE
EXEC SQL include "pbranchdb.h";
#else
#include "pbranchdb.h"
#endif
#include "pberrlog.h"
#include "pbglbvardef.h"
#include "pbbasefunc.h"
#include "pbvarmacro.h"

#include "pbdb.h"
#include "fml32.h"
#include "atmi.h"

EXEC SQL include "pb_s_agt_batch.h";
EXEC SQL include "pbsrv.h";

/** Added by Ma Shaojie - 20120530 **/
struct s_acc_info_stru
{
    char     acc[32+1]; 
	char     card_flag;
	char     inst_no[4+1];
	char     acc_stat[2+1];
	char     cstm_name[60+1];
	double   aval_bal;
	char     draw_type; 
	char     acc_pwd[16+1];
	char     cstm_no[14+1];
	char     prd_no[4+1]; 
	char     in_acc[25+1];
	char     qry_pwd[16+1];
};

$struct s_sc_agt_bat_item_mgmt AgtMgmt;

$struct s_sc_agt_para_mgmt ParaMgmt;

$char AccDate[10+1];
$char Hostseqno[20+1];
$char InstNo[4+1];
$char TlrNo[6+1];
$char BatchNo[10+1];

$int BATCHNO;
$long TotalNum = 0;
$double TotalAmt = 0.00;

int AgtBatchSend()
{
	EXEC SQL BEGIN DECLARE SECTION;
	struct s_pb_net_dtl net_dtl;
	char backup2[128+1];

	/* Added by Ma Shaojie 20120523 - Start */
		char updCustNm[128];
		char updPayAcct[32];
		double updAmt;
		char updInstno[32];
	/* 20120523 - End */
	EXEC SQL END DECLARE SECTION;
	char inst_no[4+1];
	char cmd[400+1];
	char btchNb[32+1];
	char btchNm[128+1];
	char operTyp[2+1];
	char currencyTyp[6+1];
	char cashFlg[2+1];
	char remarkCd[16+1];
	char remark[128+1];
	char backup1[128+1];
	char backup3[128+1];
	char seqNb[32+1];
	char payAcct[32+1];
	char payCustNm[128+1];
	char rcvAcct[32+1];
	char rcvCustNm[128+1];
	char memo[128+1];
	char hostSeqNb[10+1];
	char err_msg[256+1];
	char tran_time[14+1];
	char tmp_time[80+1];
	char buff[2048+1];
	char tmp_str[50][128+1];
	dtime_t dt_time;
	long totalQnt = 0;
	long errcode = 0;
	int ret = 0;
	int i = 0;
	long j = 0;
	double totalAmt = 0.00;
	double amt = 0.00;
	FILE *fp;
	char txtfile[256+1];
	char cfgfile[128+1];
	char xmlinput[256+1];
	char filepath[128+1];
	char xmlinputfilename[128+1];
	char *p = NULL;
	char *q = NULL;

	struct s_acc_info_stru acc_info;
    int i_flag = 0;

	memset( &net_dtl, 0, sizeof( net_dtl ) );
	memset( btchNb, 0, sizeof( btchNb ) );
	memset( btchNm, 0, sizeof( btchNm ) );
	memset( operTyp, 0, sizeof( operTyp ) );
	memset( currencyTyp, 0, sizeof( currencyTyp ) );
	memset( cashFlg, 0, sizeof( cashFlg ) );
	memset( remarkCd, 0, sizeof( remarkCd ) );
	memset( remark, 0, sizeof( remark ) );
	memset( backup1, 0, sizeof( backup1 ) );
	memset( backup2, 0, sizeof( backup2 ) );
	memset( backup3, 0, sizeof( backup3 ) );
	memset( seqNb, 0, sizeof( seqNb ) );
	memset( payAcct, 0, sizeof( payAcct ) );
	memset( payCustNm, 0, sizeof( payCustNm ) );
	memset( rcvAcct, 0, sizeof( rcvAcct ) );
	memset( rcvCustNm, 0, sizeof( rcvCustNm ) );
	memset( memo, 0, sizeof( memo ) );
	memset( hostSeqNb, 0, sizeof( hostSeqNb ) );
	memset( err_msg, 0, sizeof( err_msg ) );
	memset( tran_time, 0, sizeof( tran_time ) );
	memset( tmp_time, 0, sizeof( tmp_time ) );
	memset( &dt_time, 0, sizeof( dt_time ) );
	memset( txtfile, 0, sizeof( txtfile ) );
	memset( cfgfile, 0, sizeof( cfgfile ) );
	memset( xmlinput, 0, sizeof( xmlinput ) );
	memset( xmlinputfilename, 0, sizeof( xmlinputfilename ) );
	memset( filepath, 0, sizeof( filepath ) );
	memset( buff, 0, sizeof( buff ) );
	memset( inst_no, 0, sizeof( inst_no ) );
	memset( updCustNm, 0, sizeof( updCustNm ) );
	memset( updPayAcct, 0, sizeof( updPayAcct ) );
	memset( updInstno, 0, sizeof( updInstno ) );
	memset( &acc_info, 0, sizeof( acc_info ) );

	GetPoolDataByName( "ABSHEAD", "_seq_no", 0, 0, net_dtl.seqno, 0);
	ret = PayGetPbDate( net_dtl.trandate );
	if( ret < 0 )
	{
		WriteLog( ERR_LVL, "取PB系统日期失败!\n" );
		errcode = 99999; 
		strcpy( err_msg, "取PB系统日期失败!" );
		PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode, 0 );
		PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
		/***冲正已记成功的客户帐***/
		ret = NetBank_PL_InsRevJnl();
		if( ret < 0 )
		{
			WriteLog( ERR_LVL, "插入冲正流水表失败!" );
			errcode = 99999;	
			strcpy( err_msg, "插入冲正流水表失败!" );
			PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode, 0 );
			PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
		}
	
		return (-1);
	}
	memset( AccDate, 0, sizeof( AccDate ) );
	strcpy( AccDate, net_dtl.trandate );
	memset( InstNo, 0, sizeof( InstNo ) );
	memset( TlrNo, 0, sizeof( TlrNo ) );
	GetPoolDataByName( "ABSHEAD", "organ_no", 0, 0, inst_no, 0);
	GetPoolDataByName( "ABSHEAD", "_tlr_no", 0, 0, TlrNo, 0);
	rtrim( TlrNo );
	/***取系统时间***/
	dtcurrent( &dt_time );
	dttoasc( &dt_time, tmp_time );
	rtrim( tmp_time );
	WriteLog( APP_LVL, "系统时间tmp_time[%s]\n", tmp_time );
	memcpy( tran_time, tmp_time, 4 );
	memcpy( tran_time + 4, tmp_time + 5, 2 );
	memcpy( tran_time + 6, tmp_time + 8, 2 );
	memcpy( tran_time + 8, tmp_time + 11, 2 );
	memcpy( tran_time + 10, tmp_time + 14, 2 );
	memcpy( tran_time + 12, tmp_time + 17, 2 );
	rtrim( tran_time );
	WriteLog( APP_LVL, "系统时间tran_time[%s]\n", tran_time );
	/***取包内容（转化后文件第6行内容）***/
	GetPoolDataByName( "BUSIIB", "transfilename", 0, 0, xmlinputfilename, 0 );
	WriteLog( APP_LVL, "xmlinputfilename[%s]\n", xmlinputfilename );
	sprintf( filepath, "%s/print/NETBANK/TOPB", getenv( "HOME" ) );
	if( access( filepath, R_OK ) != 0 )
	{
		if( mkdir( filepath, S_IEXEC | S_IREAD | S_IWRITE | S_IRGRP | S_IXGRP | S_IXOTH | S_IROTH ) )
		{
			WriteLog( ERR_LVL, "创建目录出错[%s]!", filepath );
			errcode = 99999;
			sprintf( err_msg, "创建目录出错[%s]!", filepath );
			PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode, 0 );
			PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
			/***冲正已记成功的客户帐***/
			ret = NetBank_PL_InsRevJnl();
			if( ret < 0 )
			{
				WriteLog( ERR_LVL, "插入冲正流水表失败!" );
				errcode = 99999;
				strcpy( err_msg, "插入冲正流水表失败!" );
				PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode, 0 );
				PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
			}
			return ( -1 );
		}
	}
	ret = FtpFileName( "7000000001", 2, xmlinputfilename, xmlinputfilename, xmlinputfilename );
	if( ret )
	{
		WriteLog( ERR_LVL, "取xml文件失败[%s]!", xmlinputfilename );
		errcode = 99999;
		sprintf( err_msg, "取xml文件失败[%s]!", xmlinputfilename );
		PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode, 0 );
		PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
		/***冲正已记成功的客户帐***/
		ret = NetBank_PL_InsRevJnl();
		if( ret < 0 )
		{
			WriteLog( ERR_LVL, "插入冲正流水表失败!" );
			errcode = 99999;	
			strcpy( err_msg, "插入冲正流水表失败!" );
			PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode, 0 );
			PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
		}
		return ( -1 );
	}

	memset( cfgfile, 0x00, sizeof( cfgfile ) );
	sprintf( cfgfile, "%s/etc/%s", getenv( "HOME" ), "xml700.cfg" );
	WriteLog( APP_LVL, "cfgfile[%s]\n", cfgfile );
	
	memset( xmlinput, 0x00, sizeof( xmlinput ) );
	sprintf( xmlinput, "%s/print/NETBANK/TOPB/%s", getenv( "HOME" ), xmlinputfilename );
	WriteLog( APP_LVL, "xmlinput[%s]\n", xmlinput );
	
	memset( txtfile, 0x00, sizeof( txtfile ) );
	sprintf( txtfile, "%s/print/NETBANK/TOPB/PB%s%s.txt", getenv( "HOME" ), "CBS0000211", tran_time );
	WriteLog( APP_LVL, "txtfile[%s]\n", txtfile );

	memset( cmd, 0x00, sizeof(cmd) );
	sprintf( cmd, "XmlExchTxt 1 %s CBS0000210 %s %s UTF-8 1>null 2>&1", cfgfile, xmlinput, txtfile );
	WriteLog( APP_LVL, "cmd[%s]\n", cmd );
	ret = system( cmd );
	if( ret )
	{
		WriteLog( ERR_LVL, "xml文件转换出错!" );
		errcode = 99999;
		sprintf( err_msg, "xml文件转换出错!" );
		PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode, 0 );
		PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
		/***冲正已记成功的客户帐***/
		ret = NetBank_PL_InsRevJnl();
		if( ret < 0 )
		{
			WriteLog( ERR_LVL, "插入冲正流水表失败!" );
			errcode = 99999;	
			strcpy( err_msg, "插入冲正流水表失败!" );
			PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode, 0 );
			PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
		}
		return ( -1 );
	}
	/**
	sprintf( txtfile, "%s/%s/%s.txt", getenv( "HOME" ), "priv/djz/ibmq", "CBS0000210" );
	**/
	WriteLog( APP_LVL, "txtfile[%s]\n", txtfile );
	fp = fopen( txtfile, "r" );
	if( fp == NULL )
	{
		WriteLog( ERR_LVL, "打开txtfile[%s]文件失败!", txtfile );
		errcode = 99999;
		sprintf( err_msg, "打开txtfile[%s]文件失败!", txtfile );
		PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode, 0 );
		PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
		/***冲正已记成功的客户帐***/
		ret = NetBank_PL_InsRevJnl();
		if( ret < 0 )
		{
			WriteLog( ERR_LVL, "插入冲正流水表失败!" );
			errcode = 99999;	
			strcpy( err_msg, "插入冲正流水表失败!" );
			PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode, 0 );
			PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
		}
		return ( -1 );
	}
	/***从文件中读取第6行数据***/
	for( i = 0; i < 5; i++ )
	{
		memset( buff, 0x00, sizeof( buff ) );
		fgets( buff, sizeof( buff ), fp );
		WriteLog( APP_LVL, "buff[%s]\n", buff );
	}
	
	memset( buff, 0x00, sizeof( buff ) );
	p = fgets( buff, sizeof( buff ), fp );
	if( p == NULL )
	{
		WriteLog( ERR_LVL, "读取txtfile[%s]文件出错!", txtfile );
		errcode = 99999;
		sprintf( err_msg, "读取txtfile[%s]文件出错!", txtfile );
		PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode, 0 );
		PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
		fclose( fp );
		/***冲正已记成功的客户帐***/
		ret = NetBank_PL_InsRevJnl();
		if( ret < 0 )
		{
			WriteLog( ERR_LVL, "插入冲正流水表失败!" );
			errcode = 99999;	
			strcpy( err_msg, "插入冲正流水表失败!" );
			PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode, 0 );
			PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
		}
		return ( -1 );
	}
	WriteLog( APP_LVL, "buff[%s]\n", buff );
	
	/***
	strcpy( btchNb, strtok( buff, "|" ) );
	WriteLog( APP_LVL, "btchNb[%s]\n", btchNb );
	strcpy( btchNm, strtok( NULL, "|" ) );
	WriteLog( APP_LVL, "btchNm[%s]\n", btchNm );
	strcpy( operTyp, strtok( NULL, "|" ) );
	WriteLog( APP_LVL, "operTyp[%s]\n", operTyp );
	totalQnt = atol( strtok( NULL, "|" ) );
	WriteLog( APP_LVL, "totalQnt[%d]\n", totalQnt );
	totalAmt = atof( strtok( NULL, "|" ) );
	WriteLog( APP_LVL, "totalAmt[%f]\n", totalAmt );
	strcpy( currencyTyp, strtok( NULL, "|" ) );
	WriteLog( APP_LVL, "currencyTyp[%s]\n", currencyTyp );
	strcpy( cashFlg, strtok( NULL, "|" ) );
	WriteLog( APP_LVL, "cashFlg[%s]\n", cashFlg );
	strcpy( payAcct, strtok( NULL, "|" ) );
	WriteLog( APP_LVL, "payAcct[%s]\n", payAcct );
	strcpy( payCustNm, strtok( NULL, "|" ) );
	WriteLog( APP_LVL, "payCustNm[%s]\n", payCustNm );
	strcpy( remarkCd, strtok( NULL, "|" ) );
	WriteLog( APP_LVL, "remarkCd[%s]\n", remarkCd );
	strcpy( remark, strtok( NULL, "|" ) );
	WriteLog( APP_LVL, "remark[%s]\n", remark );
	strcpy( backup1, strtok( NULL, "|" ) );
	WriteLog( APP_LVL, "backup1[%s]\n", backup1 );
	strcpy( backup2, strtok( NULL, "|" ) );
	WriteLog( APP_LVL, "backup2[%s]\n", backup2 );
	strcpy( backup3, strtok( NULL, "|" ) );
	WriteLog( APP_LVL, "backup3[%s]\n", backup3 );
	***/
	j = 0;
	while( 1 )
	{
		if( j > 50 )
		{
			WriteLog( ERR_LVL, "解包错，防止死循环!\n" );
			errcode = 99999;
			PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode, 0 );
			PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
			/***冲正已记成功的客户帐***/
			ret = NetBank_PL_InsRevJnl();
			if( ret < 0 )
			{
				WriteLog( ERR_LVL, "插入冲正流水表失败!" );
				errcode = 99999;	
				strcpy( err_msg, "插入冲正流水表失败!" );
				PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode, 0 );
				PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
			}
			fclose( fp );
			return (-1);
		}
		p = strchr( buff, '|' );
		if( p == NULL )
		{
			break;
		}
		else
		{
			memset( tmp_str[j], 0x00, sizeof( tmp_str[j] ) );
			q = buff;
			strncpy( tmp_str[j], buff, p - q );
			WriteLog( APP_LVL, "tmp_str[%s]j[%ld]", tmp_str[j], j );
			strcpy( buff, p + 1 );
			j ++;
			continue;
		}
	}
	
	strcpy( btchNb, tmp_str[0] );
	rtrim( btchNb );
	WriteLog( APP_LVL, "btchNb[%s]\n", btchNb );
	strcpy( btchNm, tmp_str[1] );
	rtrim( btchNm );
	WriteLog( APP_LVL, "btchNm[%s]\n", btchNm );
	strcpy( operTyp, tmp_str[2] );
	rtrim( operTyp );
	WriteLog( APP_LVL, "operTyp[%s]\n", operTyp );
	
	totalQnt = atol( tmp_str[3]);
	WriteLog( APP_LVL, "totalQnt[%d]\n", totalQnt );
	totalAmt = atof( tmp_str[4] );
	WriteLog( APP_LVL, "totalAmt[%f]\n", totalAmt );
	
	strcpy( currencyTyp, tmp_str[5] );
	rtrim( currencyTyp );
	WriteLog( APP_LVL, "currencyTyp[%s]\n", currencyTyp );
	strcpy( cashFlg, tmp_str[6] );
	rtrim( cashFlg );
	WriteLog( APP_LVL, "cashFlg[%s]\n", cashFlg );
	strcpy( payAcct, tmp_str[7] );
	rtrim( payAcct );
	WriteLog( APP_LVL, "payAcct[%s]\n", payAcct );
	strcpy( payCustNm, tmp_str[8] );
	rtrim( payCustNm );
	WriteLog( APP_LVL, "payCustNm[%s]\n", payCustNm );
	strcpy( remarkCd, tmp_str[9] );
	rtrim( remarkCd );
	WriteLog( APP_LVL, "remarkCd[%s]\n", remarkCd );
	strcpy( remark, tmp_str[10] );
	rtrim( remark );
	WriteLog( APP_LVL, "remark[%s]\n", remark );
	strcpy( backup1, tmp_str[11] );
	rtrim( backup1 );
	WriteLog( APP_LVL, "backup1[%s]\n", backup1 );
	strcpy( backup2, tmp_str[12] );
	rtrim( backup2 );
	WriteLog( APP_LVL, "backup2[%s]\n", backup2 );
	strcpy( backup3, tmp_str[13] );
	rtrim( backup3 );
	WriteLog( APP_LVL, "backup3[%s]\n", backup3 );
	
	
	fclose( fp );
	/***读取文件完成***/

	/*  Added by Ma Shaojie - 20120530 */
	memset( updCustNm, 0, sizeof( updCustNm ) );
	memset( updPayAcct, 0, sizeof( updPayAcct ) );
	strcpy( updCustNm, payCustNm );
	strcpy( updPayAcct, payAcct );
	updAmt = totalAmt;
	WriteLog( ERR_LVL, "updCustNm[%s] updPayAcct[%s] updAmt[%f]", updCustNm, updPayAcct, updAmt );
	/* Adding End - 20120530 */

	TotalAmt = totalAmt;
	TotalNum = totalQnt;
	if( TotalNum > 10000 )
	{
		WriteLog( ERR_LVL, "总笔数超过10000笔" );
		errcode = 99999;
		strcpy( err_msg, "总笔数超过10000笔!" );
		PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode, 0 );
		PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
		/***冲正已记成功的客户帐***/
		ret = NetBank_PL_InsRevJnl();
		if( ret < 0 )
		{
			WriteLog( ERR_LVL, "插入冲正流水表失败!" );
			errcode = 99999;	
			strcpy( err_msg, "插入冲正流水表失败!" );
			PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode, 0 );
			PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
		}
		return ( -1 );
	}
	EXEC SQL SELECT * INTO :AgtMgmt
		FROM t_sc_agt_bat_item_mgmt
		WHERE batch_no = :backup2;
	/*	AND inst_no = :InstNo;*/
	if( sqlca.sqlcode )
	{
		WriteLog( ERR_LVL, "查询批量项目配置表失败!batch_no[%s]inst_no[%s]\n", backup2, InstNo );
		errcode = 99999;
		strcpy( err_msg, "查询批量项目配置表失败!" );
		PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode, 0 );
		PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
		/***冲正已记成功的客户帐***/
		ret = NetBank_PL_InsRevJnl();
		if( ret < 0 )
		{
			WriteLog( ERR_LVL, "插入冲正流水表失败!" );
			errcode = 99999;	
			strcpy( err_msg, "插入冲正流水表失败!" );
			PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode, 0 );
			PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
		}
		return (-1);
	}
	strcpy( InstNo, AgtMgmt.inst_no );
	/***柜员用代理柜员***/
	PutPoolDataByName( "ABSHEAD", "organ_no", 0, 0, InstNo, 0 );
	rtrim( InstNo );
	/***检查转出账号是否同批量项目配置表中的一样***
	trim( payAcct );
	trim( AgtMgmt.head_glac );
	if( strcmp( payAcct, AgtMgmt.head_glac ) != 0 )
	{
		WriteLog( ERR_LVL, "转出账号与配置不一致payAcct[%s]head_glac[%s]!\n", payAcct, AgtMgmt.head_glac );
		errcode = 99999;
		strcpy( err_msg, "转出账号与配置不一致!" );
		PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode, 0 );
		PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
		***冲正已记成功的客户帐***
		ret = NetBank_PL_InsRevJnl();
		if( ret < 0 )
		{
			WriteLog( ERR_LVL, "插入冲正流水表失败!" );
			errcode = 99999;	
			strcpy( err_msg, "插入冲正流水表失败!" );
			PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode, 0 );
			PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
		}
		return (-1);
	}
	***/
	/***检查操作类型***/
	trim( AgtMgmt.deputize_id );
	trim( operTyp );
	if( strlen( operTyp ) != 0 )
	{
		if( operTyp[0] != '1' || AgtMgmt.deputize_id[0] != '2' )
		{
			WriteLog( ERR_LVL, "操作类型有误opertype[%s]deputize_id[%s]!\n", operTyp, AgtMgmt.deputize_id );
			errcode = 99999;
			strcpy( err_msg, "操作类型有误!" );
			PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode, 0 );
			PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
			/***冲正已记成功的客户帐***/
			ret = NetBank_PL_InsRevJnl();
			if( ret < 0 )
			{
				WriteLog( ERR_LVL, "插入冲正流水表失败!" );
				errcode = 99999;	
				strcpy( err_msg, "插入冲正流水表失败!" );
				PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode, 0 );
				PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
			}
			return (-1);
		}
	}

	/***检查币种和钞汇标志***/
	trim( currencyTyp );
	trim( cashFlg );
	trim( AgtMgmt.curr_type );
	trim( AgtMgmt.cash_id );
	if( strcmp( AgtMgmt.curr_type, "01" ) != 0 )
	{
		WriteLog( ERR_LVL, "币种配置有误curr_type[%s]!\n", AgtMgmt.curr_type );
		errcode = 99999;
		strcpy( err_msg, "币种配置有误!" );
		PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode, 0 );
		PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
		/***冲正已记成功的客户帐***/
		ret = NetBank_PL_InsRevJnl();
		if( ret < 0 )
		{
			WriteLog( ERR_LVL, "插入冲正流水表失败!" );
			errcode = 99999;	
			strcpy( err_msg, "插入冲正流水表失败!" );
			PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode, 0 );
			PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
		}
		return (-1);
	}
	if( strlen( currencyTyp ) != 0 )
	{
		if( strcmp( currencyTyp, "CNY" ) != 0 )
		{
			WriteLog( ERR_LVL, "币种输入有误currencyTyp[%s]!\n", currencyTyp );
			errcode = 99999;
			strcpy( err_msg, "币种输入有误!" );
			PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode, 0 );
			PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
			/***冲正已记成功的客户帐***/
			ret = NetBank_PL_InsRevJnl();
			if( ret < 0 )
			{
				WriteLog( ERR_LVL, "插入冲正流水表失败!" );
				errcode = 99999;	
				strcpy( err_msg, "插入冲正流水表失败!" );
				PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode, 0 );
				PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
			}
			return (-1);
		}
	}

	/***因本币不区分钞汇标志，所以不需检查
	if( strlen( cashFlg ) != 0 )
	{
		if( strcmp( cashFlg, AgtMgmt.cash_id ) != 0 )
		{
			WriteLog( ERR_LVL, "钞汇标志与配置不一致cashFlg[%s]cash_id[%s]!\n", cashFlg, AgtMgmt.cash_id );
			errcode = 99999;
			strcpy( err_msg, "钞汇标志与配置不一致!" );
			PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode, 0 );
			PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
			***冲正已记成功的客户帐***
			ret = NetBank_PL_InsRevJnl();
			if( ret < 0 )
			{
				WriteLog( ERR_LVL, "插入冲正流水表失败!" );
				errcode = 99999;	
				strcpy( err_msg, "插入冲正流水表失败!" );
				PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode, 0 );
				PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
			}
			return (-1);
		}
	}
	***/

	/***检查摘要码与摘要内容***
	rtrim( remarkCd );
	rtrim( remark );
	rtrim( AgtMgmt.summ_no);
	rtrim( AgtMgmt.summ_note);
	if( strlen( remarkCd ) != 0 )
	{
		if( strcmp( remarkCd, AgtMgmt.summ_no ) != 0 || strcmp( remark, AgtMgmt.summ_note ) != 0 )
		{
			WriteLog( ERR_LVL, "摘要码或摘要内容与配置不一致remarkCd[%s]remark[%s]summ_no[%s]summ_note[%s]\n", remarkCd, remark, AgtMgmt.summ_no, AgtMgmt.summ_note );
			errcode = 99999;
			strcpy( err_msg, "摘要码或摘要内容与配置不一致!" );
			PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode, 0 );
			PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
			***冲正已记成功的客户帐***
			ret = NetBank_PL_InsRevJnl();
			if( ret < 0 )
			{
				WriteLog( ERR_LVL, "插入冲正流水表失败!" );
				errcode = 99999;	
				strcpy( err_msg, "插入冲正流水表失败!" );
				PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode, 0 );
				PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
			}
			return (-1);
		}
	}
	**/

	/*查询批量配置表*/
	memset( &ParaMgmt, 0, sizeof( ParaMgmt ) );
	EXEC SQL SELECT * INTO :ParaMgmt
		FROM t_sc_agt_para_mgmt
		WHERE batch_no = :backup2;
	/*	AND inst_no = :InstNo;*/
	if( sqlca.sqlcode )
	{
		WriteLog( ERR_LVL, "查询批量配置表失败!\n" );
		errcode = 99999;
		strcpy( err_msg, "查询批量配置表失败!" );
		PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode, 0 );
		PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
		/***冲正已记成功的客户帐***/
		ret = NetBank_PL_InsRevJnl();
		if( ret < 0 )
		{
			WriteLog( ERR_LVL, "插入冲正流水表失败!" );
			errcode = 99999;	
			strcpy( err_msg, "插入冲正流水表失败!" );
			PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode, 0 );
			PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
		}
		return (-1);
	}
	
	/***检查转出账号是否同批量项目配置表中的一样***/
	rtrim( payAcct );
	rtrim( ParaMgmt.com_acc );
	if( strcmp( payAcct, ParaMgmt.com_acc ) != 0 )
	{
		WriteLog( ERR_LVL, "转出账号与配置不一致payAcct[%s]com_acc[%s]!\n", payAcct, ParaMgmt.com_acc );
		errcode = 99999;
		strcpy( err_msg, "转出账号与配置不一致!" );
		PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode, 0 );
		PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
		/***冲正已记成功的客户帐***/
		ret = NetBank_PL_InsRevJnl();
		if( ret < 0 )
		{
			WriteLog( ERR_LVL, "插入冲正流水表失败!" );
			errcode = 99999;	
			strcpy( err_msg, "插入冲正流水表失败!" );
			PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode, 0 );
			PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
		}
		return (-1);
	}
	
	/***生成统一格式文件***/
	memset( BatchNo, 0, sizeof( BatchNo ) );
	strncpy( BatchNo, backup2, 10 );
	ret = gen_reg_file_snd( txtfile );
	if( ret < 0 )
	{
		WriteLog( ERR_LVL, "生成统一格式文件错!\n" );
		errcode = 99999;
		strcpy( err_msg, "生成统一格式文件错!" );
		PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode, 0 );
		PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
		/***冲正已记成功的客户帐***/
		ret = NetBank_PL_InsRevJnl();
		if( ret < 0 )
		{
			WriteLog( ERR_LVL, "插入冲正流水表失败!" );
			errcode = 99999;	
			strcpy( err_msg, "插入冲正流水表失败!" );
			PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode, 0 );
			PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
		}
		return (-1);
	}

	/*更新网银流水表
	strncpy( net_dtl.seqno, Hostseqno, 10 );
	strcpy( net_dtl.chnlseqno, btchNb );	
	strcpy( net_dtl.trantime, tran_time );	
	strcpy( net_dtl.outtrancode, "CBS0000210" );
	strcpy( net_dtl.midtrancode, "" );
	**/
	strcpy( net_dtl.batchno, BatchNo );
	strcpy( net_dtl.instno, InstNo );
	strcpy( net_dtl.hopedate, net_dtl.trandate );
	net_dtl.agt_num = BATCHNO;
	strcpy( net_dtl.btchnb, btchNb );
    strcpy( net_dtl.remarkcd, AgtMgmt.summ_no );
    strcpy( net_dtl.remark, AgtMgmt.summ_note );
    strcpy( net_dtl.backup1, backup1 );
    strcpy( net_dtl.backup2, backup2 );
    strcpy( net_dtl.backup3, backup3 );
	
	/**
	strcpy( net_dtl.custno, "" );
	strcpy( net_dtl.cardacctflag, "2" );
	strcpy( net_dtl.acc, rcvAcct );
	strcpy( net_dtl.payacc, payAcct );
	strcpy( net_dtl.paycurrtype, currencyTyp );
	strcpy( net_dtl.paycashflag, cashFlg );
	strcpy( net_dtl.paycustname, payCustNm );
	strcpy( net_dtl.payopeninst, "" );
	strcpy( net_dtl.payopenname, "" );
	strcpy( net_dtl.transchnl, "" );
	strcpy( net_dtl.fastflag, "" );
	strcpy( net_dtl.manualflag, "" );
	strcpy( net_dtl.rcvacc, rcvAcct );
	strcpy( net_dtl.rcvcustname, rcvCustNm );
	strcpy( net_dtl.rcvopeninst, "" );
	strcpy( net_dtl.rcvopenname, "" );
	net_dtl.transamt = 0.00;
	strcpy( net_dtl.feeflag, "" );
	net_dtl.fee = 0.00;
	strcpy( net_dtl.transtats, "" );
	strcpy( net_dtl.result, "" );
	strcpy( net_dtl.use, "" );
	strcpy( net_dtl.note, "" );
	strcpy( net_dtl.backup4, "" );
	strcpy( net_dtl.backup5, "" );
	strcpy( net_dtl.backup6, "" );
	strcpy( net_dtl.backup7, "" );
	strcpy( net_dtl.backup8, "" );
	strcpy( net_dtl.backup9, "" );
	strcpy( net_dtl.backup10, "" );
	**/
	
	/* Modified by MSJ 20121226 - Start */
	memset ( &acc_info, 0x00, sizeof(acc_info) );
	ret = PayGetAccInfo( updPayAcct, &acc_info);
	if( ret < 0 )
	{
		WriteLog ( ERR_LVL, "取帐号信息错[%s]", updPayAcct );
		errcode = 99999;
		strcpy( err_msg, "取帐号信息错!" );
		PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode, 0 );
		PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
		/***冲正已记成功的单位帐***/
		ret = NetBank_PL_InsRevJnl();
		if( ret < 0 )
		{
			WriteLog( ERR_LVL, "插入冲正流水表失败!" );
			errcode = 99999;	
			strcpy( err_msg, "插入冲正流水表失败!" );
			PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode, 0 );
			PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
		}
		return (-1);
	}
	memset( updInstno, 0x00, sizeof(updInstno) );
	trim( acc_info.inst_no );
	strcpy( updInstno, acc_info.inst_no );

	/***发起柜台批量***/
	ret = reg_to_server_snd();
	if( ret==-13 )
	{
		WriteLog( ERR_LVL, "批量通讯超时，状态未知!\n" );
		errcode = 99999;
		strcpy( err_msg, "通讯超时，状态未知，请检查账户余额!" );
		PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode, 0 );
		PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
		/***不冲正已记成功的单位帐***
		ret = NetBank_PL_InsRevJnl();
		if( ret < 0 )
		{
			WriteLog( ERR_LVL, "插入冲正流水表失败!" );
			errcode = 99999;	
			strcpy( err_msg, "插入冲正流水表失败!" );
			PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode, 0 );
			PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
		}
		return (-1);***/
		i_flag=-13;
	}
	else if( ret==-1 )
	{
		WriteLog( ERR_LVL, "转柜台批量处理时错!\n" );
		errcode = 99999;
		strcpy( err_msg, "转柜台批量处理时错!" );
		PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode, 0 );
		PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
		/***冲正已记成功的客户帐***/
		ret = NetBank_PL_InsRevJnl();
		if( ret < 0 )
		{
			WriteLog( ERR_LVL, "插入冲正流水表失败!" );
			errcode = 99999;	
			strcpy( err_msg, "插入冲正流水表失败!" );
			PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode, 0 );
			PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
		}
		/**
		return (-1);
		**/
		i_flag=-1;
	}

	EXEC SQL UPDATE t_pb_net_dtl
		SET batchno = :net_dtl.batchno,
			instno = :net_dtl.instno,
			hopedate = :net_dtl.hopedate,
            agt_num = :net_dtl.agt_num,
            btchnb = :net_dtl.btchnb,
            remarkcd = :net_dtl.remarkcd,
            remark = :net_dtl.remark,
            backup1 = :net_dtl.backup1,
            backup2 = :net_dtl.backup2,
            backup3 = :net_dtl.backup3,
			transtats[4,4] = '0',
			/* Added by MSJ - 20120523 */
			transamt = :updAmt,
			paycustname = :updCustNm,
			payacc = :updPayAcct,
			payinstno = :updInstno
			/* 20120523 - end */
        WHERE trandate = :net_dtl.trandate
        AND seqno = :net_dtl.seqno;
    if( SQLCODE || sqlca.sqlerrd[2] != 1 )
    {
        WriteLog( ERR_LVL, "更新网银流水表出错!\n" );
        errcode = 99999;
		strcpy( err_msg, "更新网银流水表出错!" );
		PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode, 0 );
		PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
        return (-1);
    }
    if( i_flag<0 )
    {
        WriteLog( ERR_LVL, "更新网银流水表完成[%d]!\n", i_flag );
        return (-1);
    }
	/* 20121226 - End */

	PutPoolDataByName( "BUSIIB", "hostSeqNb", 0, 0, Hostseqno, 0 );
	
	return ( 0 );
}

int 
reg_to_server_snd()
{
	EXEC SQL BEGIN DECLARE SECTION;
	char idflag[1+1];
	long fmldata;
	EXEC SQL END DECLARE SECTION;

	FBFR32 *sendbuf, *recvbuf;		/*FML32 上下传缓冲包*/
	long RcvLen = 0;				/*FML--TPCALL 返回时接收长度*/
	int rval;
	int i;
	long agt_num = 0;
	long hoststat = 1;
	char hostmsg[80+1];

	char getstr[50+1];				/*WSNADDR env*/
	char putstr[50+1];				/*WSNADDR env*/
	char _SendFile[1024+1];

	char AGTMAINSERVER[20+1];		/*批量主控SERVER*/

	FML_TRAN_STRUCT fml_tran_head, fml_tran_rec;
	long pbsave = 0;
	long port = 0;

	memset( Hostseqno, 0, sizeof( Hostseqno ) );
	memset( hostmsg, 0, sizeof( hostmsg ) );
	memset( _SendFile, 0, sizeof( _SendFile ) );

	/**
	get_TTseqno( Hostseqno );
	**/
	GetPoolDataByName( "ABSHEAD", "_seq_no", 0, 0, Hostseqno, 0);
	WriteLog( ERR_LVL, "Hostseqno[%s]\n", Hostseqno );
	/* 对上传包公共包头赋值 */
	memset( &FrontBuff, 0x00, sizeof( FrontBuff ) );
	strcpy( FrontBuff.AreaNo, "000000" );		/*区域号*/
	strcpy( FrontBuff.ChnlNo, "001" );			/*渠道号*/
	FrontBuff.Save = '1';						/*FML包标志*/

	memset( AGTMAINSERVER, 0x00, sizeof( AGTMAINSERVER ) );

	strcpy( FrontBuff.FTranCode, "6250" );		/*外部交易码*/
	strcpy( AGTMAINSERVER, "FmlAdt" );

	/*初始化公共包头PBHEAD(0000)*/
	memset( &fml_tran_head, 0x00, sizeof( fml_tran_head ) );
	rval = GetFmlTran( FrontBuff.AreaNo, FrontBuff.ChnlNo, "0000", '0', &fml_tran_head );
	if( rval < 0 )
	{
		WriteLog( ERR_LVL, "GetFmlTran(0000) Fail ret [%d]", rval );
		return (-1);
	}

	/*初始化交易包*/
	memset( &fml_tran_rec, 0x00, sizeof( fml_tran_rec ) );
	rval = GetFmlTran( FrontBuff.AreaNo, FrontBuff.ChnlNo, FrontBuff.FTranCode, '0', &fml_tran_rec );
	if( rval < 0 )
	{
		WriteLog(ERR_LVL, "GetFmlTran(%s) Fail ret [%d] ", FrontBuff.FTranCode, rval );
		return ( -1 );
	}
	
	/*分配FML缓冲池*/
	sendbuf = (FBFR32 *)tpalloc( "FML32", NULL, PACKDATA_LEN + 1 );
	if( sendbuf == NULL )
	{
		WriteLog( ERR_LVL, "Tpalloc sendbuf failed!" );
		/* tpfree( (char *)sendbuf ); */
		return ( -1 );
	}
	rval = Finit32( sendbuf, (FLDLEN32)Fsizeof(sendbuf) );

	recvbuf = (FBFR32 *)tpalloc( "FML32", NULL, PACKDATA_LEN + 1 );
	if( recvbuf == NULL )
	{
		WriteLog( ERR_LVL, "Tpalloc recvbuf failed!" );
		tpfree( (char *) sendbuf );
		/* tpfree( (char *) recvbuf ); */
		return ( -1 );
	}
	rval = Finit32( recvbuf, (FLDLEN32)Fsizeof( recvbuf ) );

	/*为请求交易公共包头赋值*/
	WriteLog( APP_LVL, "fml_tran_head.FldNum=[%ld]", fml_tran_head.FldNum );
	for( i = 0; i < fml_tran_head.FldNum; i++ )
	{
		if( strncmp( fml_tran_head.Flds[i].TranFldName, "tran_flag", 10 ) == 0 )
		{
			WriteLog( APP_LVL, "fld. = [%d][%s] ", fml_tran_head.Flds[i].FldFmlId, fml_tran_head.Flds[i].TranFldName );
			fmldata = 0;
			Fchg32( sendbuf, fml_tran_head.Flds[i].FldFmlId, 0, ( char * )&fmldata, NULL );
		}
		if( strncmp( fml_tran_head.Flds[i].TranFldName, "chnl_no", 10 ) == 0 )
		{
			WriteLog( APP_LVL, "fld. = [%d][%s] ", fml_tran_head.Flds[i].FldFmlId, fml_tran_head.Flds[i].TranFldName );
			Fchg32( sendbuf, fml_tran_head.Flds[i].FldFmlId, 0, "0", NULL );
		}
		if( strncmp( fml_tran_head.Flds[i].TranFldName, "_tx_op_stat", 10 ) == 0 )
		{
			WriteLog( APP_LVL, "fld. = [%d][%s] ", fml_tran_head.Flds[i].FldFmlId, fml_tran_head.Flds[i].TranFldName );
			Fchg32( sendbuf, fml_tran_head.Flds[i].FldFmlId, 0, "N", NULL );
		}
		if( strncmp( fml_tran_head.Flds[i].TranFldName, "organ_no", 10 ) == 0 )
		{
			WriteLog( ERR_LVL, "InstNo[%s]\n", InstNo );
			WriteLog( APP_LVL, "fld. = [%d][%s] ", fml_tran_head.Flds[i].FldFmlId, fml_tran_head.Flds[i].TranFldName );
			Fchg32( sendbuf, fml_tran_head.Flds[i].FldFmlId, 0, InstNo, NULL );
		}
		if( strncmp( fml_tran_head.Flds[i].TranFldName, "query_inst", 10 ) == 0 )
		{
			WriteLog( APP_LVL, "fld. = [%d][%s] ", fml_tran_head.Flds[i].FldFmlId, fml_tran_head.Flds[i].TranFldName );
			Fchg32( sendbuf, fml_tran_head.Flds[i].FldFmlId, 0, InstNo, NULL );
		}
		if( strncmp( fml_tran_head.Flds[i].TranFldName, "_seq_no", 10 ) == 0 )
		{
			WriteLog( APP_LVL, "fld. = [%d][%s] ", fml_tran_head.Flds[i].FldFmlId, fml_tran_head.Flds[i].TranFldName );
			Fchg32( sendbuf, fml_tran_head.Flds[i].FldFmlId, 0, Hostseqno, NULL );
		}
		if( strncmp( fml_tran_head.Flds[i].TranFldName, "_tlr_no", 10 ) == 0 )
		{
			WriteLog( APP_LVL, "fld. = [%d][%s] ", fml_tran_head.Flds[i].FldFmlId, fml_tran_head.Flds[i].TranFldName );
			Fchg32( sendbuf, fml_tran_head.Flds[i].FldFmlId, 0, TlrNo, NULL );
		}
		if( strncmp( fml_tran_head.Flds[i].TranFldName, "_tx_code", 10 ) == 0 )
		{
			WriteLog( APP_LVL, "fld. = [%d][%s] ", fml_tran_head.Flds[i].FldFmlId, fml_tran_head.Flds[i].TranFldName );
			Fchg32( sendbuf, fml_tran_head.Flds[i].FldFmlId, 0, "6250", NULL );
		}

		/*filename*/
		if( strncmp( fml_tran_head.Flds[i].TranFldName, "send_filename", 13 ) == 0 )
		{
			memset( _SendFile, 0x00, sizeof( _SendFile ) );
			rtrim( BatchNo );
			rtrim( InstNo );
			rtrim( AccDate );
			sprintf( _SendFile, "%s%s%s%d.txt", BatchNo, InstNo, AccDate, BATCHNO );

			WriteLog( APP_LVL, "fld. = [%d][%s] ", fml_tran_head.Flds[i].FldFmlId, fml_tran_head.Flds[i].TranFldName );
			Fchg32( sendbuf, fml_tran_head.Flds[i].FldFmlId, 0, _SendFile, NULL );
		}
	}
	/***报文体赋值***/
	for( i = 0; i < fml_tran_rec.FldNum; i++ )
	{
		/* filename */
		if( strncmp( fml_tran_rec.Flds[i].TranFldName, "file_name", 9 ) == 0 )
		{
			memset( _SendFile, 0x00, sizeof( _SendFile ) );
			rtrim( BatchNo );
			rtrim( InstNo );
			rtrim( AccDate );
			sprintf( _SendFile, "%s%s%s%d.txt", BatchNo, InstNo, AccDate, BATCHNO );

			WriteLog( APP_LVL, "fld. = [%d][%s]", fml_tran_rec.Flds[i].FldFmlId, fml_tran_rec.Flds[i].TranFldName );
			Fchg32( sendbuf, fml_tran_rec.Flds[i].FldFmlId, 0, _SendFile, NULL );
		}
		/* batch_no */
		if( strncmp( fml_tran_rec.Flds[i].TranFldName, "batch_no", 8 ) == 0 )
		{
			WriteLog( APP_LVL, "fld. = [%d][%s]", fml_tran_rec.Flds[i].FldFmlId, fml_tran_rec.Flds[i].TranFldName );
			Fchg32( sendbuf, fml_tran_rec.Flds[i].FldFmlId, 0, BatchNo, NULL );
		}
		/* busiflag */
		if( strncmp( fml_tran_rec.Flds[i].TranFldName, "flag", 8 ) == 0 )
		{
			WriteLog( APP_LVL, "fld. = [%d][%s]", fml_tran_rec.Flds[i].FldFmlId, fml_tran_rec.Flds[i].TranFldName );
			WriteLog( APP_LVL, "TotalNum[%d]MAXNUM[%d]\n", TotalNum, AgtMgmt.max_num );
			if( TotalNum > AgtMgmt.max_num )
				Fchg32( sendbuf, fml_tran_rec.Flds[i].FldFmlId, 0, (char *)&ParaMgmt.agt_hostbatch_mode, NULL );
			else
				Fchg32( sendbuf, fml_tran_rec.Flds[i].FldFmlId, 0, "1", NULL );
		}
		/* agt_num */
		agt_num = BATCHNO;
		if( strncmp( fml_tran_rec.Flds[i].TranFldName, "rec_no", 7 ) == 0 )
		{
			WriteLog( APP_LVL, "agt_num[%d]\n", agt_num );
			WriteLog( APP_LVL, "fld. = [%d][%s]", fml_tran_rec.Flds[i].FldFmlId, fml_tran_rec.Flds[i].TranFldName );
			Fchg32( sendbuf, fml_tran_rec.Flds[i].FldFmlId, 0, (char *)&agt_num, NULL );
		}
		/* total_num */
		if( strncmp( fml_tran_rec.Flds[i].TranFldName, "rec_num", 9 ) == 0 )
		{
			WriteLog( APP_LVL, "fld. = [%d][%s]", fml_tran_rec.Flds[i].FldFmlId, fml_tran_rec.Flds[i].TranFldName );
			Fchg32( sendbuf, fml_tran_rec.Flds[i].FldFmlId, 0, (char *)&TotalNum, NULL );
		}
		/* idflag */
		memset( idflag, 0, sizeof( idflag ) );
		idflag[0] = '1';
		if( strncmp( fml_tran_rec.Flds[i].TranFldName, "prt_flag", 8 ) == 0 )
		{
			WriteLog( APP_LVL, "fld. = [%d][%s]", fml_tran_rec.Flds[i].FldFmlId, fml_tran_rec.Flds[i].TranFldName );
			Fchg32( sendbuf, fml_tran_rec.Flds[i].FldFmlId, 0, (char *)&idflag, NULL );		/*校验证件/户名标志*/
		}
		/* total_amount */
		if( strncmp( fml_tran_rec.Flds[i].TranFldName, "amt", 9 ) == 0 )
		{
			WriteLog( APP_LVL, "fld. = [%d][%s]", fml_tran_rec.Flds[i].FldFmlId, fml_tran_rec.Flds[i].TranFldName );
			Fchg32( sendbuf, fml_tran_rec.Flds[i].FldFmlId, 0, (char *)&TotalAmt, NULL );
		}
		/* hope_date */
		if( strncmp( fml_tran_rec.Flds[i].TranFldName, "acc_date", 9 ) == 0 )
		{
			WriteLog( APP_LVL, "fld. = [%d][%s]", fml_tran_rec.Flds[i].FldFmlId, fml_tran_rec.Flds[i].TranFldName );
			Fchg32( sendbuf, fml_tran_rec.Flds[i].FldFmlId, 0, (char *)&AccDate, NULL );
		}
		if( strncmp( fml_tran_rec.Flds[i].TranFldName, "check_point", 11 ) == 0 )
		{
			WriteLog( APP_LVL, "fld. = [%d][%s]", fml_tran_rec.Flds[i].FldFmlId, fml_tran_rec.Flds[i].TranFldName );
			Fchg32( sendbuf, fml_tran_rec.Flds[i].FldFmlId, 0, "", NULL );
		}
		if( strncmp( fml_tran_rec.Flds[i].TranFldName, "acc_type", 8 ) == 0 )
		{
			WriteLog( APP_LVL, "fld. = [%d][%s]", fml_tran_rec.Flds[i].FldFmlId, fml_tran_rec.Flds[i].TranFldName );
			Fchg32( sendbuf, fml_tran_rec.Flds[i].FldFmlId, 0, "9", NULL );
		}
		if( strncmp( fml_tran_rec.Flds[i].TranFldName, "sex", 3 ) == 0 )
		{
			WriteLog( APP_LVL, "fld. = [%d][%s]", fml_tran_rec.Flds[i].FldFmlId, fml_tran_rec.Flds[i].TranFldName );
			Fchg32( sendbuf, fml_tran_rec.Flds[i].FldFmlId, 0, "1", NULL );
		}
	}
	
	/*打印上传包*/
	PrtFmlDetail( sendbuf );

	/*发送到PB流程*/
	memset( getstr, 0, sizeof( getstr ) );
	strcpy( getstr, getenv( "WSNADDR" ) );
	WriteLog( TEST_LVL, "oldWSNADDR = [%s]", getstr );

	port = GetLocalTuxPort();

	memset( putstr, 0, sizeof( putstr ) );
	sprintf( putstr, "WSNADDR = %s%ld", "//127.0.0.1:", port );
	putenv( putstr );
	WriteLog( TEST_LVL, "newWSNADDR = [%s]", putstr );
	rval = tpcall( AGTMAINSERVER, (char *)sendbuf, 0, (char **)&recvbuf, &RcvLen, TPNOTRAN );
	if( rval < 0 )
	{
		if( tperrno == 13 )
		{
			WriteLog( ERR_LVL, "调TUXEDO服务[%s]超时", AGTMAINSERVER );
			WriteLog( ERR_LVL, "超时，录入柜台OK!" );
			hoststat = 0;
			tpfree( (char *)sendbuf );
			tpfree( (char *)recvbuf );
			tpterm();
			/* return (-1);  Modified by MSJ - 20121226 */
			return (-13);
		}else
		{
			WriteLog( ERR_LVL, "调用TUXEDO服务[%s]失败!!tperrno=[%d]%s[%s]", AGTMAINSERVER, tperrno, tpstrerror(tperrno), getenv("WSNADDR") );
			if( tperrno == 6 || tperrno == 10 )
			{
				WriteLog( ERR_LVL, "TUXEDO服务[%s]不存在或服务错!", AGTMAINSERVER );
				hoststat = 1;
			}
			tpfree( (char *)sendbuf );
			tpfree( (char *)recvbuf );
			tpterm();
			return (-1);
		}
	}
	else
	{
		WriteLog( TEST_LVL, "调用TUXEDO服务[%s]成功!!", AGTMAINSERVER );
	}
	memset( putstr, 0, sizeof( putstr ) );
	sprintf( putstr, "WSNADDR=%s", getstr );
	putenv( putstr );
	WriteLog( TEST_LVL, "resetWSNADDR = [%s]", putstr );

	memset( getstr, 0, sizeof( getstr ) );
	strcpy( getstr, getenv( "WSNADDR" ) );
	WriteLog( TEST_LVL, "finalWSNADDR = [%s]", getstr );

	/* 打印下传包 */
	PrtFmlDetail( recvbuf );

	memset( &fml_tran_head, 0x00, sizeof( fml_tran_head ) );
	rval = GetFmlTran( FrontBuff.AreaNo, FrontBuff.ChnlNo, "0000", '1', &fml_tran_head );
	if( rval < 0 )
	{
		WriteLog( ERR_LVL, "GetFmlTran(0000) Fail ret [%d]", rval );
		tpfree( (char *)sendbuf );
		tpfree( (char *)recvbuf );
		tpterm();
		return(-1);
	}

	WriteLog(DEBUG_LVL, "fml_tran_head.FldNum=[%ld]", fml_tran_head.FldNum);

	for( i = 0;i < fml_tran_head.FldNum; i++ )
	{
		if( strncmp( fml_tran_head.Flds[i].TranFldName, "_host_stat", 11 ) == 0 )
		{
			WriteLog( TEST_LVL, "fld. = [%d][%s] ", fml_tran_head.Flds[i].FldFmlId, fml_tran_head.Flds[i].TranFldName );
			Fget32( recvbuf, fml_tran_head.Flds[i].FldFmlId ,0 ,(char *)&hoststat, NULL );
		}
		if( strncmp( fml_tran_head.Flds[i].TranFldName, "_error_code", 12 ) == 0 )
		{
			WriteLog( TEST_LVL, "fld. = [%d][%s] ", fml_tran_head.Flds[i].FldFmlId, fml_tran_head.Flds[i].TranFldName );
			Fget32( recvbuf, fml_tran_head.Flds[i].FldFmlId ,0 ,(char *)&hostmsg, NULL );
		}
	}

	tpfree( (char *)sendbuf );
	tpfree( (char *)recvbuf );

	tpterm();

	if( hoststat != 0 )
	{
		WriteLog( ERR_LVL, "录入柜台批失败! " );
		WriteLog( ERR_LVL, "hoststat[%d],HostMsg[%s] ", hoststat, hostmsg );
		return ( -1 );
	}else
		WriteLog( APP_LVL, "录入柜台批OK!" );

	return (0);
}

int 
gen_reg_file_snd( char * txtfile )
{
	EXEC SQL BEGIN DECLARE SECTION;
	long cnt = 0;
	EXEC SQL END DECLARE SECTION;
	char dirname[100+1];
	char bat_file[100+1];
	char err_msg[256+1];
	
	/*文件相关变量值*/
	char btchNb[32+1];
	char btchNm[128+1];
	char operTyp[2+1];
	int totalQnt = 0;
	double totalAmt = 0.00;
	char currencyTyp[6+1];
	char cashFlg[2+1];
	char remarkCd[16+1];
	char remark[128+1];
	char backup1[128+1];
	char backup2[128+1];
	char backup3[128+1];
	char seqNb[32+1];
	char payAcct[32+1];
	char payCustNm[128+1];
	char rcvAcct[32+1];
	char rcvCustNm[128+1];
	double amt = 0.00;
	char memo[128+1];
	char buff[2048+1];
	char stmp[1024+1];
	char cmd[128+1];
	FILE *fp = NULL;
	char *p = NULL;
	char *q = NULL;
	char tmp_str[50][128+1];
	/*文件相关变量值*/

	FILE *fw = NULL;
	int ret = 0;
	int i = 0;
	long j = 0;
	double commission = 0.00;
	double old_amount = 0.00;
	double over_amount = 0.00;

	memset( dirname, 0, sizeof( dirname ) );
	memset( bat_file, 0, sizeof( bat_file ) );
	memset( err_msg, 0, sizeof( err_msg ) );
	memset( btchNb, 0, sizeof( btchNb ) );
	memset( btchNm, 0, sizeof( btchNm ) );
	memset( operTyp, 0, sizeof( operTyp ) );
	memset( currencyTyp, 0, sizeof( currencyTyp ) );
	memset( cashFlg, 0, sizeof( cashFlg ) );
	memset( remarkCd, 0, sizeof( remarkCd ) );
	memset( remark, 0, sizeof( remark ) );
	memset( backup1, 0, sizeof( backup1 ) );
	memset( backup2, 0, sizeof( backup2 ) );
	memset( backup3, 0, sizeof( backup3 ) );
	memset( seqNb, 0, sizeof( seqNb ) );
	memset( payAcct, 0, sizeof( payAcct ) );
	memset( payCustNm, 0, sizeof( payCustNm ) );
	memset( rcvAcct, 0, sizeof( rcvAcct ) );
	memset( rcvCustNm, 0, sizeof( rcvCustNm ) );
	memset( buff, 0, sizeof( buff ) );
	memset( stmp, 0, sizeof( stmp ) );
	memset( cmd, 0, sizeof( cmd ) );
	
	memset( memo, 0, sizeof( memo ) );
	
	/***设置批次号***/
	WriteLog( APP_LVL, "batch_no[%s],inst_no[%s],hope_date[%s]\n", BatchNo, InstNo, AccDate );
	/* Modified by MSJ 20121226 - Start */
	/**EXEC SQL SELECT max(agt_num), count(*) INTO :BATCHNO, :cnt
		FROM t_sc_agt_batch
		WHERE batch_no = :BatchNo
		AND inst_no = :InstNo
		AND hope_date = :AccDate;
	**/
	EXEC SQL SELECT max(agt_num), count(*) INTO :BATCHNO, :cnt
		FROM t_pb_net_dtl
		WHERE trandate= :AccDate
		AND batchno = :BatchNo
		AND instno = :InstNo
		AND hopedate = :AccDate;
	/* 20121226 - End */
	if( SQLCODE && SQLCODE != 100 )
	{
		WriteLog( ERR_LVL, "查询批次管理表失败!\n" );
		return (-1);
	}
	if( cnt == 0 )
	{
		BATCHNO = 1;
	}
	else
	{
		BATCHNO ++;
	}
	WriteLog( APP_LVL, "BATCHNO[%d],cnt[%d]\n", BATCHNO, cnt );
	
	sprintf( dirname, "%s/%c%c/%s", getenv("PRINTERDIR"), InstNo[0], InstNo[1], InstNo );
	sprintf( bat_file, "%s/%c%c/%s/%s%s%s%d.txt", getenv("PRINTERDIR"), InstNo[0], InstNo[1], InstNo, BatchNo, InstNo, AccDate, BATCHNO );
	WriteLog( APP_LVL, "trans filename = [%s] \n", bat_file );
	
	/***检查目录***/
	if( access( dirname, F_OK ) != 0 )
	{
		memset( cmd, 0x00, sizeof( cmd ) );
		sprintf( cmd, "mkdir -p -m755 %s 1>/dev/null 2>&1", dirname );
		ret = system( cmd );
		if( ret != 0 )
		{
			WriteLog( ERR_LVL, "新建目录[%s]失败!\n", dirname );
			return (-1);
		}
	}
	fw = fopen( bat_file, "w+" );
	if( fw == NULL )
	{
		WriteLog( ERR_LVL, "打开文件[%s]失败!\n", bat_file );
		return (-1);
	}
	
	rtrim( ParaMgmt.com_acc );
	rtrim( ParaMgmt.unit_name );
	rtrim( ParaMgmt.inst_no );
	rtrim( ParaMgmt.batch_no );
	rtrim( AgtMgmt.summ_no );
	rtrim( AgtMgmt.summ_note );
	WriteLog( APP_LVL, "ParaMgmt.com_acc = [%s]\n", ParaMgmt.com_acc );
	WriteLog( APP_LVL, "ParaMgmt.unit_name = [%s]\n", ParaMgmt.unit_name );
	WriteLog( APP_LVL, "ParaMgmt.inst_no = [%s]\n", ParaMgmt.inst_no );
	WriteLog( APP_LVL, "ParaMgmt.batch_no = [%s]\n", ParaMgmt.batch_no );
	WriteLog( APP_LVL, "AgtMgmt.summ_no = [%s]\n", AgtMgmt.summ_no );
	WriteLog( APP_LVL, "AgtMgmt.summ_note = [%s]\n", AgtMgmt.summ_note );
	WriteLog( APP_LVL, "TotalAmt = [%.2f]\n", TotalAmt );
	WriteLog( APP_LVL, "TotalNum = [%ld]\n", TotalNum );

	fprintf( fw, "%s|", ParaMgmt.com_acc );
	fprintf( fw, "%s|", ParaMgmt.unit_name );
	fprintf( fw, "%f|", TotalAmt );
	fprintf( fw, "|" );
	fprintf( fw, "%s|", ParaMgmt.inst_no );
	fprintf( fw, "%s|", AgtMgmt.summ_no );
	fprintf( fw, "%s|", AgtMgmt.summ_note );
	fprintf( fw, "%d|", TotalNum );
	if( AgtMgmt.deputize_id[0] == '1' )
	{
		fprintf( fw, "%c%c%c%c%c%c%c%c|", AgtMgmt.bat_flag[0], AgtMgmt.bat_flag[1], AgtMgmt.bat_flag[2], AgtMgmt.bat_flag[3], AgtMgmt.bat_flag[4], '0', AgtMgmt.bat_flag[6], AgtMgmt.bat_flag[7] );
	}
	else
	{
		fprintf( fw, "%c%c%c%c%c%c%c%c|", AgtMgmt.bat_flag[0], AgtMgmt.bat_flag[1], AgtMgmt.bat_flag[2], AgtMgmt.bat_flag[3], AgtMgmt.bat_flag[4], '1', AgtMgmt.bat_flag[6], AgtMgmt.bat_flag[7] );
	}
	fprintf( fw, "1234|" );
	fprintf( fw, "%s|\n", ParaMgmt.batch_no );

	/****
	账号-acc         | 户名-acc_name      | 金额-amount        |
	证件类型-id_type | 证件号-id_no       | 地址-addr          |
	客户号-cust_no   | 原始金额-old_amount| 滞纳金-over_amount |
	手续费-commission| 备用1-reserve1     | 备用2-reserve2     |
	MAC-mac          |       sum_seqno    |
	***************对应报文结构中的字段********************
	acc|acc_name|amount|id_type|id_no|addr|cust_no|old_amount|over_amount|
	commission|reserve1|reserve2|mac|\n
	rcvAcct|rcvCustNm|amt|||||0.00|0.00|0.00|backup1|backup2|||
	****/
	/***读取文件将需要的字段写入送到核心的文件***/
	WriteLog( APP_LVL, "txtfile = [%s]\n", txtfile );
	fp = fopen( txtfile, "r" );
	if( fp == NULL )
	{
		WriteLog( ERR_LVL, "打开文件[%s]失败!\n", txtfile );
		fclose( fw );
		return (-1);
	}
	for( i = 0; i < 5; i ++ )
	{
		memset( buff, 0x00, sizeof( buff ) );
		fgets( buff, sizeof( buff ), fp );
		WriteLog( APP_LVL, "buff = [%s]\n", buff );
	}
	memset( buff, 0x00, sizeof( buff ) );
	fgets( buff, sizeof( buff ), fp );
	WriteLog( APP_LVL, "buff = [%s]\n", buff );
	/***
	strcpy( btchNb, strtok( buff, "|" ) );
	strcpy( btchNm, strtok( NULL, "|" ) );
	strcpy( operTyp, strtok( NULL, "|" ) );
	totalQnt = atol( strtok( NULL, "|" ) );
	totalAmt = atof( strtok( NULL, "|" ) );
	strcpy( currencyTyp, strtok( NULL, "|" ) );
	strcpy( cashFlg, strtok( NULL, "|" ) );
	strcpy( payAcct, strtok( NULL, "|" ) );
	strcpy( payCustNm, strtok( NULL, "|" ) );
	strcpy( remarkCd, strtok( NULL, "|" ) );
	strcpy( remark, strtok( NULL, "|" ) );
	strcpy( backup1, strtok( NULL, "|" ) );
	strcpy( backup2, strtok( NULL, "|" ) );
	strcpy( backup3, strtok( NULL, "|" ) );
	***/
	j = 0;
    while( 1 )
    {
		if( j > 50 )
		{
			WriteLog( ERR_LVL, "解包错，防止死循环!\n" );
			fclose( fp );
			fclose( fw );
			return (-1);
		}
		p = strchr( buff, '|' );
		if( p == NULL )
		{
			break;
		}
		else
		{
			memset( tmp_str[j], 0x00, sizeof( tmp_str[j] ) );
			q = buff;
			strncpy( tmp_str[j], buff, p - q );
			WriteLog( APP_LVL, "tmp_str[%s]j[%ld]", tmp_str[j], j );
			strcpy( buff, p + 1 );
			j ++;
			continue;
		}
	}

	strcpy( btchNb, tmp_str[0] );
    rtrim( btchNb );
    strcpy( btchNm, tmp_str[1] );
    rtrim( btchNm );
    strcpy( operTyp, tmp_str[2] );
    rtrim( operTyp );

    totalQnt = atol( tmp_str[3]);
	totalAmt = atof( tmp_str[4] );

    strcpy( currencyTyp, tmp_str[5] );
    rtrim( currencyTyp );
    strcpy( cashFlg, tmp_str[6] );
    rtrim( cashFlg );
    strcpy( payAcct, tmp_str[7] );
    rtrim( payAcct );
    strcpy( payCustNm, tmp_str[8] );
    rtrim( payCustNm );
    strcpy( remarkCd, tmp_str[9] );
    rtrim( remarkCd );
    strcpy( remark, tmp_str[10] );
    rtrim( remark );
	strcpy( backup1, tmp_str[11] );
    rtrim( backup1 );
    strcpy( backup2, tmp_str[12] );
    rtrim( backup2 );
    strcpy( backup3, tmp_str[13] );
    rtrim( backup3 );
	
	WriteLog( APP_LVL, "btchNb = [%s]\n", btchNb );
	WriteLog( APP_LVL, "btchNm = [%s]\n", btchNm );
	WriteLog( APP_LVL, "operTyp = [%s]\n", operTyp );
	WriteLog( APP_LVL, "totalQnt = [%ld]\n", totalQnt );
	WriteLog( APP_LVL, "totalAmt = [%.2f]\n", totalAmt );
	WriteLog( APP_LVL, "currencyTyp = [%s]\n", currencyTyp );
	WriteLog( APP_LVL, "cashFlg = [%s]\n", cashFlg );
	WriteLog( APP_LVL, "payAcct = [%s]\n", payAcct );
	WriteLog( APP_LVL, "payCustNm = [%s]\n", payCustNm );
	WriteLog( APP_LVL, "remarkCd = [%s]\n", remarkCd );
	WriteLog( APP_LVL, "remark = [%s]\n", remark );
	WriteLog( APP_LVL, "backup1 = [%s]\n", backup1 );
	WriteLog( APP_LVL, "backup2 = [%s]\n", backup2 );
	WriteLog( APP_LVL, "backup3 = [%s]\n", backup3 );
	
	/**while( !feof( fp ) )**/
	memset( buff, 0x00, sizeof( buff ) );
	fgets( buff, sizeof( buff ), fp );
	WriteLog( APP_LVL, "buff = [%s]\n", buff );
	for( i = 7; i < 7 + totalQnt; i ++ )
	{
		memset( buff, 0x00, sizeof( buff ) );
		fgets( buff, sizeof( buff ), fp );
		/***
		strcpy( seqNb, strtok( buff, "|" ) );
		strcpy( rcvAcct, strtok( NULL, "|" ) );
		strcpy( rcvCustNm, strtok( NULL, "|" ) );
		amt = atof( strtok( NULL, "|" ) );
		strcpy( memo, strtok( NULL, "|" ) );
		***/
		j = 0;
		while( 1 )
		{
			if( j > 50 )
			{
				WriteLog( ERR_LVL, "解包错，防止死循环!\n" );
				fclose( fp );
				fclose( fw );
				return ( -1 );
			}
			p = strchr( buff, '|' );
			if( p == NULL )
			{
				break;
			}
			else
			{
				memset( tmp_str[j], 0x00, sizeof( tmp_str[j] ) );
				q = buff;
				strncpy( tmp_str[j], buff, p - q );
				WriteLog( APP_LVL, "tmp_str[%s]j[%ld]", tmp_str[j], j );
				strcpy( buff, p + 1 );
				j ++;
				continue;
			}
		}
		memset( seqNb, 0x00, sizeof( seqNb ) );
		strcpy( seqNb, tmp_str[0] );
		rtrim( seqNb );
		memset( rcvAcct, 0x00, sizeof( rcvAcct ) );
		strcpy( rcvAcct, tmp_str[1] );
		rtrim( rcvAcct );
		memset( rcvCustNm, 0x00, sizeof( rcvCustNm ) );
		strcpy( rcvCustNm, tmp_str[2] );
		rtrim( rcvCustNm );
		amt = atof( tmp_str[3] );
		memset( memo, 0x00, sizeof( memo ) );
		strcpy( memo, tmp_str[4] );
		rtrim( memo );
		/***写文件明细记录***/
		WriteLog( APP_LVL, "seqNb = [%s]\n", seqNb );
		WriteLog( APP_LVL, "rcvAcct = [%s]\n", rcvAcct );
		WriteLog( APP_LVL, "rcvCustNm = [%s]\n", rcvCustNm );
		WriteLog( APP_LVL, "amt = [%.2f]\n", amt );
		WriteLog( APP_LVL, "memo = [%s]\n", memo );
		
		/**
		trim( AgtMgmt.head_glac );
		trim( payAcct );
		if( strcmp( AgtMgmt.head_glac, payAcct ) != 0 )
		{
			WriteLog( ERR_LVL, "账号不一致，请检查输入head_glac[%s],payAcct[%s]i[%d]\n", AgtMgmt.head_glac, payAcct, i );
			return ( -1 );
		}
		**/

		fprintf( fw, "%s|", rcvAcct );
		fprintf( fw, "%s|", rcvCustNm );
		fprintf( fw, "%f|", amt );
		fprintf( fw, "%s|", "" );
		fprintf( fw, "%s|", "" );
		fprintf( fw, "%s|", "" );
		fprintf( fw, "%s|", "" );
		fprintf( fw, "%s|", old_amount );
		fprintf( fw, "%s|", over_amount );
		fprintf( fw, "%s|", commission );
		fprintf( fw, "%s|", backup1 );
		fprintf( fw, "%s|", seqNb );
		fprintf( fw, "%s|", "" );
		fprintf( fw, "|\n", "" );
	}
	fclose( fp );
	fclose( fw );

	return 0;
}
