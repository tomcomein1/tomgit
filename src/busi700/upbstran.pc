#include <stdio.h>
#include <stdlib.h>
#include <sys/types.h>
#include <time.h>
#include "atmi.h"
#include "fml32.h"
#include "pbconstval.h"
#include "pbstructdef.h"
#ifdef ORACLE_DATABASE
EXEC SQL include "pbranchdb.h";
#else
#include "pbranchdb.h"
#endif
EXEC SQL include "pb_s_agt_batch.h";
#include "pberrlog.h"
#include "pbglbvardef.h"
#include "pbbasefunc.h"
#include "pqds.h"
#include "macrodef.h"
EXEC SQL include "pbsrv.h";

#include "zpqds.h"
#include <stddef.h>
EXEC SQL include "pbappdb.h";
EXEC SQL include "b_dbbuf.h";
int reverproc(char *corr_date, char *corr_seqno);

/*
*aotm      : 
*desc      :与统一支付异构前处理
*written by: wang w0
*   20150104
*/
int upbsbeforetran(char *para)
{
    long lerrno=0;
    char tmpbuf[PACKDATA_LEN+1];
    int PkgLen = 0;
    char err_msg[120];
    ATOM_PARA  Para;
    memset( err_msg, 0, sizeof(err_msg));
    memset( &Para, 0, sizeof(Para));

WriteLog( ERR_LVL, "DataBuff[%s][%d]", PkgBuff.DataBuff, PkgBuff.DataLen );
WriteLog( ERR_LVL, "oooopkpara[%s]", para );
    rtrim(para);
    ParseAtomPara( &Para, para);
    memset( tmpbuf, 0x00, sizeof(tmpbuf) );
    memcpy( tmpbuf, PkgBuff.DataBuff+8, PkgBuff.DataLen - 8 );
    memset( PkgBuff.DataBuff, 0x00, sizeof(PkgBuff.DataBuff) );
    PkgBuff.DataLen -= 8;
    memcpy( PkgBuff.DataBuff, tmpbuf, PkgBuff.DataLen );
    WriteLog( ERR_LVL, "DataBuff[%s][%d]", PkgBuff.DataBuff, PkgBuff.DataLen );
    if( Para.ParaNum == 1  )
    {
        return 0;
    }
    else if( Para.ParaNum != 3  )
    {
        WriteLog(ERR_LVL,"参数个数错误FAIL[%d]",Para.ParaNum);
        lerrno =  99999;
        sprintf(err_msg, "参数个数错误FAIL[%d]", Para.ParaNum );
        PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&lerrno, 0 );
        PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
        PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, "-1", 0 );
        return -1;
    }
    PutPoolDataByName( "PBSYS", "BusiType", 0, 0, Para.Para[0], 0 );
    PutPoolDataByName( "PBSYS", "RChnlNo", 0, 0, Para.Para[0], 0 );
    PutPoolDataByName( "PBSYS", "TranCode", 0, 0, Para.Para[1], 0 );
    PutPoolDataByName( "PBSYS", "RTranCode", 0, 0, Para.Para[2], 0 );
    return 0;
}
int
pbnet_revse()
{
	EXEC SQL BEGIN DECLARE SECTION;
		char chnlseqno[32+1];
		char commitdt[10+1];
		struct s_pb_net_dtl net_dtl;
		char   journo[10+1];	/* PB流水号 */
		char   clt_seqno[10+1];		/* 明细流水号 */	
		char   old_tran_stat[1+1];/*交易状态*/	
		char   tran_date[8+1];		/* 交易日期 */
		struct s_pb_tlrlog   pb_tlrlog;		/*柜员日志信息*/
	EXEC SQL END DECLARE SECTION;
	int      rellen = 0;
	int      ret = 0;
	long lerrno = 99999;
	char err_msg[128];
	struct head head;

	memset( chnlseqno, 0x00, sizeof( chnlseqno ) );
	memset( commitdt, 0x00, sizeof( commitdt ) );
	memset( &net_dtl, 0x00, sizeof( struct s_pb_net_dtl ) );
	memset( journo, 0, sizeof journo );
	memset( clt_seqno, 0, sizeof clt_seqno );
	memset( tran_date, 0, sizeof tran_date );
	memset( err_msg, 0, sizeof err_msg );
	memset( &head, 0x00, sizeof( struct head ) );

	/* 从变量池取值 */
	GetPoolDataByName("BUSIIB","chnlSeqNb",0,0,chnlseqno,0);
	GetPoolDataByName("BUSIIB","commitDt",0,0,commitdt,0);
        rtrim(chnlseqno);
        rtrim(commitdt);

	EXEC SQL SELECT * INTO :net_dtl
		FROM t_pb_net_dtl
		WHERE chnlseqno = :chnlseqno
		AND wy_date = :commitdt;
	if ( sqlca.sqlcode )
	{
		if ( sqlca.sqlcode == 100 )
		{
			WriteLog( ERR_LVL, "net_dtl表里无记录!seq[%s]date[%s]", chnlseqno, commitdt);
			strcpy(err_msg,"冲销失败,该交易不存在");
			PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
			PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, "-1", 0 );
			PutPoolDataByName("BUSIIB","hostSeqStat",0,0,"3",0);
			return -1;
		}
		else
		{
			strcpy(err_msg,"系统异常请稍后再试");
			PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
			PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, "-1", 0 );
			WriteLog( ERR_LVL, "数据库操作错!seq[%s]date[%s][%ld]", chnlseqno, commitdt,sqlca.sqlcode);
			PutPoolDataByName( "BUSIIB", "hostSeqStat", 0, 0, "2", 0 );
			return -1;
		}
	}

	rtrim( net_dtl.trandate );
	rtrim( net_dtl.seqno );
	strcpy( tran_date,net_dtl.trandate);
	strcpy( journo,net_dtl.seqno);
	ret = reverproc(tran_date, journo);
        if( ret < 0 )
	{
		WriteLog( ERR_LVL, "zzz处理失败!seq[%s]date[%s]", chnlseqno, commitdt);
		strcpy(err_msg,"冲销失败");
		PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
		PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, "-1", 0 );
		PutPoolDataByName("BUSIIB","hostSeqStat",0,0,"2",0);
		return -1;
	}
        if( ret == 1 )
        {
		strcpy(err_msg,"该交易已冲正");
		PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
		PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, "-1", 0 );
		WriteLog( ERR_LVL, "该交易已冲正!seq[%s]date[%s]", chnlseqno, commitdt);
		PutPoolDataByName( "BUSIIB", "hostSeqStat", 0, 0, "2", 0 );
		return -1;
        }


	PutPoolDataByName( "ABSHEAD", "_seq_no", 0, 0, clt_seqno, 0 );
	PutPoolDataByName( "BUSIIB", "hostSeqStat", 0, 0, "1", 0 );
	PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, "0", 0 );

	return (0);
}
static int reverproc(char *corr_date, char *corr_seqno)
{
    EXEC SQL BEGIN DECLARE SECTION;
        char tran_date[10+1];
        char tot_seqno[10+1];
        char tran_stat[6];
        struct s_pb_tlrlog pb_tlrlog;
    EXEC SQL END DECLARE SECTION;
    int ret;

    memset ( tran_date, 0, sizeof(tran_date));
    memset ( tot_seqno, 0, sizeof(tot_seqno));
    memset ( tran_stat, 0, sizeof(tran_stat));
    memset ( &pb_tlrlog, 0, sizeof(pb_tlrlog));
    ret = 0;

    /*复制参数*/
    memcpy ( tran_date, corr_date, 8);
    memcpy ( tot_seqno, corr_seqno, 10);
    WriteLog( APP_LVL, "IBPS-冲正 corr_date[%s],corr_seqno[%s]", corr_date, corr_seqno);
    EXEC SQL select tran_stat[1,1] into :tran_stat  from  t_pb_accjnl
        WHERE tran_date = :tran_date
        AND tot_seqno = :tot_seqno;
    if ( sqlca.sqlcode )
    {
        WriteLog ( ERR_LVL, "查询t_pb_accjnl错[%d]", sqlca.sqlcode);
        return (  -1);
    }
    if( tran_stat[0] == '1' )
    {
        WriteLog ( ERR_LVL, "已冲正[%d]", sqlca.sqlcode);
        return 1;
    }

    /*更新原有ACCJNL*/
    EXEC SQL UPDATE t_pb_accjnl
        SET tran_stat = '2' /*失败*/
        WHERE tran_date = :tran_date
        AND tot_seqno = :tot_seqno;
    if ( sqlca.sqlcode || sqlca.sqlerrd[2] != 1)
    {
        WriteLog ( ERR_LVL, "更新ACCJNL失败[%d]", sqlca.sqlcode);
        return (  -1);
    }

    /*更新柜员日志表*/
    EXEC SQL UPDATE t_pb_tlrlog
        SET tran_stat = '2'    /*失败*/
        WHERE tran_date = :tran_date
        AND tran_seqno = :tot_seqno;
    if ( sqlca.sqlcode || sqlca.sqlerrd[2] != 1)
    {
        WriteLog ( ERR_LVL, "更新TLRLOG表失败[%d]",sqlca.sqlcode);
        return (  -1);
    }

    /*查询柜员日志表*/
    EXEC SQL SELECT * INTO :pb_tlrlog
        FROM t_pb_tlrlog
        WHERE tran_date = :tran_date
        AND tran_seqno = :tot_seqno;
    if ( sqlca.sqlcode)
    {
        WriteLog ( ERR_LVL, "查询柜员日志表失败[%d]", sqlca.sqlcode);
        return ( -1);
    }

    /*调用 核心冲正接口*/
    ret = Pb_CoreDeal ( &pb_tlrlog);
    if ( ret <0)
    {
        WriteLog ( ERR_LVL, "核心冲正失败");
        return ( -1);
    }
    EXEC SQL BEGIN WORK;

    /*更新原ACCJNL*/
    EXEC SQL UPDATE t_pb_accjnl
        SET tran_stat = '1'    /*冲正*/
        WHERE tran_date = :tran_date
        AND tot_seqno = :tot_seqno;
    if ( sqlca.sqlcode || sqlca.sqlerrd[2] != 1)
    {
        WriteLog ( ERR_LVL, "更新ACCJNL表失败[%d]",sqlca.sqlcode);
        EXEC SQL ROLLBACK WORK;
        return (  -1);
    }
    /*更新柜员日志表*/
    EXEC SQL UPDATE t_pb_tlrlog
        SET tran_stat = '1'    /*冲正*/
        WHERE tran_date = :tran_date
        AND tran_seqno = :tot_seqno;
    if ( sqlca.sqlcode || sqlca.sqlerrd[2] != 1)
    {
        WriteLog ( ERR_LVL, "更新TLRLOG表失败[%d]",sqlca.sqlcode);
        EXEC SQL ROLLBACK WORK;
        return (  -1);
    }

    EXEC SQL COMMIT WORK;

    return ( 0);
}
