
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#include <sys/types.h>
#include <sys/time.h>

#include "pbconstval.h"
#include "pbstructdef.h"
#ifdef ORACLE_DATABASE
EXEC SQL include "pbranchdb.h";
#else
#include "pbranchdb.h"
#endif
#include "pberrlog.h"
#include "pbglbvardef.h"
#include "pbbasefunc.h"
#include "pbvarmacro.h"

#include "pbdb.h"
#include "fml32.h"
#include "atmi.h"

EXEC SQL  include "pb_s_agt_batch.h";

#define ZNQK_TIME  1800  /* 助农取款预约码有效时间（秒） */

/* 计算时间 */
#define ___IsLeapYear(N) (((N % 4 == 0) && (N % 100 != 0)) || (N % 400 == 0))
#define MON2DAYS(a) ___IsLeapYear(a)?29:28
#define RMONTHDAYS(a, b) ((a) == 2?(MON2DAYS(b)):((a) < 8 && (a) % 2 == 0 || (a) >= 8 && (a) % 2 != 0)?30:31)
/* 计算时间 */

long CalcuTime( char *, char * );
int iCheckDate(int , int , int );
long lCountDate(char *, int iOffset, char *);
int iAddSecond(char *, long *, char *);


$struct s_pb_cash_booking_stru
{
    char   trandate[10+1];     /* 系统日期 */
    dtime_t  trantime;         /* 系统时间 */
    char  trancode[10+1];      /* 外部交易码 */
    char  seqno[10+1];         /* 流水号 */
    char  certno[32+1];        /* 证件号码 */
    char  telno[32+1];         /* 手机号码 */
    char  cardAcctNb[32+1];    /* 卡号 */
    char  cardAcctFlg[2+1];    /* 卡折标志 */
    char  bookno[32+1];        /* 预约号 */
    double  bookamt;           /* 预约金额 */
    char  flag[6+1];           /* 预约状态 0-未使用，1-已使用，2-已撤销，3-已过期 */
    char  memo[60+1];          /* 备注 */
    char  backdata1[30+1];
    char  backdata2[60+1];
};

/*****************************************************
**函数描述     : 预约取款查询 
**函数用途     : 查询预约
**输入         ：  
**输出         :  
**创建日期     ：2013/08/02
**最后修改日期 ：
**Create by    : MSJ
*****************************************************/
int CashBookingQry()
{
    EXEC SQL BEGIN DECLARE SECTION;
        struct s_pb_cash_booking_stru  CashBooking;
        char  Cardno[32+1];
        char  certNb[32+1];
        char  old_trancode[10+1];
        char  currdate[8+1];
    EXEC SQL END   DECLARE SECTION;
    char  bookAmt[16+1];
    char  curr_trancode[10+1];
    char  dealDtTm[80+1];
    char  stlFlg[32+1];
    char  tran_time[80+1];
    char  curr_time[80+1];
    char  time_before[14+1];
    char  time_after[14+1];
    dtime_t  currtime;
    char errmsg[128+1];
    long errcode = 0;
    long  valid_sec = 0;

    memset( &CashBooking, 0x00, sizeof(CashBooking) );
    memset( Cardno, 0x00, sizeof(Cardno) );
    memset( certNb, 0x00, sizeof(certNb) );
    memset( old_trancode, 0x00, sizeof(old_trancode) );
    memset( curr_trancode, 0x00, sizeof(curr_trancode) );
    memset( bookAmt, 0x00, sizeof(bookAmt) );
    memset( currdate, 0x00, sizeof(currdate) );
    memset( dealDtTm, 0x00, sizeof(dealDtTm) );
    memset( stlFlg, 0x00, sizeof(stlFlg) );
    memset( tran_time, 0x00, sizeof(tran_time) );
    memset( curr_time, 0x00, sizeof(curr_time) );
    memset( time_before, 0x00, sizeof(time_before) );
    memset( time_after, 0x00, sizeof(time_after) );
    memset( &currtime, 0x00, sizeof(currtime) );
    memset( errmsg, 0x00, sizeof(errmsg) );

    /* 从变量池取值 */
    /* 系统日期 */
    PayGetCoreDate( currdate );
    rtrim( currdate );
    WriteLog( APP_LVL, "系统日期[%s]", currdate );

    /* 外部交易码 */
    GetPoolDataByName( "PBSYS", "RTranCode", 0, 0, curr_trancode, 0 );
    WriteLog( APP_LVL, "外部交易码[%s]", curr_trancode );

    /* 证件号码 */
    GetPoolDataByName( "BUSIIB","certNb",0,0,certNb,0 );
    rtrim( certNb );
    WriteLog( APP_LVL, "证件号码[%s]", certNb );

    /* 卡号 */
    GetPoolDataByName( "BUSIIB","cardAcctNb",0,0,Cardno,0 );
    rtrim( Cardno );
    WriteLog( APP_LVL, "卡号[%s]", Cardno );

    trim( curr_trancode );
    if( strcmp(curr_trancode,"CBS9000200")==0 )
    {
        strcpy(old_trancode,"CBS9000100");
    }
    else if( strcmp(curr_trancode,"CBS9000120")==0 )
    {
        strcpy(old_trancode,"CBS9000110");
    }
    else
    {
        WriteLog( ERR_LVL, "交易码错误[%s]", curr_trancode );
        errcode = 99999;
        sprintf( errmsg, "交易码错误" );
        PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode, 0 );
        PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, errmsg, 0 );
        return (-1);
    }

    EXEC SQL SELECT first 1 * INTO :CashBooking FROM t_pb_cash_booking 
               WHERE  cardAcctNb = :Cardno
                 AND  certno = :certNb
                 AND  trancode = :old_trancode
                 AND  flag[1,1] = '0'
                 ORDER BY trantime DESC;
    if( SQLCODE!=0 && SQLCODE!=100  )
    {
        WriteLog( ERR_LVL, "查询表t_pb_cash_booking错[%d]：[%s][%s]", SQLCODE, Cardno, certNb );
        errcode=99999;
        strcpy( errmsg, "系统忙，请稍后重试" );
        PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode, 0 );
        PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, errmsg, 0 );
        return (-1);
    }
    if( SQLCODE==100  )
    {
        WriteLog( ERR_LVL, "表t_pb_cash_booking中无记录[%d]：[%s][%s]", SQLCODE, Cardno, certNb );
        errcode=99999;
        strcpy( errmsg, "该账号暂无有效预约，请确认预约类型或账号" );
        PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode, 0 );
        PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, errmsg, 0 );
        return (-1);
    }
    
    rtrim( CashBooking.trandate );
    if( strcmp(CashBooking.trandate,currdate)!=0 )
    {
        WriteLog( ERR_LVL, "当前记录交易日期为[%s]", CashBooking.trandate );
        CashBooking.flag[0] = '3';
        EXEC SQL UPDATE t_pb_cash_booking
                 SET flag[1,1] = '3'
                 WHERE  trandate = :CashBooking.trandate
                   AND  telno = :CashBooking.telno
                   AND  bookno = :CashBooking.bookno
                   AND  trancode = :CashBooking.trancode;
        if( SQLCODE || sqlca.sqlerrd[2] != 1 )
        {
            WriteLog( ERR_LVL, "更新表t_pb_cash_booking错[%d]：[%s][%s][%s]", SQLCODE, 
                           CashBooking.trandate, CashBooking.cardAcctNb,CashBooking.telno );
            errcode=99999;
            strcpy( errmsg, "系统忙，请稍后重试" );
            PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode, 0 );
            PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, errmsg, 0 );
            return (-1);
        }
        WriteLog( ERR_LVL, "ERROR：该预约无效" );
        errcode=99999;
        strcpy( errmsg, "该账号暂无有效预约" );
        PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode, 0 );
        PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, errmsg, 0 );
        return (-1);
    }


    rtrim( CashBooking.trancode );
    if( strcmp(CashBooking.trancode,"CBS9000100")==0 )
    {
        strcpy( dealDtTm, CashBooking.trandate );
        WriteLog( ERR_LVL, "无卡取款验证码查询,dealDtTm[%s] 当前日期[%s]", dealDtTm, currdate );
    }
    else
    {
        /* 取当前系统时间 */
        dtcurrent( &currtime );
        dttoasc( &currtime, curr_time );
        rtrim( curr_time );
        WriteLog( ERR_LVL, "当前系统时间[%s]", curr_time );
        
        dttoasc( &CashBooking.trantime, tran_time );
        rtrim( tran_time );
        WriteLog( ERR_LVL, "交易发生时间[%s]", tran_time );
        /* 助农取款的预约码有效时间仅为ZNQK_TIME秒 */
        if( strcmp(CashBooking.trandate,currdate)==0 && CalcuTime(curr_time,tran_time)>ZNQK_TIME )
        {
            rtrim( CashBooking.flag );
            rtrim( CashBooking.trandate );
            rtrim( CashBooking.telno );
            rtrim( CashBooking.bookno );
                
            CashBooking.flag[0] = '3';
            EXEC SQL UPDATE t_pb_cash_booking
                     SET flag[1,1] = '3'
                     WHERE  trandate = :CashBooking.trandate
                       AND  telno = :CashBooking.telno
                       AND  bookno = :CashBooking.bookno
                       AND  trancode = :CashBooking.trancode;
            if( SQLCODE || sqlca.sqlerrd[2] != 1 )
            {
                WriteLog( ERR_LVL, "更新表t_pb_cash_booking错[%d]：[%s][%s][%s]", SQLCODE, 
                               CashBooking.trandate, CashBooking.telno,CashBooking.bookno );
                errcode=99999;
                strcpy( errmsg, "系统忙，请稍后重试" );
                PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode, 0 );
                PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, errmsg, 0 );
                return (-1);
            }
            WriteLog( ERR_LVL, "ERROR：该预约无效" );
            errcode=99999;
            strcpy( errmsg, "该账号暂无有效预约" );
            PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode, 0 );
            PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, errmsg, 0 );
            return (-1);
        }
        
        /* 计算原预约码有效截止时间 */ 
        memset( tran_time, 0x00, sizeof(tran_time) );
        dttoasc( &CashBooking.trantime, tran_time );
        strncpy( time_before, tran_time, 4 );
        strncat( time_before, tran_time+5, 2 );
        strncat( time_before, tran_time+8, 2 );
        strncat( time_before, tran_time+11, 2 );
        strncat( time_before, tran_time+14, 2 );
        strncat( time_before, tran_time+17, 2 );
        
        WriteLog( APP_LVL, "tran_time[%s] time_before[%s]", tran_time, time_before );
        valid_sec = ZNQK_TIME;
        iAddSecond( time_before, &valid_sec, time_after);
        
        strncpy( dealDtTm, time_after, 4 );
        strcat( dealDtTm, "-" );
        strncat( dealDtTm, time_after+4, 2 );
        strcat( dealDtTm, "-" );
        strncat( dealDtTm, time_after+6, 2 );
        strcat( dealDtTm, " " );
        strncat( dealDtTm, time_after+8, 2 );
        strcat( dealDtTm, ":" );
        strncat( dealDtTm, time_after+10, 2 );
        strcat( dealDtTm, ":" );
        strncat( dealDtTm, time_after+12, 2 );
        
        WriteLog( ERR_LVL, "dealDtTm[%s] time_after[%s]", dealDtTm, time_after );
    }

    
    rtrim( CashBooking.flag );
    WriteLog( APP_LVL, "flag[%s]", CashBooking.flag );
    switch( CashBooking.flag[0] )
    {
        case '0':
            strcpy( stlFlg, "未使用");
            break;
        case '1':
            strcpy( stlFlg, "已使用");
            break;
        case '2':
            strcpy( stlFlg, "已撤销");
            break;
        case '3':
            strcpy( stlFlg, "已过期");
            break;
        default:
            strcpy( stlFlg, "未知状态");
            break;
    }

    sprintf( bookAmt, "%2.f", CashBooking.bookamt );
    rtrim( CashBooking.bookno );
    rtrim( CashBooking.memo );
    WriteLog( APP_LVL, "bookAmt[%s]", bookAmt );
    WriteLog( APP_LVL, "dealDtTm[%s]", dealDtTm );
    WriteLog( APP_LVL, "bookNb[%s]", CashBooking.bookno );
    WriteLog( APP_LVL, "memo[%s]", CashBooking.memo );
    WriteLog( APP_LVL, "stlFlg[%s]", stlFlg );
    
    PutPoolDataByName("BUSIIB","bookAmt", 0, 0, bookAmt,0);
    PutPoolDataByName("BUSIIB","dealDtTm", 0, 0, dealDtTm,0);
    PutPoolDataByName("BUSIIB","bookNb", 0, 0, CashBooking.bookno,0);
    PutPoolDataByName("BUSIIB","memo", 0, 0, CashBooking.memo,0);
    PutPoolDataByName("BUSIIB","stlFlg", 0, 0, stlFlg,0);
    PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, "000000", 0 );
    PutPoolDataByName( "BUSIIB", "thsdesc", 0, 0, "交易成功", 0 );
    WriteLog( ERR_LVL, "------Call Function CashBookingQry() Success---------" );

    return( 0 );
}



/*****************************************************
**函数描述     : 预约取款撤销
**函数用途     : 预约取款撤销
**输入         ：  
**输出         :  
**创建日期     ：2013/08/02
**最后修改日期 ：
**Create by    : MSJ
*****************************************************/
int CashBookingCancel()
{
    EXEC SQL BEGIN DECLARE SECTION;
        char  Cardno[32+1];
        char  trandate[8+1];
        char  certNb[32+1];
        char  Telno[32+1];
        char  Bookno[32+1];
        char  old_trancode[10+1];
    EXEC SQL END   DECLARE SECTION;
    char errmsg[128+1];
    char curr_trancode[10+1];
    long errcode = 0;

    memset( Cardno, 0x00, sizeof(Cardno) );
    memset( trandate, 0x00, sizeof(trandate) );
    memset( Telno, 0x00, sizeof(Telno) );
    memset( Bookno, 0x00, sizeof(Bookno) );
    memset( old_trancode, 0x00, sizeof(old_trancode) );
    memset( curr_trancode, 0x00, sizeof(curr_trancode) );
    memset( certNb, 0x00, sizeof(certNb) );
    memset( errmsg, 0x00, sizeof(errmsg) );

    /* 系统日期 */
    PayGetCoreDate( trandate );
    rtrim( trandate );
    WriteLog( APP_LVL, "系统日期[%s]", trandate );
   
    /* 外部交易码 */
    GetPoolDataByName( "PBSYS", "RTranCode", 0, 0, curr_trancode, 0 );
    WriteLog( APP_LVL, "外部交易码[%s]", curr_trancode );
 
    /* 证件号码 */
    GetPoolDataByName( "BUSIIB","certNb",0,0,certNb,0 );
    rtrim( certNb );
    WriteLog( APP_LVL, "证件号码[%s]", certNb );

    /* 卡号 */
    GetPoolDataByName( "BUSIIB","cardAcctNb",0,0,Cardno,0 );
    rtrim( Cardno );
    WriteLog( APP_LVL, "卡号[%s]", Cardno );

    if( strcmp(curr_trancode,"CBS9000300")==0 )
        strcpy( old_trancode, "CBS9000100" );
    else
        strcpy( old_trancode, "CBS9000110" );
    WriteLog( APP_LVL, "old_trancode[%s]", old_trancode );

    EXEC SQL SELECT telno,bookno INTO :Telno,:Bookno
             FROM t_pb_cash_booking 
               WHERE  trandate = :trandate
                 AND  trancode = :old_trancode
                 AND  cardAcctNb = :Cardno
                 AND  certno = :certNb
                 AND  flag[1,1] = '0';
    if( SQLCODE!=0 && SQLCODE!=100  )
    {
        WriteLog( ERR_LVL, "查询表t_pb_cash_booking错[%d]：[%s][%s]", SQLCODE, Cardno, certNb );
        errcode=99999;
        strcpy( errmsg, "系统忙，请稍后重试" );
        PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode, 0 );
        PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, errmsg, 0 );
        return (-1);
    }
    if( SQLCODE==100  )
    {
        WriteLog( ERR_LVL, "表t_pb_cash_booking中无记录[%d]：[%s][%s]", SQLCODE, Cardno, certNb );
        errcode=99999;
        sprintf( errmsg, "该账号今天[%s]无有效预约，无需撤销", trandate );
        PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode, 0 );
        PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, errmsg, 0 );
        return (-1);
    }
    
    EXEC SQL UPDATE t_pb_cash_booking SET flag[1,1] = '2'
               WHERE  trandate = :trandate
                 AND  telno = :Telno
                 AND  bookno = :Bookno
                 AND  trancode = :old_trancode;
    if( SQLCODE || sqlca.sqlerrd[2] != 1 )
    {
        WriteLog( ERR_LVL, "更新表t_pb_cash_booking错[%d]：[%s][%s]", SQLCODE, Cardno, certNb );
        errcode=99999;
        strcpy( errmsg, "系统忙，请稍后重试" );
        PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode, 0 );
        PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, errmsg, 0 );
        return (-1);
    }
    
    PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, "000000", 0 );
    PutPoolDataByName( "BUSIIB", "thsdesc", 0, 0, "交易成功", 0 );
    WriteLog( ERR_LVL, "------Call Function CashBookingCancel() Success---------" );

    return( 0 );
}




/*****************************************************
**函数描述     : 预约取款查询前处理 
**函数用途     : 交易检查、控制，数据库记录
**输入         ：  
**输出         :  
**创建日期     ：2013/08/02
**最后修改日期 ：
**Create by    : MSJ
*****************************************************/
int BookingQryBefore()
{
    struct s_pb_cash_booking_stru  CashBooking;
    char errmsg[128+1];
    long errcode = 0;
    char tranAmt[16+1];
    float maxAmt=0;
    int ret=0;

    memset( &CashBooking, 0x00, sizeof(CashBooking) );
    memset( errmsg, 0x00, sizeof(errmsg) );
    memset( tranAmt, 0x00, sizeof(tranAmt) );

    /* 卡号 */
    GetPoolDataByName( "BUSIIB","cardAcctNb",0,0,CashBooking.cardAcctNb,0 );
    WriteLog( APP_LVL, "卡号[%s]", CashBooking.cardAcctNb );

    /* 预约金额 */
    GetPoolDataByName( "BUSIIB","bookAmt",0,0,tranAmt,0 );
    CashBooking.bookamt = atof(tranAmt);
    WriteLog( APP_LVL, "预约金额[%f]", CashBooking.bookamt );
    
    /* 外部交易码 */
    GetPoolDataByName( "PBSYS", "RTranCode", 0, 0, CashBooking.trancode, 0 );
    WriteLog( APP_LVL, "外部交易码[%s]", CashBooking.trancode );
            
    /** 合法性检查 **/
    /* 仅卡号才可以做预约交易 */
    trim( CashBooking.cardAcctNb );
    ret = IsCardNo(CashBooking.cardAcctNb);
    if( ret!=0 )
    {
        WriteLog( ERR_LVL, "acc[%s]为账号", CashBooking.cardAcctNb );
        errcode=99999;
        strcpy( errmsg, "抱歉，仅卡号才可预约取款！" );
        PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode, 0 );
        PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, errmsg, 0 );
        return (-1);
    }
    
    trim( CashBooking.trancode );
    if( strcmp(CashBooking.trancode,"CBS9000100")==0 )  
    {
        /* 无卡取款预约金额单笔不超过5000元 */
        maxAmt=5000.01;
    }
    else if( strcmp(CashBooking.trancode,"CBS9000110")==0 )
    {
        /* 助农取款预约金额单笔不超过1000元 */
        maxAmt=1000.01;
    }
    else
    {
        WriteLog( ERR_LVL, "交易码[%s]错误", CashBooking.trancode );
        errcode=99999;
        sprintf( errmsg, "交易码[%s]错误", CashBooking.trancode );
        PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode, 0 );
        PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, errmsg, 0 );
        return (-1);
    }
    
    WriteLog( APP_LVL, "maxAmt[%f]", maxAmt );
    if( CashBooking.bookamt>=maxAmt )
    {
        WriteLog( ERR_LVL, "CashBooking.bookamt[%f]超过限额[%f]", CashBooking.bookamt, maxAmt );
        errcode=99999;
        sprintf( errmsg, "对不起，单笔金额不得超过[%.2f]元", maxAmt-0.01 );
        PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode, 0 );
        PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, errmsg, 0 );
        return (-1);
    }

    PutPoolDataByName("BUSIIB","loanCreditFlg", 0, 0, "0001112",0);
    WriteLog( ERR_LVL, "------Call Function BookingQryBefore() Success---------" );

    return( 0 );
}


/*****************************************************
**函数描述     : 预约取款查询后处理 
**函数用途     : 交易检查、控制
**输入         ：  
**输出         :  
**创建日期     ：2013/08/02
**最后修改日期 ：
**Create by    : MSJ
*****************************************************/
int BookingQryBack()
{
    EXEC SQL BEGIN DECLARE SECTION;
        struct s_pb_cash_booking_stru  CashBooking;
    EXEC SQL END   DECLARE SECTION;
    char  tmp_time[80+1];
    char  tranAmt[16+1];
    char  balAmt[16+1];
    char  acctStat[32+1];
    char  stat[2+1];
    char  Cardflg[32+1];
    char  errmsg[128+1];
    long  errcode = 0;
    double  acctAmt = 0;
    double  bookAmt = 0;

    memset( &CashBooking, 0x00, sizeof(struct s_pb_cash_booking_stru) );
    memset( tmp_time, 0x00, sizeof(tmp_time) );
    memset( tranAmt, 0x00, sizeof(tranAmt) );
    memset( balAmt, 0x00, sizeof(balAmt) );
    memset( acctStat, 0x00, sizeof(acctStat) );
    memset( Cardflg, 0x00, sizeof(Cardflg) );
    memset( errmsg, 0x00, sizeof(errmsg) );

    GetPoolDataByName( "BUSIIB2", "CdmacctStat", 0, 0, acctStat, 0);
    rtrim( acctStat );
    WriteLog( APP_LVL, "acctStat[%s]", acctStat );
    if( strlen(acctStat)==0 )
    {
        WriteLog( ERR_LVL, "请检查账户状态!" );
        /**
        errcode=99999;
        strcpy( errmsg, "账户状态有误" );
        PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode, 0 );
        PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, errmsg, 0 );
        return (-1);
        **/
    }
    else
    {
        if( acctStat[0] == '0' )
        {
            if( acctStat[1] == '0' || acctStat[1] == '3' )
            {
                if( acctStat[2] == '0' )
                {
                    strcpy( stat, "01" );
                }
                else if( ( acctStat[2] == '1' ) || ( acctStat[2] == '2' ) || ( acctStat[2] == '3' ) )
                {
                    strcpy( stat, "03" );
                }
                else
                {
                    strcpy( stat, "99" );
                }
            }
            else if( ( acctStat[1] == '1' ) || ( acctStat[1] == '2' ) )
            {
                strcpy( stat, "02" );
            }
            else
            {
                strcpy( stat, "99" );
            }
        }
        else if( acctStat[0] == '1' )
        {
            strcpy( stat, "04" );
        }
        else
        {
            strcpy( stat, "99" );
        }
    }
    
    if( strcmp(stat, "02") == 0 )
    {
       WriteLog( ERR_LVL, "账号检查错stat[%s] acctStat[%s]", stat, acctStat );
       errcode = 10006;
       strcpy( errmsg, "账号已冻结");
       PutPoolDataByName("ABSHEAD","app_err_no", 0, 0, (char *)&errcode, 0);
       PutPoolDataByName("ABSHEAD","_error_code", 0, 0, errmsg, 0);
       return -1;
    }
    else if( strcmp(stat, "03") == 0 )
    {
       WriteLog( ERR_LVL, "账号检查错stat[%s] acctStat[%s]", stat, acctStat );
       errcode = 10003;
       strcpy( errmsg, "账号已挂失");
       PutPoolDataByName("ABSHEAD","app_err_no", 0, 0, (char *)&errcode, 0);
       PutPoolDataByName("ABSHEAD","_error_code", 0, 0, errmsg, 0);
       return -1;
    }
    else if( strcmp(stat, "04") == 0 )
    {
       WriteLog( ERR_LVL, "账号检查错stat[%s] acctStat[%s]", stat, acctStat );
       errcode = 10004;
       strcpy( errmsg, "账户状态为销户");
       PutPoolDataByName("ABSHEAD","app_err_no", 0, 0, (char *)&errcode, 0);
       PutPoolDataByName("ABSHEAD","_error_code", 0, 0, errmsg, 0);
       return -1;
    }
    else if( strcmp(stat, "99") == 0 )
    {
       WriteLog( ERR_LVL, "账号检查错stat[%s] acctStat[%s]", stat, acctStat );
       errcode = 99999;
       strcpy( errmsg, "账户状态非正常");
       PutPoolDataByName("ABSHEAD","app_err_no", 0, 0, (char *)&errcode, 0);
       PutPoolDataByName("ABSHEAD","_error_code", 0, 0, errmsg, 0);
       return -1;
    }
    else
    {
        WriteLog( ERR_LVL, "acctStat[%s] ", acctStat );
    }
     
    GetPoolDataByName( "CBS", "ClsSeqNo", 0, 0, Cardflg, 0);
    rtrim( Cardflg );
    WriteLog( APP_LVL, "Cardflg[%s]", Cardflg );
    if( Cardflg[0] != '0' )
    {
       WriteLog( ERR_LVL, "卡已销户Cardflg[%s]", Cardflg );
       errcode = 10004;
       strcpy( errmsg, "卡已销户");
       PutPoolDataByName("ABSHEAD","app_err_no", 0, 0, (char *)&errcode, 0);
       PutPoolDataByName("ABSHEAD","_error_code", 0, 0, errmsg, 0);
       return -1;
    }
    else if( Cardflg[2] != '0' )
    {
       WriteLog( ERR_LVL, "卡已挂失Cardflg[%s]", Cardflg );
       errcode = 10011;
       strcpy( errmsg, "卡已挂失");
       PutPoolDataByName("ABSHEAD","app_err_no", 0, 0, (char *)&errcode, 0);
       PutPoolDataByName("ABSHEAD","_error_code", 0, 0, errmsg, 0);
       return -1;
    }
    else if( Cardflg[3] != '0')
    {
       WriteLog( ERR_LVL, "卡已锁定Cardflg[%s]", Cardflg );
       errcode = 99999;
       strcpy( errmsg, "卡已锁定");
       PutPoolDataByName("ABSHEAD","app_err_no", 0, 0, (char *)&errcode, 0);
       PutPoolDataByName("ABSHEAD","_error_code", 0, 0, errmsg, 0);
       return -1;
    }
    else
    {
        WriteLog( ERR_LVL, "Cardflg[%s] ", Cardflg );
    }
    


    /* 账户可用余额 */
    GetPoolDataByName( "BUSIIB2", "CdmavlBal", 0, 0, balAmt, 0);
    acctAmt = atof(balAmt);
    WriteLog( APP_LVL, "账户可用余额[%f]", acctAmt );
    
    /* 预约金额 */
    GetPoolDataByName( "BUSIIB","bookAmt", 0, 0, tranAmt, 0 );
    CashBooking.bookamt = atof(tranAmt);
    WriteLog( APP_LVL, "预约金额[%f]", CashBooking.bookamt );

    if( acctAmt<CashBooking.bookamt )
    {
        WriteLog( ERR_LVL, "账户可用余额[%.2f]不足", acctAmt );
        errcode=99999;
        sprintf( errmsg, "账户可用余额[%.2f]不足", acctAmt );
        PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode, 0 );
        PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, errmsg, 0 );
        return (-1);
    }

    /* 系统日期 */
    PayGetCoreDate( CashBooking.trandate);
    WriteLog( APP_LVL, "系统日期[%s]", CashBooking.trandate );
    
    /* 系统时间 */
    dtcurrent( &CashBooking.trantime );
    dttoasc( &CashBooking.trantime, tmp_time );
    rtrim( tmp_time );
    WriteLog( APP_LVL, "系统时间[%s]", tmp_time );
    
    /* 外部交易码 */
    GetPoolDataByName( "PBSYS", "RTranCode", 0, 0, CashBooking.trancode, 0 );
    WriteLog( APP_LVL, "外部交易码[%s]", CashBooking.trancode );
    
    /* 流水号 */
    GetPoolDataByName( "ABSHEAD", "_seq_no", 0, 0, CashBooking.seqno, 0 );
    WriteLog( APP_LVL, "流水号[%s]", CashBooking.seqno );
    
    /* 证件号码 */
    GetPoolDataByName( "BUSIIB","certNb",0,0,CashBooking.certno,0 );
    WriteLog( APP_LVL, "证件号码[%s]", CashBooking.certno );
    
    /* 手机号码 */
    GetPoolDataByName( "BUSIIB","bookCustTel",0,0,CashBooking.telno,0 );
    WriteLog( APP_LVL, "手机号码[%s]", CashBooking.telno );
    
    /* 卡号 */
    GetPoolDataByName( "BUSIIB","cardAcctNb",0,0,CashBooking.cardAcctNb,0 );
    WriteLog( APP_LVL, "卡号[%s]", CashBooking.cardAcctNb );
    
    /* 卡折标志 */
    GetPoolDataByName( "BUSIIB","cardAcctFlg",0,0,CashBooking.cardAcctFlg,0 );
    WriteLog( APP_LVL, "卡折标志[%s]", CashBooking.cardAcctFlg );
    
    /* 预约号 */
    GetPoolDataByName( "BUSIIB","bookNb",0,0,CashBooking.bookno,0 );
    WriteLog( APP_LVL, "预约号[%s]", CashBooking.bookno );
    
    /* 备注 */
    GetPoolDataByName( "BUSIIB","memo",0,0,CashBooking.memo,0 );
    WriteLog( APP_LVL, "备注[%s]", CashBooking.memo );
    
    /* 预约状态 */
    strcpy( CashBooking.flag, "000000" );

    /* 若为多次预约，则仅保留最后一次有效预约 */
    EXEC SQL DELETE t_pb_cash_booking 
               WHERE  trandate = :CashBooking.trandate
                 AND  cardacctnb = :CashBooking.cardAcctNb
                 AND  trancode = :CashBooking.trancode
                 AND  flag[1,1] = '0';
    if( SQLCODE!=0 )
    {
        WriteLog( ERR_LVL, "删除取款预约表错[%d]：[%s][%s][%s]", sqlca.sqlcode,
                       CashBooking.trandate,CashBooking.cardAcctNb,CashBooking.telno );
        errcode=99999;
        strcpy( errmsg, "系统忙，请稍后重试" );
        PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode, 0 );
        PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, errmsg, 0 );
        return (-1);
    }
   
    WriteLog( APP_LVL, "seqno[%s] trancode[%s]", CashBooking.seqno, CashBooking.trancode ); 
    EXEC SQL INSERT INTO t_pb_cash_booking VALUES( :CashBooking );
    if( sqlca.sqlcode || sqlca.sqlerrd[2]!=1 )
    {
        WriteLog( ERR_LVL,"插入取款预约表错[%d][%d]：[%s][%s][%s]",sqlca.sqlcode,sqlca.sqlerrd[2],
                            CashBooking.trandate,CashBooking.cardAcctNb,CashBooking.telno );
        errcode=99999;
        strcpy( errmsg, "系统忙，请稍后重试" );
        PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode, 0 );
        PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, errmsg, 0 );
        return (-1);
    }
    
    WriteLog( ERR_LVL, "------Call Function BookingQryBack() Success---------" );

    return(0);
}


/*****************************************************
**函数描述     : 计算时间差
**函数用途     : 计算时间差
**输入         ：  
**输出         :  
**创建日期     ：2013/08/02
**最后修改日期 ：
**Create by    : MSJ
*****************************************************/
long CalcuTime( char * curr_time, char * tran_time)
{
    char c_time[19+1];
    char t_time[19+1];
    struct tm curr_tm;
    struct tm tran_tm;
    time_t time_c;
    time_t time_t;
    long ret_value = 0;
    
    memset( c_time, 0x00, sizeof(c_time) );
    memset( t_time, 0x00, sizeof(t_time) );
    memset( &curr_tm, 0x00, sizeof(curr_tm) );
    memset( &tran_tm, 0x00, sizeof(tran_tm) );
    memset( &time_c, 0x00, sizeof(time_c) );
    memset( &time_t, 0x00, sizeof(time_t) );
    
    strncpy( c_time, curr_time, 19 );
    strncpy( t_time, tran_time, 19 );
    c_time[19] = '\0';
    t_time[19] = '\0';
    WriteLog( ERR_LVL, "c_time[%s]  t_time[%s]", c_time, t_time );
    
    sscanf( c_time, "%4d-%2d-%2d %2d:%2d:%2d", &curr_tm.tm_year, &curr_tm.tm_mon, &curr_tm.tm_mday,
                        &curr_tm.tm_hour, &curr_tm.tm_min, &curr_tm.tm_sec );
    curr_tm.tm_year -= 1900;
    curr_tm.tm_mon --;
    curr_tm.tm_isdst=-1;
    time_c = mktime(&curr_tm); 
    
    sscanf( t_time, "%4d-%2d-%2d %2d:%2d:%2d", &tran_tm.tm_year, &tran_tm.tm_mon, &tran_tm.tm_mday,
                        &tran_tm.tm_hour, &tran_tm.tm_min, &tran_tm.tm_sec );
    tran_tm.tm_year -= 1900;
    tran_tm.tm_mon --;
    tran_tm.tm_isdst=-1;
    time_t = mktime(&tran_tm); 
    
    ret_value = difftime( time_c, time_t );
    
    WriteLog( ERR_LVL, "ret_value[%ld]", ret_value );
    WriteLog( ERR_LVL, "------Call Function CalcuTime() Success---------" );
    return ret_value;
}




int iCheckDate(int iYear, int iMonth, int iDay)
{
    if (iYear < 0 || iYear > 9999)
        return -1;
    switch (iMonth)
    {
    case 1:
    case 3:
    case 5:
    case 7:
    case 8:
    case 10:
    case 12:
        if (iDay <= 0 || iDay > 31)
        {
            return -3;
        }
        break;
    case 4:
    case 6:
    case 9:
    case 11:
        if (iDay <= 0 || iDay > 30)
        {
            return -3;
        }
        break;
    case 2:
        if ((iYear % 4 == 0 && iYear % 100 != 0) || iYear % 400 == 0)
        {
            if (iDay <= 0 || iDay > 29)
            {
                return -3;
            }
        }
        else
        {
            if (iDay <= 0 || iDay > 28)
            {
                return -3;
            }
        }
        break;
    default:
        return -2;
    }
    return 0;
}

long lCountDate(char *sStartDate, int iOffset, char *sResultDate)
{
    int     step;
    long    lStartDate;
    int     iYear, iMonth, iDays;
    long    i;

    lStartDate = atol(sStartDate);

    iYear = lStartDate / 10000;
    iMonth = lStartDate % 10000 / 100;
    iDays = lStartDate % 100;

    if (iCheckDate(iYear, iMonth, iDays) != 0)
        return -1;

    step = (iOffset >= 0 ? 1 : -1);

    for (i = 1; i <= abs(iOffset); i++) {
        iDays += step;
        if (iDays <= 0 || iDays > RMONTHDAYS(iMonth, iYear)) {
            iMonth += step;
            if (iMonth <= 0) {
                iYear += step;
                iMonth = 12;
            } else if (iMonth > 12) {
                iYear += step;
                iMonth = 1;
            }

            if (iDays <= 0)
                iDays = RMONTHDAYS(iMonth, iYear);
            else
                iDays = 1;
        }
    }

    lStartDate = iYear * 10000 + iMonth * 100 + iDays;

    sprintf(sResultDate, "%8ld", lStartDate);

    return 0;
}


int iAddSecond(char *sStartDate, long *lSecond, char *sResultDate)
{
    char    sDate1[9], sDate2[9];                    /* 日期 */
    char    sHour1[3], sHour2[3];                    /* 小时 */
    char    sMinute1[3], sMinute2[3];                /* 分钟 */
    char    sSecond1[3], sSecond2[3];                /* 秒 */

    int     iDateDiff;                               /* 日期间隔 */
    int     iHourDiff;                               /* 小时间隔 */
    int     iMinDiff;                                /* 分钟间隔 */
    int     iSecDiff;                                /* 秒间隔 */

    int     iSecTmp = 0;
    int     iMinTmp = 0;
    int     iHourTmp = 0;
    int     iDateTmp = 0;
    int     iSec  = 0;
    int     iMin  = 0;
    int     iHour = 0;
    int     iDate = 0;

    memcpy(sResultDate, sStartDate, 14);
    memcpy(sDate1, sStartDate, 8);
    memcpy(sHour1, sStartDate + 8, 2);
    memcpy(sMinute1, sStartDate + 10, 2);
    memcpy(sSecond1, sStartDate + 12, 2);
    
    /*
     * 先算秒位
     */
    iSecDiff = (long) (*lSecond + atol(sSecond1)) %60;
    iMinDiff = (long) (*lSecond + atol(sSecond1)) /60;
    iSecTmp = iSecDiff - 60;
    
    if( iSecTmp >= 0 ) {
       sprintf(sSecond2, "%02d", iSecTmp);
       iMin = iMinDiff + 1;
    } else {
       sprintf(sSecond2, "%02d", iSecDiff);
       iMin = iMinDiff;
    }

    /*
     * 算分钟位
     */
    iMinDiff = (long) (iMin + atoi(sMinute1)) %60;
    iHourDiff =(long) (iMin + atoi(sMinute1)) /60;
    iMinTmp = iMinDiff - 60;
    
    if( iMinTmp >= 0 ) {
       sprintf(sMinute2, "%02d", iMinTmp);
       iHour = iHourDiff + 1;
    } else {
       sprintf(sMinute2, "%02d", iMinDiff);
       iHour = iHourDiff;
    }

    /*
     * 算小时位
     */
    iHourDiff = (iHour + atoi(sHour1)) %24;
    iDateDiff = (iHour + atoi(sHour1)) /24;
    iHourTmp = iHourDiff - 24;
    
    if( iHourTmp >= 0 ) {
       sprintf(sHour2, "%02d", iHourTmp);
       iDate = iDateDiff + 1;
    } else {
       sprintf(sHour2, "%02d", iHourDiff);
       iDate = iDateDiff;
    }
    
    lCountDate(sDate1,iDate,sDate2);
   
    sprintf(sResultDate,"%8.8s%2.2s%2.2s%2.2s",sDate2,sHour2,sMinute2,sSecond2);

    return 0;
}
