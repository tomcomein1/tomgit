#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/types.h>
#include <time.h>
#include "pbconstval.h" 
#include "pbstructdef.h" 
#ifdef ORACLE_DATABASE
EXEC SQL include "pbranchdb.h";
#else
#include "pbranchdb.h"
#endif
#include "pberrlog.h"
#include "pbglbvardef.h"
#include "pbbasefunc.h"
EXEC SQL include "pbsrv.h";

#define ZERO_AMT 0.001

long InnTransferChk();
long InsNetLog();
long InsNetDtl();
double atof();
char *net_trim(char* str);

struct s_str_data{
    char cstm_no[14+1];
    char prd_no[4 + 1];
    char master_card_no[19 + 1];
    char card_attr[1 + 1];
} ;

/************************************
InnTransferChk 网银行内转账前检查
input:
output
*************************************/
long
InnTransferChk ()
{
	return( 0);
}

#if 0
/************************************
InnTransferChk 网银行内转账前检查
input:
output
*************************************/
long
InnTransferChk ()
{
	/*定义变量*/
	char chk_flag[2+1];
	char pwd_type[2+1];
	char cardacc_flag[2+1];
	char pwd[128+1];
	char out_acc[32+1];
	char in_acc[32+1];
	char param[100+1];

	/*初始化变量*/
	memset( chk_flag, 0, sizeof( chk_flag));
	memset( pwd_type, 0, sizeof( pwd_type));
	memset( cardacc_flag, 0, sizeof( cardacc_flag));
	memset( pwd, 0, sizeof( pwd));
	memset( out_acc, 0, sizeof( out_acc));
	memset( in_acc, 0, sizeof( in_acc));
	memset( param, 0, sizeof( param));

	/*取密码检查标志*/
	GetPoolDataByName( "BUSIIB", "chkPwdFlg", 0, 0, chk_flag, 0);
	WriteLog( APP_LVL, "chk_flag[%s]", chk_flag);
	/*取卡账号标志*/
	GetPoolDataByName( "BUSIIB", "cardAcctFlg", 0, 0, cardacc_flag, 0);
	WriteLog( APP_LVL, "cardacc_flag[%s]", cardacc_flag);
	/*取密码*/
	GetPoolDataByName( "BUSIIB", "pwd", 0, 0, pwd, 0);
	WriteLog( APP_LVL, "pwd[%s]", pwd);
	/*取转出账号*/
	GetPoolDataByName( "BUSIIB", "payCardAcctNb", 0, 0, out_acc, 0);
	WriteLog( APP_LVL, "out_acc[%s]", out_acc);
	/*转入账号*/
	GetPoolDataByName( "BUSIIB", "rcvAcct", 0, 0, in_acc, 0);
	WriteLog( APP_LVL, "in_acc[%s]", in_acc);



	/*检查是否有密码检查*/
	if( atol(chk_flag) == 1) /*校验密码*/
	{
		/*密码类型*/
		GetPoolDataByName( "BUSIIB", "pwdTyp", 0, 0, pwd_type, 0);
		if( atol(pwd_type) == 1) /*查询密码*/
		{
			if( atol(cardacc_flag) == 1)	/*卡号*/
			{
				/*调用通用分户检查服务*/
				/*前处理*/
			}
			else if( atol(cardacc_flag) == 2)	/*账号*/
			{
				WriteLog( ERR_LVL, "账号无查询密码，查询方式有错");
				return( -1);
			}
			else
			{
				WriteLog( ERR_LVL, "错误的卡账号标志[%s]", cardacc_flag);
				return( -1);
			}
		}
		if( atol(pwd_type) == 2) /*交易密码*/
		{
			if( atol(cardacc_flag) == 1)	/*卡号*/
			{
				/*调用通用分户检查服务*/
			}
			else if( atol(cardacc_flag) == 2)	/*账号*/
			{
				/*调用通用分户检查服务*/
			}
			else
			{
				WriteLog( ERR_LVL, "错误的卡账号标志[%s]", cardacc_flag);
				return( -1);
			}
		}
		if( atol(pwd_type) == 3) /*网银交易密码*/
		{
				WriteLog( ERR_LVL, "暂不支持");
				return( -1);
			if( atol(cardacc_flag) == 1)	/*卡号*/
			{
			}
			else if( atol(cardacc_flag) == 2)	/*账号*/
			{
			}
			else
			{
				WriteLog( ERR_LVL, "错误的卡账号标志[%s]", cardacc_flag);
				return( -1);
			}
		}
	}
	return ( 0 );
}
#endif

/************************************
InnTransferPreReg 网银行内转账前记账准备
input:
output
*************************************/
long
InnTransferPreReg ()
{
    EXEC SQL BEGIN DECLARE SECTION;
        char out_inst[10+1];
        char inn_inst[10+1];
        char pb_date[10+1];
        char pb_seqno[10+1];
        char nofee_acc[32+1];
		/**** add by wyf 20130425 ****/
		char out_inst_fn[12+1];
		char tmp_inst_fn[4+1];
        double fee;
        double openinstfee = 0.00;
        double agtinstfee = 0.00;
        char chnlSeqNb[33];/**add by wangou 20140904**/
        struct s_str_data str_data;
    EXEC SQL END DECLARE SECTION;
    char summ_no[20+1];
    char out_acc[32+1];
    char in_acc[32+1];
    char fee_acc[32+1];
    char fee_flag[2+1];
    char feeout_acc[32+1];
    char feein_acc[32+1];
    char c_tran_amt[20+1];
    char c_fee[20+1];
    char c_src_fee[20+1];
    char s_avalbal[20+1];
    char s_bal[20+1];
    char s_real_amt[20+1];
    char s_post_fee[20+1];
    char s_real_fee[20+1];
    char core_err[60+1];
    char curr_type[6+1];
    char out_trancode[40+1];
    char out_chnlno[3+1];
    char dist_flag[1+1];
    char tag_in[100+1];
    char tag_out[100+1];
    char clr_acc[32+1];
    char sqlstr[256];
    char prd_no[4+1];
    char *p;
    char *q;
    long ret;
    long int_dist;
    long sdm_led_num;
    long cdm_led_num;
    long core_err_no;
    double real_fee;
    double real_amt;
	double post_fee;
    double tran_amt;
    double avalbal;
    double bal;
    char    trancode[40+1];
    char use[100+1];    /* add by fjx 20151127*/
   
    memset(&str_data     ,0 , sizeof(struct s_str_data)); 
    memset( out_acc, 0, sizeof( out_acc));
    memset( nofee_acc, 0, sizeof( nofee_acc));
    memset( in_acc, 0, sizeof( in_acc));
    memset( feeout_acc, 0, sizeof( feeout_acc));
    memset( feein_acc, 0, sizeof( feein_acc));
    memset( fee_flag, 0, sizeof( fee_flag));
    memset( c_fee, 0, sizeof( c_fee));
    memset( c_tran_amt, 0, sizeof( c_tran_amt));
    memset( summ_no, 0, sizeof( summ_no));
    memset( s_avalbal, 0, sizeof( s_avalbal));
    memset( s_bal, 0, sizeof( s_bal));
    memset( s_real_amt, 0, sizeof( s_real_amt));
    memset( s_post_fee, 0, sizeof( s_post_fee));
    memset( s_real_fee, 0, sizeof( s_real_fee));
    memset( core_err, 0, sizeof( core_err));
    memset( curr_type, 0, sizeof( curr_type));
    memset( out_trancode, 0, sizeof( out_trancode));
    memset( out_chnlno, 0, sizeof( out_chnlno));
    memset( out_inst, 0, sizeof( out_inst));
    memset( inn_inst, 0, sizeof( inn_inst));
    memset( dist_flag, 0, sizeof( dist_flag));
    memset( tag_in, 0, sizeof( tag_in));
    memset( tag_out, 0, sizeof( tag_out));
    memset( clr_acc, 0, sizeof( clr_acc));
    memset( pb_date, 0, sizeof( pb_date));
    memset( pb_seqno, 0, sizeof( pb_seqno));
    memset( sqlstr, 0, sizeof( sqlstr));
    memset( prd_no, 0, sizeof( prd_no));
    memset( use, 0, sizeof( use));
	/**** add by wyf 20130425 ****/
	memset( out_inst_fn, 0, sizeof( out_inst_fn));
	memset( tmp_inst_fn, 0, sizeof( tmp_inst_fn));
	memset( chnlSeqNb, 0, sizeof( chnlSeqNb));
	memset( trancode, 0, sizeof( trancode));
	
    tran_amt = 0.00;
    fee = 0.00;
    avalbal =0.00;
    bal =0.00;
    post_fee = 0.00;
    real_amt = 0.00;
    real_fee = 0.00;
    core_err_no = 0;
    ret = 0;
    int_dist = 4;

    p=NULL;
    q=NULL;

    /*报文头*/
    /*柜员*/
    PutPoolDataByName( "ABSHEAD", "_tlr_no", 0, 0, "888888", 0);
    /*机构*/
    /*转出开户行*/
    GetPoolDataByName(  "ABSHEAD", "organ_no",0, 0, out_inst, 0);
    rtrim(out_inst);
    WriteLog( APP_LVL, "out_inst[%s]", out_inst);
    /*转入开户行*/
    GetPoolDataByName(  "CBS", "BatNo",0, 0, inn_inst, 0);
    rtrim(inn_inst);
    WriteLog( APP_LVL, "inn_inst[%s]", inn_inst);
    /*取核心日期*/
    PayGetCoreDate( pb_date);
    /*取交易流水*/
    GetPoolDataByName( "ABSHEAD", "_seq_no", 0, 0, pb_seqno, 0);
    /*计算跨度*/
    ret = ChkInputInstScope ( inn_inst, out_inst);
    if ( ret < 0)
    {
        WriteLog ( ERR_LVL, "取跨度失败");
        strcpy( core_err, "取跨度失败");
        core_err_no = 99999;
        PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char*)&core_err_no,0);
        PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, core_err,0);
        return ( -1);
    }
    else
    {
        int_dist = ret;
        sprintf ( dist_flag, "%d", ret);
        WriteLog ( ERR_LVL, "跨度dist_flag[%c]", dist_flag[0]);
    }
    /*渠道*/
    PutPoolDataByName( "ABSHEAD", "chnl_no", 0, 0, "W", 0);

    /*核心记账属性*/
    PutPoolDataByName( "CBS", "AccSign", 0, 0, "0", 0);    /*0-记账 1-开户*/
    /*摘要*/
    /* add by fjx 20151127 */
    GetPoolDataByName( "BUSIIB", "use", 0, 0, use, 0);
    rtrim ( use );
    if ( strlen ( use ) == 0 )
        strcpy( use, "行内转账");
    PutPoolDataByName( "CBS", "Summary", 0, 0, use, 0);
    /*PutPoolDataByName( "CBS", "Summary", 0, 0, "行内转账", 0);*/
    /* add end*/
    /*摘要码*/
    strcpy( summ_no,"200");
    PutPoolDataByName( "CBS", "KeyData", 0, 0, summ_no, 0);
    /*币种*/
    GetPoolDataByName( "BUSIIB", "payCurTyp", 0, 0, curr_type, 0 );
    PutPoolDataByName( "BUSIIB", "currencyTyp", 0, 0, curr_type, 0 );
    ret = NetParaConv( "currencyTyp|cashFlg|pwdTyp");
    if( ret)
    {
        WriteLog( ERR_LVL, "网银参数转换错");
        strcpy( core_err, "网银参数转换错");
        core_err_no = -1;
        PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, "39999", 0 );
        PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char*)&core_err_no,0);
        PutPoolDataByName( "BUSIIB", "thsdesc", 0, 0, core_err, 0 );
        PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, core_err,0);
        return( -1);
    }
    GetPoolDataByName( "PAGTBUF", "currtype", 0, 0, curr_type, 0);
    PutPoolDataByName( "CBS", "CurrType", 0, 0, curr_type, 0);

    GetPoolDataByName( "BUSIIB", "payCardAcctNb", 0, 0, out_acc, 0);

    /*原手续费*/
    GetPoolDataByName( "BUSIIB", "fee", 0, 0, c_src_fee, 0);
    GetPoolDataByName( "BUSIIB", "feeFlg", 0, 0, fee_flag, 0);

    WriteLog( APP_LVL, "原手续费标志[%s],原手续费金额[%s]", fee_flag , c_src_fee);

    /*取产品码*/
    if ( IsCardNo (out_acc) != 0 )
    {
        if (out_acc[6]=='1')
        {
            sprintf( sqlstr,"select cstm_no,prd_no  from t_cdm_ledger where acc = '%s'",out_acc);
        }
        else
        {
            sprintf( sqlstr,"select cstm_no,prd_no  from t_sdm_ledger where acc = '%s'",out_acc);
        }
        WriteLog( ERR_LVL, "sqlstr[%s]card_no[%s]\n", sqlstr,out_acc);
        ret= PqQry( out_inst, &str_data, sqlstr );
        memset( prd_no, 0, sizeof( prd_no));
        strcpy( prd_no, str_data.prd_no);
    }     
    else
    {
        sprintf( sqlstr, "select prd_no from t_card_ledger where card_no='%s' ", out_acc);
        WriteLog( ERR_LVL, "sqlstr[%s]card_no[%s]\n", sqlstr,out_acc);
        ret = PqQry( out_inst,prd_no,sqlstr);
    }

    if( ret< 0)
    {
        WriteLog( ERR_LVL, "调用PQDS查询出错[%d],inst_no[%s],sqlstr[%s]", ret,out_inst,sqlstr);
        strcpy( core_err, "取产品码失败");
        core_err_no = -1;
        PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, "99999", 0 );
        PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char*)&core_err_no,0);
        PutPoolDataByName( "BUSIIB", "thsdesc", 0, 0, core_err, 0 );
        PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, core_err,0);
        return( -1);
    }
    if( ret == 100)
    {
        WriteLog ( DEBUG_LVL1, "无此帐号信息!");
        PutPoolDataByName( "MSGXML", "RETCODE", 0, 0, "003", 0);
        PutPoolDataByName( "MSGXML", "RETINFO", 0, 0, "没有查到此账号的卡产品信息", 0);
        return (-1);
    }

    /*计算手续费*/
    GetPoolDataByName( "BUSIIB", "transAmt", 0, 0, c_tran_amt, 0);
    tran_amt = atof( c_tran_amt);
    sprintf( tag_in, "AMT1:%.2f;DIST:%s;", tran_amt, dist_flag);
    if( strlen(prd_no) > 0)
        sprintf( tag_in, "%sE001:%s;",tag_in,prd_no);

	/**** add by wyf 20130425 ****/
	GetInstFn( out_inst, out_inst_fn);
	strncpy(tmp_inst_fn,out_inst_fn,4);
	WriteLog( APP_LVL, "tmp_inst_fn[%s]", tmp_inst_fn);
	if( strlen(tmp_inst_fn) > 0)
        {
		sprintf(tag_in, "%sD005:%s;", tag_in, tmp_inst_fn);
                tmp_inst_fn[2] = '\0';
		sprintf(tag_in, "%sD006:%02s;", tag_in, tmp_inst_fn);
        }

    WriteLog( APP_LVL, "tag_in[%s]", tag_in);
    /*add by xxj 20121120*/
    GetPoolDataByName( "BUSIIB", "payCardAcctNb", 0, 0, nofee_acc, 0);
    trim( nofee_acc );
    EXEC SQL SELECT * FROM t_pb_cstm_fee
    WHERE cstm_acc =:nofee_acc;
    if( sqlca.sqlcode )
    {
        if( SQLCODE == SQLNOTFOUND )
        {
            WriteLog( ERR_LVL,"此账号为非特约商户" );
            ret = RuleEngin( "R0002", 0, tag_in, tag_out);
            if( ret < 0)
            {
                WriteLog( ERR_LVL, "调用手续费试算失败");
                strcpy( core_err, "手续费试算失败");
                core_err_no = -1;
                PutPoolDataByName( "BUSIIB", "thsdesc", 0, 0, core_err, 0);
                PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char*)&core_err_no,0);
                PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, core_err,0);
                return( -1);
            }
            WriteLog( APP_LVL, "tag_out[%s]", tag_out);
            p = strstr( tag_out, "FEE1");
            WriteLog( APP_LVL, "p[%s]", p);
            q = strchr( p, ':' );
            WriteLog( APP_LVL, "q[%s]", q);
            memset( c_fee, 0, sizeof(c_fee));
            strcpy( c_fee, q +1);
            WriteLog( APP_LVL, "c_fee[%s]", c_fee);
            fee = atof( c_fee );
       }
       else
       {
            WriteLog( ERR_LVL,"查询免手续费商户表![%d]",sqlca.sqlcode  );
            return( -1 );
        }
    }
    else
    {
        fee_flag[0] = '0';
        fee = 0.00;
    }
    /*add end by xxj 20121120*/
    /* modiffy by xxj 20121123
    ret = RuleEngin( "R0002", 0, tag_in, tag_out);
    if( ret < 0)
    {
        WriteLog( ERR_LVL, "调用手续费试算失败");
        strcpy( core_err, "手续费试算失败");
        core_err_no = -1;
        PutPoolDataByName( "BUSIIB", "thsdesc", 0, 0, core_err, 0);
        PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char*)&core_err_no,0);
        PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, core_err,0);
        return( -1);
    }
    WriteLog( APP_LVL, "tag_out[%s]", tag_out);
    p = strstr( tag_out, "FEE1");
    WriteLog( APP_LVL, "p[%s]", p);
    q = strchr( p, ':' );
    WriteLog( APP_LVL, "q[%s]", q);
    memset( c_fee, 0, sizeof(c_fee));
    strcpy( c_fee, q +1);
    WriteLog( APP_LVL, "c_fee[%s]", c_fee);
    fee = atof( c_fee );
    */

    /*取手续费上限参数*/
    ret = PayPubGetSysContent("NET", "hn_fee_max",c_fee);
    if( ret)
    {
        WriteLog( ERR_LVL, "取行内手续费上限错");
        strcpy( core_err, "取行内手续费上限错");
        core_err_no = -1;
        PutPoolDataByName( "BUSIIB", "thsdesc", 0, 0, core_err, 0);
        PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char*)&core_err_no,0);
        PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, core_err,0);
        return( -1);
    }
    WriteLog( APP_LVL,"fee_max[%f]", atof(c_fee));
    if( fee >= atof(c_fee))
        fee = atof(c_fee);

    /*市内 或则 跨市不收手续费 或则算出手续费为0*/
    if( (int_dist < 4) || \
        (int_dist == 4 && fee_flag[0] == '0') || \
        (fee < ZERO_AMT))
    {
        /*交易子码*/
        PutPoolDataByName( "CBS", "SubTranCode", 0, 0, "01", 0);

        /*账号*/
        GetPoolDataByName( "BUSIIB", "payCardAcctNb", 0, 0, out_acc, 0);
        GetPoolDataByName( "BUSIIB", "rcvAcct", 0, 0, in_acc, 0);
        WriteLog( APP_LVL, "out_acc[%s]in_acc[%s]", out_acc, in_acc);

        PutPoolDataByName( "CBS", "Account", 0, 0, out_acc, 0);
        PutPoolDataByName( "CBS", "Account", 0, 1, in_acc, 0);
        PutPoolDataByName( "BUSIIB", "payCardAcctNb", 0, 0, out_acc, 0);
        PutPoolDataByName( "BUSIIB", "payCardAcctNb", 0, 1, in_acc, 0);

        /*金额*/
        GetPoolDataByName( "BUSIIB", "transAmt", 0, 0, c_tran_amt, 0);
        tran_amt = atof( c_tran_amt);
        PutPoolDataByName( "CBS", "Amt", 0, 0, (char*)&tran_amt, 0);
        PutPoolDataByName( "CBS", "Amt", 0, 1, (char*)&tran_amt, 0);

        fee_flag[0] = '0';
    }
    /*省内*/
    else if(int_dist == 4 && fee_flag[0] != '0' && fee > ZERO_AMT)
    {
        /*交易子码*/
        PutPoolDataByName( "CBS", "SubTranCode", 0, 0, "02", 0);

        /*账号*/
        GetPoolDataByName( "BUSIIB", "payCardAcctNb", 0, 0, out_acc, 0);
        GetPoolDataByName( "BUSIIB", "rcvAcct", 0, 0, in_acc, 0);
        WriteLog( APP_LVL, "out_acc[%s]in_acc[%s]", out_acc, in_acc);

        PutPoolDataByName( "CBS", "Account", 0, 0, out_acc, 0);
        PutPoolDataByName( "CBS", "Account", 0, 1, in_acc, 0);
        PutPoolDataByName( "BUSIIB", "payCardAcctNb", 0, 0, out_acc, 0);
        PutPoolDataByName( "BUSIIB", "payCardAcctNb", 0, 1, in_acc, 0);

        ret = PayPubGetSysContent("NET", "undis_fee_acc",fee_acc);
        if( ret)
        {
            WriteLog( ERR_LVL, "取手续费挂帐户错");
            strcpy( core_err, "取手续费挂帐户错");
            core_err_no = -1;
            PutPoolDataByName( "BUSIIB", "thsdesc", 0, 0, core_err, 0);
            PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char*)&core_err_no,0);
            PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, core_err,0);
            return( -1);
        }

        sprintf( feein_acc, "%s015%s",out_inst, fee_acc);

        PutPoolDataByName( "CBS", "Account", 0, 2, out_acc, 0);
        PutPoolDataByName( "CBS", "Account", 0, 3, feein_acc, 0);
        PutPoolDataByName( "BUSIIB", "payCardAcctNb", 0, 2, out_acc, 0);
        PutPoolDataByName( "BUSIIB", "payCardAcctNb", 0, 3, feein_acc, 0);

        /*金额*/
        GetPoolDataByName( "BUSIIB", "transAmt", 0, 0, c_tran_amt, 0);
        tran_amt = atof( c_tran_amt);
        PutPoolDataByName( "CBS", "Amt", 0, 0, (char*)&tran_amt, 0);
        PutPoolDataByName( "CBS", "Amt", 0, 1, (char*)&tran_amt, 0);
        PutPoolDataByName( "CBS", "Amt", 0, 2, (char*)&fee, 0);
        PutPoolDataByName( "CBS", "Amt", 0, 3, (char*)&fee, 0);

        fee_flag[0] = '1';
    }

    if( fee_flag[0] == '1' )
    {
        ret = FRFeeOfInst( fee, &openinstfee, &agtinstfee );
        if( ret != 0 )
        {
            WriteLog( APP_LVL, "分润手续费试算错!" );
            strcpy( core_err, "分润手续费试算错!" );
            core_err_no = 99999;
            PutPoolDataByName( "BUSIIB", "thsdesc", 0, 0, core_err, 0 );
            PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char*)&core_err_no,0 );
            PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, core_err,0);
            return ( -1 );
        }
        WriteLog( APP_LVL, "fee[%.2f]openinstfee[%.2f]agtinstfee[%.2f]", fee, openinstfee, agtinstfee );
    }
    else
    {
        fee = 0.00;
    }

    /*实际收手续费*/
    real_fee = fee;
    sprintf( s_real_amt, "%.2f", fee);
    PutPoolDataByName( "BUSIIB", "realTotalFee", 0, 0, s_real_amt, 0);
    WriteLog( APP_LVL, "fee[%f]", fee);
    /*邮电费*/
    sprintf( s_post_fee, "%.2f", post_fee);
    PutPoolDataByName( "BUSIIB", "realPostFee", 0, 0, s_post_fee, 0);
    /*实际手续费*/
    sprintf( s_real_fee, "%.2f", real_fee);
    PutPoolDataByName( "BUSIIB", "realManFee", 0, 0, s_real_fee, 0);

    /*默认向转出方收手续费*/
    strcpy(feeout_acc,out_acc);

    PutPoolDataByName( "ABSHEAD", "organ_no", 0, 0, out_inst, 0);
    PutPoolDataByName( "ABSHEAD", "query_inst", 0, 0, inn_inst, 0);
    PutPoolDataByName( "CBS", "distflag", 0, 0, dist_flag, 0);
    PutPoolDataByName( "BUSIIB", "feeFlg", 0, 0, fee_flag, 0);
    PutPoolDataByName( "BUSIIB", "payAcct", 0, 0, feeout_acc, 0);
    PutPoolDataByName( "CBS", "Phone", 0, 0, feein_acc, 0);
    PutPoolDataByName( "CBS", "Fee1", 0, 0, (char *)&fee, 0);

    /*登记机构及手续费信息*/
    EXEC SQL UPDATE t_pb_net_dtl
        SET payinstno = :out_inst, 
            rcvinstno = :inn_inst, 
            accinstno = :inn_inst,
            fee = :agtinstfee,
            fee3 = :openinstfee,
            fee1 = :fee
        WHERE trandate = :pb_date
        AND seqno = :pb_seqno;
    if( sqlca.sqlcode || sqlca.sqlerrd[2] != 1)
    {
        WriteLog( ERR_LVL, "update net_dtl err[%d][%d]", sqlca.sqlcode, sqlca.sqlerrd[2]);
        WriteLog( ERR_LVL, "pb_date[%s]pb_seqno[%s]", pb_date, pb_seqno);
        strcpy( core_err, "数据库操作失败");
        core_err_no = -1;
        PutPoolDataByName( "BUSIIB", "thsdesc", 0, 0, core_err, 0);
        PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char*)&core_err_no,0);
        PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, core_err,0);
        return( -1);
    }

/***add by wo  20140904 解决流水号不一致的问题 ***/
    GetPoolDataByName( "BUSIIB", "chnlSeqNb", 0, 0, chnlSeqNb, 0);
     rtrim( chnlSeqNb );
    GetPoolDataByName( "PBSYS", "RTranCode", 0, 0, trancode, 0 );
    rtrim( trancode );
    if( strcmp(trancode, "CBS0000100") == 0  && strlen(chnlSeqNb) !=0  )
    {
	WriteLog( APP_LVL, "test[%s]",chnlSeqNb );
        EXEC SQL UPDATE t_pb_net_dtl
            SET  chnlseqno = :chnlSeqNb
            WHERE  trandate = :pb_date
            AND seqno = :pb_seqno;
        if( sqlca.sqlcode || sqlca.sqlerrd[2] != 1)
        {
            WriteLog( ERR_LVL, "update net_dtl err[%d][%d]", sqlca.sqlcode, sqlca.sqlerrd[2]);
            WriteLog( ERR_LVL, "pb_date[%s]pb_seqno[%s]", pb_date, pb_seqno);
            strcpy( core_err, "数据库操作失败");
            core_err_no = -1;
            PutPoolDataByName( "BUSIIB", "thsdesc", 0, 0, core_err, 0);
            PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char*)&core_err_no,0);
            PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, core_err,0);
            return( -1);
        }
    }
/***end by wo**/

    /*add by zhaozegui for 明细查询 20130419*/
    if( InsertChnlTxInfo() )
    {
        WriteLog(ERR_LVL, "\n===call InsertChnlTxInfo fail===\n");
    }

    /*预计算转出账户余额 可用余额*/
    GetPoolDataByName( "BUSIIB", "payAvlBal", 0, 0, s_avalbal, 0);
    WriteLog( APP_LVL, "s_avalbal before[%s]", s_avalbal);
    avalbal = atof(s_avalbal);
    if( fee > ZERO_AMT)
        avalbal = avalbal - ( tran_amt + fee);
    else
        avalbal -= tran_amt;
    memset( s_avalbal, 0, sizeof( s_avalbal));
    sprintf( s_avalbal, "%.2f", avalbal);
    WriteLog( APP_LVL, "s_avalbal after[%s]", s_avalbal);
    PutPoolDataByName( "BUSIIB", "payAvlBal", 0, 0, s_avalbal, 0);

    GetPoolDataByName( "BUSIIB", "payBal", 0, 0, s_bal, 0);
    WriteLog( APP_LVL, "s_bal before[%s]", s_bal);
    bal =  atof( s_bal);
    if( fee > ZERO_AMT)
        bal = bal - ( tran_amt + fee);
    else
        bal -= tran_amt;
    memset( s_bal, 0, sizeof( s_bal));
    sprintf( s_bal, "%.2f", bal);
    WriteLog( APP_LVL, "s_bal after[%s]", s_bal);
    PutPoolDataByName( "BUSIIB", "payBal", 0, 0, s_bal, 0);
    return( 0);
}

/************************************
InsNetDtl 网银交易明细表登记
input: param [0]-0非中间业务 1-中间业务
			 [1]-0本行业务 1-跨行业务
output
*************************************/
long
InsNetDtl( char *param)
{
	EXEC SQL BEGIN DECLARE SECTION;
	struct s_pb_net_dtl net_dtl;
	EXEC SQL END DECLARE SECTION;
	char c_transamt[16+1];
	char c_fee[16+1];
	char tmp_buf[20+1];

	memset( &net_dtl, 0, sizeof( struct s_pb_net_dtl));
	memset( c_transamt, 0, sizeof( c_transamt));
	memset( c_fee, 0, sizeof( c_fee));

	/*交易日期*/
	PayGetCoreDate( net_dtl.trandate);
	/*行内流水号*/
	GetPoolDataByName( "ABSHEAD", "_seq_no", 0, 0, net_dtl.seqno, 0);
	/*网银流水号*/
	/**
	GetPoolDataByName( "BUSIIB", "chnlSeqNb", 0, 0, net_dtl.chnlseqno, 0);
	**/
	GetPoolDataByName( "BUSIIB", "thmseqNb", 0, 0, net_dtl.chnlseqno, 0);
	/*交易时间*/
	dtcurrent( &net_dtl.trantime );
	/**add by sqf for 交易明细表增加网银日期 begin 20110701**/
	GetPoolDataByName( "BUSIIB", "thmsndDt", 0, 0, net_dtl.wy_date, 0);
	/**add by sqf for 交易明细表增加网银日期 end 20110701**/
	/*网银交易码*/
	GetPoolDataByName( "PBSYS", "RTranCode", 0, 0, net_dtl.outtrancode, 0);

	/*卡账号标志*/
	GetPoolDataByName( "BUSIIB", "cardAcctFlg", 0, 0, net_dtl.cardaccflag, 0);
	/*转出账号*/
	GetPoolDataByName( "BUSIIB", "payCardAcctNb", 0, 0, net_dtl.payacc, 0);
	/*转出币种*/
	GetPoolDataByName( "BUSIIB", "payCurTyp", 0, 0, net_dtl.paycurrtype, 0);
	/*转出钞汇标志*/
	GetPoolDataByName( "BUSIIB", "payCashFlg", 0, 0, net_dtl.paycashflag, 0);
	/*转出客户名称*/
	GetPoolDataByName( "BUSIIB", "payCustNm", 0, 0, net_dtl.paycustname, 0);
	/*转出网点代码*/
	GetPoolDataByName( "BUSIIB", "payBrchID", 0, 0, net_dtl.payopeninst, 0);
	/*转出网点名称*/
	GetPoolDataByName( "BUSIIB", "payBrchNm", 0, 0, net_dtl.payopenname, 0);
	/*转入账号*/
	GetPoolDataByName( "BUSIIB", "rcvAcct", 0, 0, net_dtl.rcvacc, 0);
	/*转入客户名*/
	GetPoolDataByName( "BUSIIB", "rcvCustNm", 0, 0, net_dtl.rcvcustname, 0);
	/*转入网点代码*/
	GetPoolDataByName( "BUSIIB", "rcvBrchID", 0, 0, net_dtl.rcvopeninst, 0);
	/*转入网点名称*/
	GetPoolDataByName( "BUSIIB", "rcvBrchNm", 0, 0, net_dtl.rcvopenname, 0);
	/**add by sqf for 增加接收行行号和行名 begin 20111208**/
	GetPoolDataByName( "BUSIIB", "rcvAcctSvcr", 0, 0, net_dtl.backup1, 0);
	GetPoolDataByName( "BUSIIB", "rcvAcctSvcrNm", 0, 0, net_dtl.backup2, 0);
	/**add by sqf for 增加接收行行号和行名 end 20111208**/
	/*转账金额*/
	GetPoolDataByName( "BUSIIB", "transAmt", 0, 0, c_transamt, 0);
	net_dtl.transamt = atof( c_transamt);
	WriteLog( APP_LVL, "c_transamt[%s]net_dtl.transamt[%f]",c_transamt, net_dtl.transamt);
	/*手续费*/
	GetPoolDataByName( "BUSIIB", "fee", 0, 0, c_fee, 0);
	net_dtl.fee = atof( c_fee);
	WriteLog( APP_LVL, "c_fee[%s]net_dtl.fee[%f]",c_fee, net_dtl.fee);
	/*手续费标志*/
	GetPoolDataByName( "BUSIIB", "feeFlg", 0, 0, net_dtl.feeflag, 0);
	/*用途*/
	GetPoolDataByName( "BUSIIB", "use", 0, 0, net_dtl.use, 0);
	/*备注*/
	GetPoolDataByName( "BUSIIB", "memo", 0, 0, net_dtl.note, 0);
	/*摘要代码*/
	GetPoolDataByName( "BUSIIB", "remarkCd", 0, 0, net_dtl.remarkcd, 0);
	/*摘要*/
	GetPoolDataByName( "BUSIIB", "remark", 0, 0, net_dtl.remark, 0);
	/*交易状态默认为失败*/
	strcpy( net_dtl.transtats, "101");	/*[0]0-成功 1-失败 [1]0-未对账 1-对账 [2]0-对平 1-未对平*/

    /* Added by Ma Shaojie for assign the "transchnl" 20120914 - Start */
	trim( net_dtl.outtrancode );
	if( strcmp(net_dtl.outtrancode,"CBS0000110")==0 )
	{
		GetPoolDataByName( "BUSIIB", "transferChnl", 0, 0, net_dtl.transchnl, 0);
		WriteLog( APP_LVL, "chnltype[%s]", net_dtl.transchnl);
		trim( net_dtl.transchnl );
		if( strlen(net_dtl.transchnl)==0 )
		{
			memset( tmp_buf, 0x00, sizeof(tmp_buf) );
			if( PayPubGetSysContent("NET","cnap_beps_amt",tmp_buf) )
			{
				WriteLog( ERR_LVL, "取大小额区分金额错");
				return (-1);
			}
			WriteLog( APP_LVL, "transamt[%f], tmp_buf[%s]", net_dtl.transamt, tmp_buf );
			if( net_dtl.transamt>atof(tmp_buf) )      /*大于为大额*/
			{
				PutPoolDataByName( "BUSIIB", "transferChnl", 0, 0, "2", 0);
				strcpy( net_dtl.transchnl,"2" );
			}
			else
			{
				PutPoolDataByName( "BUSIIB", "transferChnl", 0, 0, "1", 0);
				strcpy( net_dtl.transchnl,"1" );
			}
		}
	}
	/* 20120914 - End */

	/*中间业务信息*/
	if( param[0] == '1')
	{
	}

	/*跨行业务*/
	if( param[1] == '1')
	{
	}

	EXEC SQL INSERT INTO t_pb_net_dtl VALUES( :net_dtl);
	if( sqlca.sqlcode || sqlca.sqlerrd[2] != 1)
	{
		WriteLog( ERR_LVL, "插入网银明细表错[%d][%d]", sqlca.sqlcode, sqlca.sqlerrd[2]);
		return( -1);
	}

	return( 0);
}
/************************************
InsNetLog 网银交易日志表登记
input: param [0]-0非中间业务 1-中间业务
			 [1]-0本行业务 1-跨行业务
output
*************************************/
long
InsNetLog( char *param)
{
	EXEC SQL BEGIN DECLARE SECTION;
	struct s_pb_net_log net_log;
	EXEC SQL END DECLARE SECTION;
	dtime_t time;
	dtime_t time1;

	memset( &net_log, 0, sizeof(struct s_pb_net_log));
	/**add by sqf for 初始化 begin 20110701**/
	memset( &time, 0,sizeof( time ) );
	memset( &time1, 0,sizeof( time1 ) );
	/**add by sqf for 初始化 end 20110701**/

	/*交易日期*/
	PayGetCoreDate( net_log.trandate);
	/*行内流水号*/
	get_TTseqno( net_log.seqno);
	WriteLog( ERR_LVL, "net_log.seqno[%s]", net_log.seqno);
	PutPoolDataByName( "PBSYS", "SrcJourNo", 0, 0, net_log.seqno, 0);
	PutPoolDataByName( "ABSHEAD", "_seq_no", 0, 0, net_log.seqno, 0);
	PutPoolDataByName( "BUSIIB", "hostSeqNb", 0, 0, net_log.seqno, 0);
	/*网银流水号*/
	/**
	GetPoolDataByName( "BUSIIB", "chnlSeqNb", 0, 0, net_log.chnlseqno, 0);
	**/
	GetPoolDataByName( "BUSIIB", "thmseqNb", 0, 0, net_log.chnlseqno, 0);
	/**add by sqf for 交易日志表增加网银日期 begin 20110701**/
	GetPoolDataByName( "BUSIIB", "thmsndDt", 0, 0, net_log.wy_date, 0);
	/**add by sqf for 交易日志表增加网银日期 end 20110701**/
	/*交易时间*/
	dtcurrent( &time );
	dttoasc( &time, net_log.trantime);
	/*交易开始时间*/
	strcpy( net_log.begintime, net_log.trantime);
	WriteLog( ERR_LVL, "net_log.begintime[%s]", net_log.begintime);
	WriteLog( ERR_LVL, "net_log.trantime[%s]", net_log.trantime);

	/*网银交易码*/
	GetPoolDataByName( "PBSYS", "RTranCode", 0, 0, net_log.outtrancode, 0);

	/*卡账号标志*/
	GetPoolDataByName( "BUSIIB", "cardAcctFlg", 0, 0, net_log.cardaccflag, 0);
	/*账号*/
	GetPoolDataByName( "BUSIIB", "payCardAcctNb", 0, 0, net_log.acc, 0);
	/*默认交易状态为失败*/
	net_log.transtats[0] ='2';

	/*中间业务*/
	if( param[0] == '1')
	{
	}
	/*跨行业务*/
	if( param[1] == '1')
	{
	}

	EXEC SQL INSERT INTO t_pb_net_log VALUES( :net_log);
	if( sqlca.sqlcode || sqlca.sqlerrd[2] != 1)
	{
		WriteLog( ERR_LVL, "插入网银日志表错[%d][%d]", sqlca.sqlcode, sqlca.sqlerrd[2]);
		return( -1);
	}

	return( 0);
}

/************************************
NetBankLogReg 网银交易日志及流水登记
input: param [0]-0非中间业务 1-中间业务
			 [1]-0本行业务 1-跨行业务
			 [2]-0非记账交易 1-记账交易
output
*************************************/
long
NetBankLogReg( char *param)
{
	char err_code[6+1];
	char err_msg[40+1];
	long errcode = 0;
	long ret;
	
    /* Added by MSJ for gas-refunding 20121016 - Start */
    char remarkCd[16+1];
    char outtrancode[10+1];
    char acc[32+1];
    /* 20121016 - End */

    /* Added by MSJ for dealing enter 20141109 - Start */
    char payCustNm[128+1];
    char rcvCustNm[128+1];
    char memo[128+1];
    char use[128+1];
    /* Added by MSJ for dealing enter 20141109 - End */

    ret = 0;


    memset( err_code, 0x00, sizeof( err_code ) );
    memset( err_msg, 0x00, sizeof( err_msg ) );
    memset( payCustNm, 0x00, sizeof( payCustNm ) );
    memset( rcvCustNm, 0x00, sizeof( rcvCustNm ) );
    memset( memo, 0x00, sizeof( memo ) );
    memset( use, 0x00, sizeof( use ) );

	WriteLog( ERR_LVL, "param[%s]", param);

    /* Added by MSJ for gas-refunding 20121016 - Start */
    memset( remarkCd, 0x00, sizeof(remarkCd) );
    memset( outtrancode, 0x00, sizeof(outtrancode) );
    memset( acc, 0x00, sizeof(acc) );
    /* 网银交易码 */
    GetPoolDataByName( "PBSYS", "RTranCode", 0, 0, outtrancode, 0);
    rtrim(outtrancode);
  
    /* 摘要代码 */
    GetPoolDataByName( "BUSIIB", "remarkCd", 0, 0, remarkCd, 0);
    rtrim(remarkCd);

    if( strcmp(outtrancode, "CBS1000600")==0
          && strcmp(remarkCd, "17001001")==0
      )
    {
        ret=gas_refund();
        if( ret!=0 )
        {
            WriteLog( ERR_LVL, "调用煤气退费失败！" );
            return (-1);
      }
    }

	/* 南充燃气缴费未传送payCardAcctNb域 */
	if( strcmp(outtrancode, "CBS1000610")==0
		&& strcmp(remarkCd, "27001002")==0
      )
    {
		memset( acc, 0x00, sizeof(acc) );
		GetPoolDataByName( "BUSIIB", "payAcct", 0, 0, acc, 0);
		rtrim(acc);
		PutPoolDataByName( "RCBIB", "payCardAcctNb", 0, 0, acc, 0);
		PutPoolDataByName( "BUSIIB", "payCardAcctNb", 0, 0, acc, 0);
	}
    /* 20121016 - End */

    /* Added by MSJ for dealing enter 20141109 - Start */
    /*转出客户名称*/
    GetPoolDataByName( "BUSIIB", "payCustNm", 0, 0, payCustNm, 0);
    /*转入客户名*/
    GetPoolDataByName( "BUSIIB", "rcvCustNm", 0, 0, rcvCustNm, 0);
    /*用途*/
    GetPoolDataByName( "BUSIIB", "use", 0, 0, use, 0);
    /*备注*/
    GetPoolDataByName( "BUSIIB", "memo", 0, 0, memo, 0);

    trim(payCustNm);
    if( strlen(payCustNm)>0 )
    {
        net_trim(payCustNm);
        WriteLog(ERR_LVL, "new payCustNm[%s]", payCustNm);
        PutPoolDataByName( "BUSIIB", "payCustNm", 0, 0, payCustNm, 0);
    }

    trim(rcvCustNm);
    if( strlen(rcvCustNm)>0 )
    {
        net_trim(rcvCustNm);
        WriteLog(ERR_LVL, "new rcvCustNm[%s]", rcvCustNm);
        PutPoolDataByName( "BUSIIB", "rcvCustNm", 0, 0, rcvCustNm, 0);
    }

    trim(use);
    if( strlen(use)>0 )
    {
        net_trim(use);
        WriteLog(ERR_LVL, "new use[%s]", use);
        PutPoolDataByName( "BUSIIB", "use", 0, 0, use, 0);
    }

    trim(memo);
    if( strlen(memo)>0 )
    {
        net_trim(memo);
        WriteLog(ERR_LVL, "new memo[%s]", memo);
        PutPoolDataByName( "BUSIIB", "memo", 0, 0, memo, 0);
    }
    /* Added by MSJ for dealing enter 20141109 - End */

	/**
	PutPoolDataByName( "BUSIIB", "certTyp", 0, 0, "0", 0 );
	**/

	/* add by songyang 20101029 */
	PutPkgHeadPubDate();
	/* add end */

	/*插入交易日志*/
	ret = InsNetLog( param);
	if( ret)
	{
		WriteLog( ERR_LVL, "插入交易日志表失败");
		strcpy( err_code, "99999" );
		errcode = 99999;
		strcpy( err_msg, "插入交易日志表失败" );
		PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode, 0 );
		PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
		return( -1);
	}
	if( param[2] == '1')
	{
		ret = InsNetDtl( param);
		if( ret)
		{
			WriteLog( ERR_LVL, "插入流水表失败");
			strcpy( err_code, "99999" );
			errcode = 99999;
			strcpy( err_msg, "插入流水表失败" );
			PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode, 0 );
			PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
			return( -1);
		}
	}

	WriteLog ( APP_LVL, "网银日志登记成功");

	return ( 0);
}

/************************************
InnTransAccChk 网银账号检查
input  param 0-转出账号检查
			 1-转入账号检查
output
*************************************/
long
InnTransAccChk( char *param)
{
	char acc[32+1];
	char outmainacc[32+1];
	char inmainacc[32+1];
	char acc_stat[100+1];
	char ret_msg[40+1];
	char trancode[6+1];
	char chnl_no[3+1];
	long s_cdm_led_num[10];
	long s_sdm_led_num[10];
	long ret;
	long cdm_led_num;
	long sdm_led_num;
	long ret_code;

	memset( acc, 0, sizeof( acc));
	memset( acc_stat, 0, sizeof( acc_stat));
	memset( ret_msg, 0, sizeof( ret_msg));
	memset( trancode, 0, sizeof( trancode));
	memset( chnl_no, 0, sizeof( chnl_no));
	memset( outmainacc, 0, sizeof( outmainacc) );
	memset( inmainacc, 0, sizeof( inmainacc) );
	memset( s_cdm_led_num, 0, sizeof( s_cdm_led_num) );
	memset( s_sdm_led_num, 0, sizeof( s_sdm_led_num) );
	ret = 0;
	cdm_led_num = 0;
	sdm_led_num = 0;
	ret_code = 0;

	/*取内部交易码*/
	GetPoolDataByName( "PBSYS", "TranCode", 0, 0, trancode, 0);
	/*转出账号检查*/
	if( param[0] == '0')
	{
		GetPoolDataByName( "BUSIIB", "payCardAcctNb", 0, 0, acc, 0);
		rtrim(acc);
		WriteLog( APP_LVL, "out_acc[%s]", acc);
	}
	else /*转入账号检查*/
	{
		GetPoolDataByName( "BUSIIB", "rcvAcct", 0, 0, acc, 0);
		rtrim(acc);
		WriteLog( APP_LVL, "in_acc[%s]", acc);
	}
	/*add by ch 20101220 增加转出转入账号同账号检查*/
	if( param[1] == '1')
	{
		GetPoolDataByName("PAGTBUF", "accno", 0, 0, outmainacc, 0);
		GetPoolDataByName("PAGTBUF", "pagt_acc", 0, 0, inmainacc, 0);
		WriteLog( APP_LVL, "outmainacc[%s]inmainacc[%s]", outmainacc, inmainacc);
		rtrim( outmainacc);
		rtrim( inmainacc);
		if( strcmp( outmainacc, inmainacc) == 0)
		{
			strcpy( ret_msg, "转入转出账号为同一账号");
			WriteLog( ERR_LVL, ret_msg);
			ret_code = 99999;
			PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char*)&ret_code, 0);
			PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, ret_msg, 0);
			return( -1);
		}
	}
	/*add end*/
	/*渠道号*/
	GetPoolDataByName( "PBSYS", "RChnlNo", 0, 0, chnl_no, 0);
	ret = IsCardNo( acc);
	if( ret == 0)
	{
		GetPoolDataByName( "CBS", "ClsSeqNo", 0, 0, acc_stat, 0);
		WriteLog( APP_LVL, "card_acc_stat[%s]", acc_stat);
		/*销户检查*/
		if( acc_stat[0] != '0')
		{
			WriteLog( ERR_LVL, "卡销户[%s]", acc);
			if( param[0] == '0')
				ret_code = 20005;
			else
				ret_code = 20009;
			WriteLog( APP_LVL, "ret_code[%d]\n", ret_code);
			PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char*)&ret_code, 0);
			return( -1);
		}
		/*挂失检查*/
		if( param[0] == '0')	/*转出账号检查挂失*/
		{
			if( acc_stat[2] != '0')
			{
				WriteLog( ERR_LVL, "卡挂失[%s][%c]", acc, acc_stat[2]);
				ret_code =  20004;
				WriteLog( APP_LVL, "ret_code[%d]\n", ret_code);
				PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char*)&ret_code, 0);
				return( -1);
			}
		}

	}
	memset( acc_stat, 0, sizeof( acc_stat));
	WriteLog( APP_LVL, "cdm_led_num[%ld] [%s]", cdm_led_num,s_cdm_led_num);
	/*取活期数*/
	GetPoolDataByName( "CBS", "PsbkLineNo", 0, 0, s_cdm_led_num, 0);
	cdm_led_num=atoi(s_cdm_led_num);
	WriteLog( APP_LVL, "----cdm_led_num[%ld] [%s]", cdm_led_num,s_cdm_led_num);
        if( cdm_led_num > 0)
	{
		memset( acc_stat, 0, sizeof( acc_stat));
		GetPoolDataByName( "CBS", "AcctStat", 0, 0, acc_stat, 0);
		/* Modified by MSJ for 不判定支票活期账户的挂失状态 20151103 - Start */
	        /*挂失检查*/
 	      	if( param[0] == '0')	/*转出检查挂失*/
    		{
    			if( acc_stat[2] != '0')
    			{
    				WriteLog( ERR_LVL, "卡或者卡对应账号挂失[%s][%c]", acc, acc_stat[2]);
    				ret_code = 20004;
 	   			WriteLog( APP_LVL, "ret_code[%d]\n", ret_code);
    				PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char*)&ret_code, 0);
    				return( -1);
    			}
    		}
		/* Modified by MSJ for 不判定支票活期账户的挂失状态 20151103 - End */

	}

	WriteLog( APP_LVL, "sdm_led_num[%ld]  [%s]", sdm_led_num, s_sdm_led_num);
	/*取支票活期数*/
	GetPoolDataByName( "CBS", "CertNo", 0, 0, s_sdm_led_num, 0);
	sdm_led_num=atoi(s_sdm_led_num);
	WriteLog( APP_LVL, "------sdm_led_num[%ld]  [%s]", sdm_led_num, s_sdm_led_num);
	if( sdm_led_num > 0)
	{
		memset( acc_stat, 0, sizeof( acc_stat));
		GetPoolDataByName( "PAGTBUF", "prsn_no", 0, 0, acc_stat, 0);
	}
	WriteLog( APP_LVL, "acc_stat[%s]", acc_stat);
	/*销户检查*/
	if( acc_stat[0] > '0')
	{
		WriteLog( ERR_LVL, "卡销户[%s]", acc);
		if( param[0] == '0')
			ret_code = 20005;
		else
			ret_code = 20009;
		WriteLog( APP_LVL, "ret_code[%d]\n", ret_code);
		PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char*)&ret_code, 0);
		return( -1);
	}
	/*冻结检查*/
	if( param[0] == '0')	/*转出检查不收不付及只收不付*/
	{
		if( acc_stat[1] == '1' || acc_stat[1] == '2')
		{
			WriteLog( ERR_LVL, "账号或卡对应账号冻结[%s]", acc);
			ret_code = 20006;
			WriteLog( APP_LVL, "ret_code[%d]\n", ret_code);
			PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char*)&ret_code, 0);
			return( -1);
		}
	}
	else	/*转入检查不收不付*/
	{
		if( acc_stat[1] == '1' )
		{
			WriteLog( ERR_LVL, "账号或卡对应账号冻结[%s]", acc);
			ret_code = 20010;
			WriteLog( APP_LVL, "ret_code[%d]\n", ret_code);
			PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char*)&ret_code, 0);
			return( -1);
		}
	}
	return( 0);
}


/************************************
gas_refund 煤气退款取原交易信息
input: param [0]-0非中间业务 1-中间业务
             [1]-0本行业务 1-跨行业务
output
*************************************/
int gas_refund()
{
    EXEC SQL BEGIN DECLARE SECTION;
        struct s_pb_net_dtl net_dtl;
        char outtrancode[10+1];
        char trandate[8+1];
        char seqno[10+1];
    EXEC SQL END DECLARE SECTION;
    char acc[32+1];
    char err_code[6+1];
    char err_msg[40+1];
    long errcode=0;
    
    memset( &net_dtl, 0, sizeof(struct s_pb_net_dtl) );
    memset( outtrancode, 0, sizeof(outtrancode) );
    memset( trandate, 0, sizeof(trandate) );
    memset( seqno, 0, sizeof(seqno) );
    memset( acc, 0, sizeof(acc) );
    memset( err_code, 0, sizeof(err_code) );
    memset( err_msg, 0, sizeof(err_msg) );
    
    WriteLog( APP_LVL, "------gas_refund--------" );
    
    /* 网银交易码 */
    GetPoolDataByName( "PBSYS", "RTranCode", 0, 0, outtrancode, 0);
    rtrim(outtrancode);
    
    /* 原主机流水号 */
    GetPoolDataByName( "BUSIIB", "hostSeqNb", 0, 0, seqno, 0);
    rtrim(seqno);
    
    /* 原交易日期 */
    GetPoolDataByName( "BUSIIB", "tranDt", 0, 0, trandate, 0);
    rtrim(trandate);
    
    /* 原收款账号 */
    GetPoolDataByName( "BUSIIB", "payAcct", 0, 0, acc, 0);
    rtrim(acc);
    
    WriteLog( APP_LVL, "outtrancode[%s],seqno[%s],trandate[%s],acc[%s]",
                       outtrancode,seqno,trandate,acc );
    
    EXEC SQL SELECT * INTO :net_dtl
        FROM t_pb_net_dtl
        WHERE outtrancode = :outtrancode
           AND trandate = :trandate
           AND seqno = :seqno;
    if( SQLCODE!=0 && SQLCODE!=100 )
    {
        WriteLog( ERR_LVL, "查询原交易失败! SQLCODE[%ld]", SQLCODE );
        strcpy( err_code, "99999" );
        strcpy( err_msg, "查询原交易失败!" );
        errcode = 99999;
        PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode, 0 );
        PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
        return (-1);
    }
    else if( SQLCODE==100 )
    {
        WriteLog( ERR_LVL, "无原交易，请检查!trandate[%s],seqno[%s]", trandate,seqno );
        strcpy( err_code, "99999" );
        strcpy( err_msg, "无原交易，请检查!" );
        errcode = 99999;
        PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode, 0 );
        PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
        return (-1);
    }
    
    rtrim(net_dtl.rcvacc);
    
    if( strcmp(acc,net_dtl.rcvacc)!=0 )
    {
        WriteLog( ERR_LVL, "退款账号[%s]与原账号[%s]不符",  acc,net_dtl.rcvacc );
        strcpy( err_code, "99999" );
        strcpy( err_msg, "退款账号与原账号不符" );
        errcode = 99999;
        PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode, 0 );
        PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
        return (-1);
    }
    
    PutPoolDataByName( "BUSIIB", "cardAcctFlg", 0, 0, "2", 0);
    PutPoolDataByName( "BUSIIB", "payCardAcctNb", 0, 0, net_dtl.rcvacc, 0);
    PutPoolDataByName( "BUSIIB", "payCurTyp", 0, 0, net_dtl.paycurrtype, 0);
    PutPoolDataByName( "BUSIIB", "payCashFlg", 0, 0, "2", 0);
    PutPoolDataByName( "BUSIIB", "payCustNm", 0, 0, net_dtl.rcvcustname, 0);
    PutPoolDataByName( "BUSIIB", "payBrchID", 0, 0, net_dtl.rcvopeninst, 0);
    PutPoolDataByName( "BUSIIB", "payBrchNm", 0, 0, net_dtl.rcvopenname, 0);
    PutPoolDataByName( "BUSIIB", "rcvAcct", 0, 0, net_dtl.payacc, 0);
    PutPoolDataByName( "BUSIIB", "rcvCustNm", 0, 0, net_dtl.paycustname, 0);
    PutPoolDataByName( "BUSIIB", "rcvBrchID", 0, 0, net_dtl.payopeninst, 0);
    PutPoolDataByName( "BUSIIB", "rcvBrchNm", 0, 0, net_dtl.payopenname, 0);
    PutPoolDataByName( "BUSIIB", "rcvAcctSvcr", 0, 0, net_dtl.backup1, 0);
    PutPoolDataByName( "BUSIIB", "rcvAcctSvcrNm", 0, 0, net_dtl.backup2, 0);
    PutPoolDataByName( "BUSIIB", "feeFlg", 0, 0, "2", 0);
    PutPoolDataByName( "BUSIIB", "use", 0, 0, net_dtl.use, 0);
    PutPoolDataByName( "BUSIIB", "memo", 0, 0, net_dtl.note, 0);
    /*PutPoolDataByName( "BUSIIB", "remarkCd", 0, 0, "17001001", 0);*/
    PutPoolDataByName( "BUSIIB", "remark", 0, 0, "燃气退费", 0);
    PutPoolDataByName( "BUSIIB", "chkPwdFlg", 0, 0, "0", 0);

    return 0;
}

/************************************************************
 *  Name:  net_trim
 *  Description: 去除字符中的异常字符
 *  Input: 字符串  0x20--空格，0X0A--回车，0X0D--换行
 *  Output:
 *  Return: 
 *----------------------------------------------------------
 * Create         Date        Action
 * MSJ           2014/11/09  Created
 *************************************************************/
char *net_trim(char* str)
{
    char* s;
    char tmp_str[128+1];
    int n=0;
    int i=0;

    memset( tmp_str, 0x00, sizeof(tmp_str) );

    if ( str == NULL )
         return ( str ) ;

    s=str;
    n=0;
    for(i=0;i<strlen(str);i++)
    {
        if (*s == 0x0a || *s == 0x0d )
        {
            s++;
            continue;
        }
        else
        {
            tmp_str[n]=*s;
            n++;
            s++;
        }
    }
    tmp_str[n]='\0';
    strcpy(str,tmp_str);

    return( str ) ;
}

