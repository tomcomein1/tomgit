#include <stdio.h>
#include <stdlib.h>
#include <sys/types.h>
#include <time.h>
#include "atmi.h"
#include "fml32.h"
#include "pbconstval.h"
#include "pbstructdef.h"
#ifdef ORACLE_DATABASE
EXEC SQL include "pbranchdb.h";
#else
#include "pbranchdb.h"
#endif
EXEC SQL include "pb_s_agt_batch.h";
#include "pberrlog.h"
#include "pbglbvardef.h"
#include "pbbasefunc.h"
#include "pqds.h"
long OpenQry5003(char *paper_type,char *paper_no,char *cust_name,char *phone,char *cstno);
int WyChkCard( char *card_no );
#include "macrodef.h"
EXEC SQL include "pbsrv.h";

#include "zpqds.h"
#include <stddef.h>


/*
*aotm      : 
*desc      : 客户合同查询
*written by: wang w0
*   20130819 修改为按卡号查询
*/
int wyqry_cstm_contract()
{
    int ret;
    
    struct head head;
    
    int i;
    long hoststat = 0;
    long app_err_no = 0;
    
    char databuf[512];
    char err_msg[60+1],err_code[10];
    char sqlstr[512];
    char fml_svr[40];
    
    char card_no[32+1];
    
    char tt_seqno[10+1];
    char pb_seqno[10+1];
    
    char begin_date[10+1];
    char due_date[10+1];
    char inval_date[10+1];
    
    char inst_no[4+1];
    char trl_no[6+1];
    
    char rate_type[1+1];
    char tran_date[10+1];
    
    double overdue_rate = .0f;     /*逾期利率*/
    double normal_fratio = .0f;    /*逾期浮动比率*/
    
    double rate1=.0f, rate2=.0f, rate3 =.0f;
    
    char str_rate1[20], str_rate2[20], str_rate3[20];
    char str_date1[11], str_date2[11], str_date3[11];
	char CstmNo[15],LoanInst[5];
	char retcode[6];
	long lerrcode=0;
	struct
	{
		char cst_name[61];
		char address[61];
	} cst_infor;
    
    struct{
        char loan_type[1+1];
        char contract_id[20+1];
        long bgn_date;
        long due_date;
        long date1;
        double dlv_guideline;
        double used_cred;
        char co_acc[25+1];
    }data;
        
    memset(&head, 0, sizeof(head));
    
    memset(card_no, 0, sizeof(card_no));
    memset(tt_seqno, 0, sizeof(tt_seqno));
    memset(pb_seqno, 0, sizeof(pb_seqno));
    
    
    memset(databuf, 0, sizeof(databuf));
    memset(err_msg, 0, sizeof(err_msg));
    memset(err_code, 0, sizeof(err_code));
    memset(sqlstr, 0, sizeof(sqlstr));
    memset(fml_svr, 0, sizeof(fml_svr));
    
    
    memset(begin_date, 0, sizeof(begin_date));
    memset(due_date, 0, sizeof(due_date));
    memset(inval_date, 0, sizeof(inval_date));
    
    memset(inst_no, 0, sizeof(inst_no));
    memset(trl_no, 0, sizeof(trl_no));
    
    memset(rate_type, 0, sizeof(rate_type));
    memset(tran_date, 0, sizeof(tran_date));
    
    memset(&data, 0, sizeof(data));
    memset(str_rate1, 0, sizeof(str_rate1));
    memset(str_rate2, 0, sizeof(str_rate2));
    memset(str_rate3, 0, sizeof(str_rate3));
    
    memset(str_date1, 0, sizeof(str_date1));
    memset(str_date2, 0, sizeof(str_date2));
    memset(str_date3, 0, sizeof(str_date3));
    memset(CstmNo, 0, sizeof(CstmNo));
    memset(LoanInst, 0, sizeof(LoanInst));
    memset(&cst_infor, 0, sizeof(cst_infor));
    memset(retcode, 0, sizeof(retcode));
   
    GetPoolDataByName("BUSIIB", "acct", 0, 0, card_no, 0);
    trim(card_no);
    if (strcmp(card_no, "") == 0)
    {
        WriteLog(ERR_LVL, "卡号不能为空");
		lerrcode = 99999;
		strcpy( err_msg, "卡号不能为空");
		PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&lerrcode, 0 );
        PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
        PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, "-1", 0 );
        return PB_ERR;
    }
        
	if( IsCardNo(card_no) !=0 )
	{
		lerrcode = 99999;
		strcpy( err_msg, "抱歉，仅卡号可进行小额农贷合同查询");
		PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&lerrcode, 0 );
		PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
		PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, "-1", 0 );
		return -1;
	}
    
    ret = PayGetPbDate( tran_date );
    if( ret != 0 ) {
        WriteLog( ERR_LVL, "取系统日期错\n" );
        strcpy( err_msg, "取系统日期错!" );
		strcpy( err_code, "99999" );
		app_err_no=99999;
		PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&app_err_no, 0 );
        PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
        PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, "-1", 0 );
        return ( -1 );
    }
    
    if ( (ret = get_TTseqno(tt_seqno)) != 0 )
	{
        WriteLog ( ERR_LVL, "取TT流水号出错");
		app_err_no=99999;
		strcpy( err_msg, "取TT流水号出错");
		PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&app_err_no, 0 );
        PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
        PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, "-1", 0 );
        return( PB_ERR);
    }

	if ( (ret = get_PBseqno( pb_seqno )) != 0 )
	{
		WriteLog ( ERR_LVL, "取PB流水号出错");
		app_err_no=99999;
		strcpy( err_msg, "取TT流水号出错");
		PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&app_err_no, 0 );
		PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
		PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, "-1", 0 );
		return( PB_ERR);
	}

    PutPoolDataByName( "LOAN", "PrdNo",      0, 0, "4005", 0 );
    PutPoolDataByName( "LOAN", "CstmManger", 0, 0, "2802", 0 );
    PutPoolDataByName( "LOAN", "LoanAcc",    0, 0, card_no, 0 );

    PutPoolDataByName( "ABSHEAD", "_tx_code",    0, 0, "4440",   0 );
    PutPoolDataByName( "ABSHEAD", "_tx_op_stat", 0, 0, "N",      0 );
    PutPoolDataByName( "ABSHEAD", "chnl_no",     0, 0, "W",      0 );
    PutPoolDataByName( "ABSHEAD", "_tlr_no",     0, 0, "888891",  0 );
    PutPoolDataByName( "ABSHEAD", "organ_no",    0, 0, "9996", 0 );
    PutPoolDataByName( "ABSHEAD", "_seq_no",     0, 0, tt_seqno, 0 );
    PutPoolDataByName( "ABSHEAD", "list_seqno",  0, 0, pb_seqno, 0 );
	PutPoolDataByName( "APSYS",   "HstSeqNo",    0, 0, "000000", 0 );

    WriteLog( APP_LVL, "=============FML打包===============" );
    ret = Data_PackFml( "110|4440|0" );
    if (ret) {
        WriteLog( ERR_LVL, "ERROR: FML打包错: %d\n", ret );
	app_err_no=99999;
	strcpy( err_msg, "系统忙,请稍后再试");
	PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&app_err_no, 0 );
	PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
	PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, "-1", 0 );
        return -1;
    }

    if( Comm_AcCallFmlAndUnpack( "110|LOAN2SVC|4440|1" ) != 0 ) {
        WriteLog( ERR_LVL, "ERROR:FML通讯解包错" );
	app_err_no=99999;
	strcpy( err_msg, "系统忙,请稍后再试");
	PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&app_err_no, 0 );
	PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
	PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, "-1", 0 );
        return -1;
    }

    GetPoolDataByName( "ABSHEAD", "_host_stat", 0, 0, &hoststat, 0 );

    if ( hoststat != 0 ) {

        GetPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
        if( hoststat == -1 ) {
		app_err_no=99999;
		strcpy( err_msg, "系统忙,请稍后再试");
		PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&app_err_no, 0 );
		PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
		PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, "-1", 0 );
            WriteLog( APP_LVL, "通讯超时:[%s]", err_msg );
        }
        else {
		app_err_no=99999;
		PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&app_err_no, 0 );
		PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, "-1", 0 );
           	 WriteLog( APP_LVL, "交易参数检查失败:[%s]", err_msg );
		GetPoolDataByName( "LOAN", "retcode", 0, 0, retcode, 0 );
		rtrim( retcode );
		if( strncmp(retcode,"57",2 ) == 0 )
		{
			strcpy(err_msg,"账户状态为冻结或止付,不允许办理此业务");
			PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
		}
		if( strncmp(retcode,"ZF",2 ) == 0 )
		{
			strcpy(err_msg,"请到柜面办理您的第一次放款交易");
			PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
		}
        }

        return ( -1 );
    } 
    
    GetPoolDataByName("LOAN", "LoanType", 0, 0, data.loan_type, 0);
    PutPoolDataByName("BUSIIB", "loanTyp", 0, 0, data.loan_type, 0);
    
    GetPoolDataByName("LOAN", "StAcc", 0, 0, data.contract_id, 0);
    PutPoolDataByName("BUSIIB", "loanCtrctNb", 0, 0, data.contract_id, 0);
    
    GetPoolDataByName("LOAN", "BgnIntDate", 0, 0, begin_date, 0);
    PutPoolDataByName("BUSIIB", "bgnDt", 0, 0, begin_date, 0);
    
    GetPoolDataByName("LOAN", "DueDate", 0, 0, due_date, 0);
    PutPoolDataByName("BUSIIB", "ctrctRepayDt", 0, 0, due_date, 0);
    
    GetPoolDataByName("LOAN", "Date1", 0, 0, inval_date, 0);
	/* 贷款机构号 */
    GetPoolDataByName( "LOAN", "LoanInst",  0, 0, inst_no, 0 );
    rtrim( inst_no );
    strcpy(trl_no,inst_no);
    strcat(trl_no,"99");
    
    memset(databuf, 0, sizeof(databuf));
    GetPoolDataByName("LOAN", "DlvGuideLine", 0, 0, &data.dlv_guideline, 0);
    WriteLog(DEBUG_LVL, "dlv_guideline=%.2f", data.dlv_guideline);
    sprintf(databuf, "%-.2f", data.dlv_guideline);
    PutPoolDataByName("BUSIIB", "loanAmt", 0, 0, databuf, 0);
    memset(databuf, 0, sizeof(databuf));
    
    GetPoolDataByName("LOAN", "usedline", 0, 0, &data.used_cred, 0);
    sprintf(databuf, "%-.2f", data.dlv_guideline-data.used_cred);
    WriteLog(DEBUG_LVL, "dlv_guideline=%.2f", data.used_cred);
    PutPoolDataByName("BUSIIB", "amt", 0, 0, databuf, 0);
    PutPoolDataByName("BUSIIB", "loanTyp", 0, 0, data.loan_type, 0);
    
	GetPoolDataByName( "LOAN", "LoanInst",   0, 0, LoanInst, 0 );
	PutPoolDataByName( "BUSIIB", "openBrchID",   0, 0, LoanInst, 0 );
    
	GetPoolDataByName( "LOAN", "flag3",   0, 0, rate_type, 0 );
	PutPoolDataByName( "BUSIIB", "chargeTyp",   0, 0, rate_type, 0 );

	PutPoolDataByName( "LOAN", "PrdNo",   0, 0, "4005",    0 );
    PutPoolDataByName( "LOAN", "LoanAcc", 0, 0, card_no,   0 );
    PutPoolDataByName( "LOAN", "flag1",   0, 0, rate_type, 0 );
    PutPoolDataByName( "LOAN", "BgnIntDate", 0, 0, tran_date, 0 );
    PutPoolDataByName( "LOAN", "flag2",   0, 0, "0",0 );

	if (rate_type[0]=='1')
    {
        GetPoolDataByName( "LOAN", "OverdueFratio", 0, 0, &normal_fratio,  0 );
        PutPoolDataByName( "LOAN", "OverdueRate",   0, 0, &normal_fratio,  0 );
    }

	PutPoolDataByName( "ABSHEAD", "_tx_code",    0, 0, "4441",   0 );
    PutPoolDataByName( "ABSHEAD", "_tx_op_stat", 0, 0, "N",      0 );
    PutPoolDataByName( "ABSHEAD", "chnl_no",     0, 0, "W",      0 );
    PutPoolDataByName( "ABSHEAD", "_tlr_no",     0, 0, trl_no,  0 );
    PutPoolDataByName( "ABSHEAD", "organ_no",    0, 0, inst_no, 0 );
    PutPoolDataByName( "ABSHEAD", "_seq_no",     0, 0, tt_seqno, 0 );
    PutPoolDataByName( "ABSHEAD", "list_seqno",  0, 0, pb_seqno, 0 );
	PutPoolDataByName( "APSYS",   "HstSeqNo",    0, 0, "000000", 0 );

    WriteLog( APP_LVL, "=============FML打包===============" );
    ret = Data_PackFml( "110|4441|0" );
    if( ret ) {
		app_err_no=99999;
		strcpy( err_msg, "系统忙,请稍后再试");
		PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&app_err_no, 0 );
		PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
		PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, "-1", 0 );
        WriteLog( ERR_LVL, "ERROR: FML打包错: %d\n", ret );
        return -1;
    }

    if( Comm_AcCallFmlAndUnpack( "110|LOAN2SVC|4441|1" ) != 0 ) {
        WriteLog( ERR_LVL, "ERROR:FML通讯解包错" );
		app_err_no=99999;
		strcpy( err_msg, "系统忙,请稍后再试");
		PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&app_err_no, 0 );
		PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
		PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, "-1", 0 );
        return -1;
    }

	GetPoolDataByName( "ABSHEAD", "_host_stat", 0, 0, &hoststat, 0 );
    if( hoststat != 0 ) {

        GetPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
        if( hoststat == -1 ) {
            WriteLog( ERR_LVL, "通讯超时:[%s]", err_msg );
		app_err_no=99999;
		strcpy( err_msg, "系统忙,请稍后再试");
		PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&app_err_no, 0 );
		PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
		PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, "-1", 0 );
        }
        else {
            WriteLog(ERR_LVL, "交易参数检查失败:[%s]", err_msg );
		lerrcode = 99999;
		PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&lerrcode, 0 );
		PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
		PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, "-1", 0 );
        }
        return( -1 );
    }

	GetPoolDataByName( "LOAN", "rate1",  0, 0, &rate1, 0 );
    GetPoolDataByName( "LOAN", "rate",   0, 0, &rate2, 0 );
    GetPoolDataByName( "LOAN", "fratio", 0, 0, &rate3, 0 );

    sprintf(str_rate1, "%-8.6f", rate1);
    sprintf(str_rate2, "%-8.6f", rate2);
    sprintf(str_rate3, "%-8.6f", rate3);

	PutPoolDataByName("BUSIIB", "ctrctPayIntrst", 0, 0, str_rate1, 0);
    PutPoolDataByName("BUSIIB", "intrstRate", 0, 0, str_rate2, 0);
    PutPoolDataByName("BUSIIB", "payIntrst", 0, 0, str_rate3, 0);

    GetPoolDataByName("LOAN", "OrgDueDate", 0, 0, str_date1, 0);
    GetPoolDataByName("LOAN", "EndDate", 0, 0, str_date2, 0);
    GetPoolDataByName("LOAN", "BgnDate", 0, 0, str_date3, 0);

    PutPoolDataByName("BUSIIB", "bookDt", 0, 0, str_date1, 0);
    PutPoolDataByName("BUSIIB", "commitDt", 0, 0, str_date2, 0);
    PutPoolDataByName("BUSIIB", "drawDt", 0, 0, str_date3, 0);

    GetPoolDataByName( "LOAN", "CstmNo",   0, 0, CstmNo, 0 );
	rtrim( CstmNo );
	if( AccQryPub5711( card_no ) )
	{
		WriteLog(ERR_LVL,"调用5711查询账户名称错,[%s]",card_no);
		app_err_no=99999;
		strcpy( err_msg, "查询账户错");
		PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&app_err_no, 0 );
		PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
		PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, "-1", 0 );
		PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, "-1", 0 );
		return -1;
	}
	GetPoolDataByName( "CBS", "CustName", 0, 0, cst_infor.cst_name, 0);

	rtrim( cst_infor.cst_name );
    PutPoolDataByName( "BUSIIB", "custNm",   0, 0, cst_infor.cst_name,    0 );
	PutPoolDataByName( "BUSIIB", "v", 0, 0, "1", 0);
	PutPoolDataByName( "BUSIIB", "turnPageTotalQnt", 0, 0, "1", 0);

	PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, "0", 0 );
    return PB_OK;
}
int wyQryLoanNoOfContractId()
{
    char acctNo[32+1];
    char beg_pos[8+1];
    char beg_cnt[8+1];
    long bgn_no = 0;
    long get_num = 0;
    long host_stat = 0;
    char loan_inst[4+1];
    char PB_seqno[10+1];
    char TT_seqno[10+1];
    char err_msg[1024+1];
    char syscmd[100+1];
    char ftpfilename[64+1];
    long totlnm = 0;
    char ctotl_num[8+1];
    long ret = 0;
    FILE    *fp = NULL;
    char filename[50+1];
    char tran_date[8+1];
    char tran_type[8+1];
    long count = 0;
    long i, j=0;
    long cut_no = 1;
	long lerrcode=0;
    struct str
    {
        int  count;
        char loan_no[14+1];
        char begin_date[10+1];
        char due_date[10+1];
        double dlv_guideline;
        double loan_bal;
        char   loan_acc[25+1];
        char rev[19];
    } iou_qry[100];
    char  *p = NULL, *q = NULL;
    char loan_no[14+1];
    char beg_date[8+1];
    char due_date[8+1];
    char loan_bal[16+1];
    char loan_acc[25+1];
    char cnt[4+1];
    char dlv_guideline[16+1];
    char ccount[8+1];

    memset(iou_qry,          0x00,       sizeof(iou_qry));
    memset(acctNo,          0x00,       sizeof(acctNo));
    memset(beg_pos,         0x00,     sizeof(beg_pos));
    memset(beg_cnt,         0x00,     sizeof(beg_cnt));
    memset(loan_inst,       0x00,     sizeof(loan_inst));
    memset(PB_seqno,        0x00,     sizeof(PB_seqno));
    memset(TT_seqno,        0x00,     sizeof(TT_seqno));
    memset(err_msg,         0x00,     sizeof(err_msg));
    memset(syscmd,          0x00,     sizeof(syscmd));
    memset(ftpfilename,     0x00,     sizeof(ftpfilename));
    memset(ctotl_num,       0x00,     sizeof(ctotl_num));
    memset(filename,        0x00,     sizeof(filename));
    memset(loan_no,        0x00,       sizeof(loan_no));
    memset(beg_date,       0x00,      sizeof(beg_date));
    memset(due_date,       0x00,      sizeof(due_date));
    memset(loan_bal,        0x00,     sizeof(loan_bal));
    memset(loan_acc,       0x00,     sizeof(loan_acc));
    memset(cnt,             0x00,     sizeof(cnt));
    memset(dlv_guideline,   0x00,     sizeof(dlv_guideline));
    memset(ccount, 0, sizeof(ccount));
    
    
    
    /************** 获取查询数据 ************/
	GetPoolDataByName("BUSIIB", "acct", 0, 0, acctNo, 0);
	trim(acctNo);
	if ( strlen(acctNo) == 0 )
	{
	    WriteLog ( ERR_LVL, "输入的账号为空!");
		lerrcode = 99999;
		strcpy( err_msg, "输入的账号为空!");
		PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&lerrcode, 0 );
		PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
		PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, "-1", 0 );
	    return PB_ERR;
	}
	if( IsCardNo(acctNo) !=0 )
	{
		lerrcode = 99999;
		strcpy( err_msg, "抱歉，该渠道仅卡号可进行小额农贷交易");
		PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&lerrcode, 0 );
		PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
		PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, "-1", 0 );
		return -1;
	}

    
    /* 起始记录号 */
	strcpy(beg_pos,"1");
	if(strlen(beg_pos)!= 0)
    {
        trim(beg_pos);
        bgn_no = atol(beg_pos);
        if (bgn_no < 1)
        {
            WriteLog(ERR_LVL, "起始序号不能小于1");
            return PB_ERR;
        }
    }
    /* 本次返回记录数 */
	strcpy(beg_cnt,"10");
	if(strlen(beg_cnt) != 0)
	{
	    trim(beg_cnt);
	    get_num = atol(beg_cnt);
	}
	if ((NULL == beg_cnt) || (0 == get_num)) /* 默认返回数为10 */
	{
	    get_num = 10;
	}
    
     /* 获取流水号信息 */
    ret = get_PBseqno(PB_seqno);
	if(ret != 0)
	{
		WriteLog(ERR_LVL,"ERROR: get_PBseqno: %s\n", PB_seqno);
		lerrcode = 99999;
		strcpy( err_msg, "系统忙,请稍后再试!");
		PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&lerrcode, 0 );
		PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
		PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, "-1", 0 );
		return PB_ERR;
	}
    if ( (ret = get_TTseqno( TT_seqno )) != 0 )
	{
        WriteLog ( ERR_LVL, "取TT流水号出错");
		lerrcode = 99999;
		strcpy( err_msg, "系统忙,请稍后再试!");
		PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&lerrcode, 0 );
		PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
		PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, "-1", 0 );
        return( PB_ERR);
    }
    /********************** 查询自助贷款记录 *********************/
    PutPoolDataByName( "LOAN",  "CstmManger", 0, 0, "2805", 0 );
    PutPoolDataByName( "LOAN",  "LoanAcc",    0, 0, acctNo, 0 );
    PutPoolDataByName( "LOAN",  "PrdNo",      0, 0, "4005", 0 );
    strcpy(loan_inst, "9996");
    PutPoolDataByName( "LOAN",  "InstNo",     0, 0, loan_inst, 0 );
    /* 打包头 **/
    PutPoolDataByName( "ABSHEAD", "_tx_code",    0, 0, "4440",   0 );
    PutPoolDataByName( "ABSHEAD", "_tx_op_stat", 0, 0, "N",      0 );
    PutPoolDataByName( "ABSHEAD", "chnl_no",     0, 0, "7",      0 );
    PutPoolDataByName( "ABSHEAD", "_tlr_no",     0, 0, "888891",  0 );
    PutPoolDataByName( "ABSHEAD", "organ_no",    0, 0, loan_inst, 0 );
    PutPoolDataByName( "ABSHEAD", "_seq_no",     0, 0, TT_seqno, 0 );
    PutPoolDataByName( "ABSHEAD", "list_seqno",  0, 0, PB_seqno, 0 );
	PutPoolDataByName( "APSYS",   "HstSeqNo",    0, 0, "000000", 0 );
     
    WriteLog( APP_LVL, "=============FML打包===============" );
    ret = Data_PackFml( "110|4440|0" );
    if (ret != 0) 
    {
        WriteLog( ERR_LVL, "ERROR: FML打包错: %d\n", ret );
	lerrcode = 99999;
	strcpy( err_msg, "系统忙,请稍后再试!");
	PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&lerrcode, 0 );
	PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
	PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, "-1", 0 );
        return PB_ERR;
    }
    if( Comm_AcCallFmlAndUnpack("110|LOAN2SVC|4440|1") != 0) 
    {
        WriteLog( ERR_LVL, "ERROR:FML通讯解包错" );
	lerrcode = 99999;
	strcpy( err_msg, "系统忙,请稍后再试!");
	PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&lerrcode, 0 );
	PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
	PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, "-1", 0 );
        return PB_ERR;
    }
    GetPoolDataByName( "ABSHEAD", "_host_stat", 0, 0, &host_stat, 0 );
    if( host_stat != 0 ) 
    {
        GetPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
        if( host_stat == -1 ) 
        {
		lerrcode = 99999;
		strcpy( err_msg, "系统忙,请稍后再试!");
		PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&lerrcode, 0 );
		PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
		PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, "-1", 0 );
            WriteLog( APP_LVL, "通讯超时:[%s]", err_msg );
        }
        else 
        {
            WriteLog( APP_LVL, "核心查询交易失败:[%s]", err_msg );
		PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&lerrcode, 0 );
		PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
		PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, "-1", 0 );
            WriteLog( APP_LVL, "通讯超时:[%s]", err_msg );
        }
        return PB_ERR;
    }

	GetPoolDataByName( "ABSHEAD", "recv_filename", 0, 0, ftpfilename, 0 );
	GetPoolDataByName( "LOAN", "MaxNum",  0, 0, &totlnm,  0 );
	if( totlnm == 0 ) 
	{
        WriteLog( ERR_LVL, "空文件[%s][%d]直接返回退出!\n",ftpfilename, totlnm );
		lerrcode = 99999;
		strcpy( err_msg, "系统忙,请稍后再试!");
		PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&lerrcode, 0 );
		PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
		PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, "-1", 0 );
        return  PB_ERR;
	}
	sprintf( ctotl_num, "%ld", totlnm-1 );
    WriteLog( APP_LVL, "##############![%ld][%s]\n", totlnm, ctotl_num );

    
  
    /******************* 取文件 *******************/
	WriteLog( ERR_LVL, "Ftp取文件参数![%s]",ftpfilename );
    ret = TransFileRecv( "FTPFILE",
						 ftpfilename,
						 loan_inst,
						 0 );
    if( ret != 0 )
    {
        WriteLog( ERR_LVL, "Ftp取文件[%s]失败!\n", ftpfilename );
		lerrcode = 99999;
		strcpy( err_msg, "系统忙,请稍后再试!");
		PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&lerrcode, 0 );
		PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
		PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, "-1", 0 );
        return PB_ERR;
    }

	sprintf( syscmd, "mv %s/%c%c/%s/%s %s 1>/dev/null 2>&1 ",\
		      getenv("PRINTERDIR"), \
		        loan_inst[0], loan_inst[1], loan_inst, \
		            ftpfilename, getenv("PRINTERDIR"));
	system(syscmd);
    WriteLog( APP_LVL, "Ftp get file SUCCEED![%s]\n", syscmd );
    /************ 读取文件内容 ************/
    sprintf(filename, "%s/%s", getenv("PRINTERDIR"), ftpfilename);
    fp = fopen(filename, "r");
	if ( fp == NULL )
	{
		WriteLog( ERR_LVL, "打开文件[%s]失败", filename);
		lerrcode = 99999;
		strcpy( err_msg, "系统忙,请稍后再试!");
		PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&lerrcode, 0 );
		PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
		PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, "-1", 0 );
		return PB_ERR;
	}
	while(! feof( fp))
	{
	    for (i=1; i < totlnm+1; i++)
	    {
	        WriteLog(ERR_LVL, "struct str=[%d]:iou_qry=[%d]", sizeof(struct str), sizeof(iou_qry[j]));
	        fread(&iou_qry[j], sizeof(struct str)-4, 1, fp);
	        if (cut_no < bgn_no)
	        {
	            cut_no++;
	            j++;
	            continue;   
	        } 
	        q = (char *)&iou_qry[j];
	        if (*q == '\0')
	        {
	            break;    
	        }
	        WriteLog(ERR_LVL, "iou_qry=[%s]", q);
	        p = q; q=strchr(p,'|'); *q='\0'; strcpy(cnt, p ); q++;
	        p = q; q=strchr(p,'|'); *q='\0'; strcpy(loan_no, p ); q++;
	        p = q; q=strchr(p,'|'); *q='\0'; strcpy(beg_date, p );  q++;
	        p = q; q=strchr(p,'|'); *q='\0'; strcpy(due_date, p );   q++;
	        p = q; q=strchr(p,'|'); *q='\0'; strcpy(dlv_guideline, p);   q++;
	        p = q; q=strchr(p,'|'); *q='\0'; strcpy(loan_bal, p);   q++;
	        p = q; q=strchr(p,'|'); *q='\0'; strcpy(loan_acc, p);   q++;
	        sprintf(loan_bal, "%-16.2f", atof(loan_bal)/100.00);
	        sprintf(dlv_guideline, "%-16.2f", atof(dlv_guideline)/100.00);
	        
	        /***************** 组织返回打包 *****************/
	        /* 借据号 */
            PutPoolDataByName("BUSIIB", "voucherNo", count, 0, loan_no, 0);
            /* 起息日 */
            PutPoolDataByName("BUSIIB", "intrstBgnDt", count, 0, beg_date, 0);
            /* 到期日 */
            PutPoolDataByName("BUSIIB", "dueDt", count, 0, due_date, 0);
            /* 贷款余额 */
            PutPoolDataByName("BUSIIB", "bal", count, 0, loan_bal, 0);
            /* 贷款账号 */
            PutPoolDataByName("BUSIIB", "loanAcct", count, 0, loan_acc, 0);
            /* 贷款金额 */
            PutPoolDataByName("BUSIIB", "loanAmt", count, 0, dlv_guideline, 0);
            PutPoolDataByName("BUSIIB", "acct", count, 0, acctNo, 0);
            
            count++;
            j++;
            if ((count >= get_num) || (count >= 10))
            {
                break;    
            }
	    }
		break;
	}
	fclose( fp);
    
    
    sprintf(ccount, "%ld", count);
	/* 返回给打包结构的记录条数 */
	PutPoolDataByName( "BUSIIB", "v", 0, 0, ccount, 0);
	/* 本次返回记录笔数 */
	/* 记录总笔数 */
	if (strlen(cnt) == 0)
	{
	    sprintf(cnt, "%ld", atol(cnt));
	}
	else
	{
	    sprintf(cnt, "%ld", (atol(cnt)-1));
	}
    PutPoolDataByName("BUSIIB", "turnPageTotalQnt", 0, 0, ccount, 0);

	PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, "0", 0 );
    return PB_OK;
}
/********************************************
 * desc        : 2038 利息试算
 *               试算贷款账号的利息以及欠息
 * Input       : 无
 * Output      : 无
 * Return      : 0  -- 成功
 *             : -1 -- 失败
 * -------------------------------------
 * Create             Date        Action
 * wg               2013/01/19    Created.
 * wg               2013/03/04    modify.
*/
int wytry_cal_loan_intr()
{
    long ret = 0;
    long app_err_no, hoststat = -1;
    
    char err_msg[60+1];
    
    FBFR32 *sendbuf, *recvbuf;
    long sendlen, recvlen;
    
    char databuf[255];
    char sqlstr[512];
    char fml_svr[40+1];
    
    char acct_no[40+1];        /*还款账号*/
    char loan_no[32+1];        /*借据号*/
    char bgn_int_date[10+1];   /*起息日*/
    char due_int_date[10+1];   /*到期日*/
    
    char loan_acc[32+1];       /*贷款账号*/
    char tt_seqno[10+1];
    char tt_seqno1[10+1];
    char instrt[16+1],retcode[6];
    double amt = .0f;
    double rate = 0.00;
    
    double total = .0f;        /*本  息*/
    double intr = .0f;         /*利  息*/
        
    memset(err_msg, 0, sizeof(err_msg));
    memset(databuf, 0, sizeof(databuf));
    memset(sqlstr, 0, sizeof(sqlstr));
    memset(fml_svr, 0, sizeof(fml_svr));
    
    memset(acct_no, 0, sizeof(acct_no));
    memset(loan_no, 0, sizeof(loan_no));
    memset(bgn_int_date, 0, sizeof(bgn_int_date));
    memset(due_int_date, 0, sizeof(due_int_date));
    
    memset(loan_acc, 0, sizeof(loan_acc));
    memset(tt_seqno, 0, sizeof(tt_seqno));
    memset(tt_seqno1, 0, sizeof(tt_seqno1));
    memset(instrt,    0, sizeof(instrt));
    memset(retcode,    0, sizeof(retcode));
    
    GetPoolDataByName("BUSIIB", "loanAcct", 0, 0, loan_acc, 0);  /* 贷款账号 */
    GetPoolDataByName("BUSIIB", "payNb", 0, 0, loan_no, 0);
    GetPoolDataByName("BUSIIB", "repayAmt", 0, 0, databuf, 0);
    amt = atof(databuf);
    
    trim(loan_acc);
    if (strcmp(loan_acc, "") == 0)
    {
		sprintf(err_msg, "贷款账号不能为空，请检查输入参数");
		app_err_no = 99999;
		PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&app_err_no, 0 );
		PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
		PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, "-1", 0 );
        WriteLog(ERR_LVL, err_msg);
        return PB_ERR;
    }    
    
	
	ret = get_TTseqno(tt_seqno);
	if (ret)
	{
	    sprintf(err_msg, "取PB流水错");
		sprintf(err_msg, "系统忙,请稍后再试");
		app_err_no = 99999;
		PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&app_err_no, 0 );
		PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
		PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, "-1", 0 );
	    return PB_ERR;
	}  
	ret = get_TTseqno(tt_seqno1);
	if (ret)
	{
	    sprintf(err_msg, "取PB流水错");
		sprintf(err_msg, "系统忙,请稍后再试");
		app_err_no = 99999;
		PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&app_err_no, 0 );
		PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
		PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, "-1", 0 );
	    return PB_ERR;
	}     
    
    sendbuf = (FBFR32 *)tpalloc("FML32", NULL, 66560);
    if (sendbuf == NULL)
    {
        WriteLog(ERR_LVL, "分配核心使用输入缓冲池错");
		sprintf(err_msg, "系统忙,请稍后再试");
		app_err_no = 99999;
		PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&app_err_no, 0 );
		PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
		PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, "-1", 0 );
        sendbuf = NULL;
        return PB_ERR;
    }
    
    recvbuf = (FBFR32 *)tpalloc("FML32", NULL, 66560);
    if (recvbuf == NULL)
    {
        WriteLog( ERR_LVL, "分配核心使用输出缓冲池错");
		sprintf(err_msg, "系统忙,请稍后再试");
		app_err_no = 99999;
		PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&app_err_no, 0 );
		PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
		PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, "-1", 0 );
        tpfree((char*)sendbuf);
        sendbuf = NULL;
        recvbuf = NULL;
        return PB_ERR;
    }
    
    /****************** 1.利息试算 *****************/
    /*报文头打包*/
	Fchg32(sendbuf, 167772181L, 0, "9996", 0);
	Fchg32(sendbuf, 167772196L, 0, "888891", 0);
	Fchg32(sendbuf, 67108902L, 0, "N", 0);
	Fchg32(sendbuf, 167772197L, 0, "4436", 0);
	Fchg32(sendbuf, 67108878L, 0, "7", 0);
    
    /*利息试算输入参数*/
    Fchg32(sendbuf, 172208169L, 0, loan_acc, 0);
    Fchg32(sendbuf, 172208172L, 0, loan_no, 0);
    Fchg32(sendbuf, 138653738L, 0, (char*)&amt, 0);      /*回收金额*/
    
	sendlen = Fused32(sendbuf);
    strcpy(fml_svr, "LOANSVC");	
	WriteLog(TEST_LVL, "=============与核心通讯===============");
	ret = tpcorecall(fml_svr, (char*)sendbuf, sendlen, (char**)&recvbuf, &recvlen, 0 );
	if (ret)
	{
	    strcpy(err_msg, "与核心通讯错");
	    PutPoolDataByName("TBANK", "hostReturnCode", 0, 0, "8888", 0);
	    PutPoolDataByName("TBANK", "hostErrorMessage", 0, 0, err_msg, 0);
	    
		sprintf(err_msg, "系统忙,请稍后再试");
		app_err_no = 99999;
		PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&app_err_no, 0 );
		PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
		PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, "-1", 0 );
	    tpfree((char*)sendbuf);
	    tpfree((char*)recvbuf);
	    return PB_ERR;
	}
	
	Fget32(recvbuf, 33554464L, 0, (char*)&hoststat, 0);
	if (hoststat == 0)
	{
	    WriteLog(ERR_LVL, "调用核心交易[%s]成功", "4436");
	}
	else
	{
	    if (1000 == hoststat)
	    {
	        sprintf(err_msg, "与核心通讯超时");
		sprintf(err_msg, "系统忙,请稍后再试");
		app_err_no = 99999;
		PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&app_err_no, 0 );
		PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
		PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, "-1", 0 );
	        
	    }
	    else
	    {
	        Fget32(recvbuf, 167772191, 0, (char*)err_msg, 0);
		sprintf(err_msg, "系统忙,请稍后再试");
		app_err_no = 99999;
		PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&app_err_no, 0 );
		PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, "-1", 0 );
	    }        
	    PutPoolDataByName("TBANK", "hostReturnCode", 0, 0, "8888", 0);
	    PutPoolDataByName("TBANK", "hostErrorMessage", 0, 0, err_msg, 0);
	    return PB_ERR;     
	}   
	
	
    Fget32(recvbuf, 138653742, 0, (char*)&intr, 0);
    WriteLog(DEBUG_LVL, "应收利息:%-.2f", intr); 
    tpfree((char*)sendbuf);
    tpfree((char*)recvbuf);
    
    /******************** 1.利息试算 **********************/
    
    
    sprintf(databuf, "%-.2f", intr);
    PutPoolDataByName("BUSIIB", "repayIntrst", 0, 0, databuf, 0);
    
    /********************* 2.利率试算 *********************/
    GetPoolDataByName("BUSIIB", "acct", 0, 0, acct_no, 0);      /* 账号 */
    PutPoolDataByName( "LOAN",  "LoanAcc", 0, 0, acct_no, 0 );
    PutPoolDataByName( "LOAN",  "CstmManger", 0, 0, "2806", 0 );
    PutPoolDataByName( "LOAN",  "LoanNo",    0, 0, loan_no, 0 );
    PutPoolDataByName( "LOAN",  "InstNo",     0, 0, "9996", 0 );
    PutPoolDataByName( "LOAN",  "PrdNo",     0, 0, "4005", 0 );
    /** 打包头 **/
    PutPoolDataByName( "ABSHEAD", "_tx_code",    0, 0, "4440",   0 );
    PutPoolDataByName( "ABSHEAD", "_tx_op_stat", 0, 0, "N",      0 );
    PutPoolDataByName( "ABSHEAD", "chnl_no",     0, 0, "7",      0 );
    PutPoolDataByName( "ABSHEAD", "_tlr_no",     0, 0, "888889",  0 );
    PutPoolDataByName( "ABSHEAD", "organ_no",    0, 0, "9996", 0 );
    PutPoolDataByName( "ABSHEAD", "_seq_no",     0, 0, tt_seqno1, 0 );
	PutPoolDataByName( "APSYS",   "HstSeqNo",    0, 0, "000000", 0 );
     
    WriteLog( APP_LVL, "=============FML打包===============" );
    ret = Data_PackFml( "110|4440|0" );
    if (ret != 0) 
    {
        WriteLog( ERR_LVL, "ERROR: FML打包错: %d\n", ret );
		sprintf(err_msg, "系统忙,请稍后再试");
		app_err_no = 99999;
		PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&app_err_no, 0 );
		PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
		PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, "-1", 0 );
        return PB_ERR;
    }
    if( Comm_AcCallFmlAndUnpack("110|LOAN2SVC|4440|1") != 0) 
    {
        WriteLog( ERR_LVL, "ERROR:FML通讯解包错" );
		sprintf(err_msg, "系统忙,请稍后再试");
		app_err_no = 99999;
		PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&app_err_no, 0 );
		PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
		PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, "-1", 0 );
        return PB_ERR;
    }
    GetPoolDataByName( "ABSHEAD", "_host_stat", 0, 0, &hoststat, 0 );
    if( hoststat != 0 ) 
    {
        GetPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
        if( hoststat == -1 ) 
        {
            WriteLog( APP_LVL, "通讯超时:[%s]", err_msg );
		sprintf(err_msg, "系统忙,请稍后再试");
		app_err_no = 99999;
		PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&app_err_no, 0 );
		PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
		PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, "-1", 0 );
        }
        else 
        {
            WriteLog( APP_LVL, "核心查询交易失败:[%s]", err_msg );
		PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, "-1", 0 );
		GetPoolDataByName( "LOAN", "retcode", 0, 0, retcode, 0 );
		rtrim( retcode );
		if( strncmp(retcode,"57",2 ) == 0 )
		{
			strcpy(err_msg,"账户状态为冻结或止付,不允许办理此业务");
			PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
		}
		if( strncmp(retcode,"ZF",2 ) == 0 )
		{
			strcpy(err_msg,"请到柜面办理您的第一次放款交易");
			PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
		}
        }
        return PB_ERR;
    }

	GetPoolDataByName( "LOAN", "Fratio_n", 0, 0, (char*)&rate, 0 );
    WriteLog( APP_LVL, "执行利率rate = [%0.2f]\n", rate);
    sprintf(instrt,  "%0.2f", rate);
	if(wytry_cal_trans_fee() != 0)
	{
		WriteLog( ERR_LVL, "取手续费错");
		sprintf(err_msg, "取手续费错");
		app_err_no = 99999;
		PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&app_err_no, 0 );
		PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
		PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, "-1", 0 );
		return -1;
	}
    
	PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, "0", 0 );
    return PB_OK;
}
/*****************************************************
* Function     :QryLoanRepayDtl
* Description  :贷还款交易明细查询_2033
* Input        ： 无
* Output       : 无
* Return       :  0 -- 成功
                 -1 -- 失败
*-----------------------------------------
*Create        Date         Action
* zhfei       2013/1/10    Create
*****************************************************/
int wyQryLoanRepayDtl()
{
    struct s_loan_iou_tsf loan_iou;	        /*借据信息*/
    long loan_iou_num = 0;
    FBFR32 * sendbuf;
    FBFR32 * recvbuf; 
    struct head head;
    long sendlen = 0;
    long reclen = 0;
    char loan_no[32+1]; 
    char contract_id[20+1];
    char beg_pos[8+1];
    char beg_cnt[8+1];
    long bgn_no = 0;
    long get_num = 0;
    long host_stat = 0;
    char loan_inst[4+1];
    char curr_type[2+1];
    char PB_seqno[10+1];
    char TT_seqno[10+1];
    char err_msg[1024+1];
    char syscmd[100+1];
    char ftpfilename[64+1];
    long totlnm = 0;
    char ctotl_num[8+1];
    long ret = 0;
    FILE    *fp = NULL;
    char filename[50+1];
    char tran_date[8+1];
    char tran_type[8+1];
    long count = 0;
    long i, j=0;
    long cut_no = 1;
	char tmpamt[20];
    struct str
    {
        char tran_date[8];
        char tran_type[4];
        double tran_amt;
        double cap_amt;
        double interest;
        char res[28];
    } loan_dtl[100];
    char  *p = NULL, *q = NULL;
    char tran_amt[16+1];
    char cap_amt[16+1];
    char interest[16+1];
    char ccount[8+1];
    memset(ccount, 0, sizeof(ccount));

    memset(&loan_iou,         0x00,     sizeof(loan_iou));
    memset(loan_dtl,        0x00,     sizeof(loan_dtl));
    memset(loan_no,         0x00,     sizeof(loan_no));
    memset(contract_id,     0x00,     sizeof(contract_id));
    memset(beg_pos,         0x00,     sizeof(beg_pos));
    memset(beg_cnt,         0x00,     sizeof(beg_cnt));
    memset(loan_inst,       0x00,     sizeof(loan_inst));
    memset(curr_type,       0x00,     sizeof(curr_type));
    memset(PB_seqno,        0x00,     sizeof(PB_seqno));
    memset(TT_seqno,        0x00,     sizeof(TT_seqno));
    memset(err_msg,         0x00,     sizeof(err_msg));
    memset(syscmd,          0x00,     sizeof(syscmd));
    memset(ftpfilename,     0x00,     sizeof(ftpfilename));
    memset(ctotl_num,       0x00,     sizeof(ctotl_num));
    memset(filename,        0x00,     sizeof(filename));
    memset(tran_date,       0x00,     sizeof(tran_date));
    memset(tran_type,       0x00,     sizeof(tran_type));
    memset(tran_amt,       0x00,     sizeof(tran_amt));
    memset(tmpamt,       0x00,     sizeof(tmpamt));
    memset(cap_amt,        0x00,     sizeof(cap_amt));
    memset(interest,       0x00,     sizeof(interest));
    
    
    
    /************** 获取查询数据 ************/
	GetPoolDataByName("BUSIIB", "payNb", 0, 0, loan_no, 0);
	trim(loan_no);
	if ( strlen(loan_no) == 0 )
	{
	    WriteLog ( ERR_LVL, "输入的借据号为空!");
	    return PB_ERR;
	}
    
    /* 起始记录号 */
	strcpy(beg_pos,"1");	
	if(strlen(beg_pos)!= 0)
    {
        trim(beg_pos);
        bgn_no = atol(beg_pos);
        if (bgn_no < 1)
        {
            WriteLog(ERR_LVL, "起始序号不能小于1");
            return PB_ERR;
        }
    }
    /* 本次返回记录数 */
	GetPoolDataByName( "TBANK", "turnPageShowNum ", 0, 0, beg_cnt, 0);
	strcpy(beg_cnt,"10");
	if(strlen(beg_cnt) != 0)
	{
	    trim(beg_cnt);
	    get_num = atol(beg_cnt);
	}
	if ((NULL == beg_cnt) || (0 == get_num)) /* 默认返回数为10 */
	{
	    get_num = 10;
	}
    
     /* 获取流水号信息 */
    ret = get_PBseqno(PB_seqno);
	if(ret != 0)
	{
		WriteLog(ERR_LVL,"ERROR: get_PBseqno: %s\n", PB_seqno);
		return PB_ERR;
	}
    if ( (ret = get_TTseqno( TT_seqno )) != 0 )
	{
        WriteLog ( ERR_LVL, "取TT流水号出错");
        return( PB_ERR);
    }
    /********************** 查询自助贷款记录 *********************/
    PutPoolDataByName( "LOAN",  "CstmManger", 0, 0, "2807", 0 );
    PutPoolDataByName( "LOAN",  "LoanNo",    0, 0, loan_no, 0 );
    strcpy(loan_inst, "9996");
    PutPoolDataByName( "LOAN",  "InstNo",     0, 0, loan_inst, 0 );
    /** 打包头 **/
    PutPoolDataByName( "ABSHEAD", "_tx_code",    0, 0, "4440",   0 );
    PutPoolDataByName( "ABSHEAD", "_tx_op_stat", 0, 0, "N",      0 );
    PutPoolDataByName( "ABSHEAD", "chnl_no",     0, 0, "7",      0 );
    PutPoolDataByName( "ABSHEAD", "_tlr_no",     0, 0, "888891",  0 );
    PutPoolDataByName( "ABSHEAD", "organ_no",    0, 0, loan_inst, 0 );
    PutPoolDataByName( "ABSHEAD", "_seq_no",     0, 0, TT_seqno, 0 );
    PutPoolDataByName( "ABSHEAD", "list_seqno",  0, 0, PB_seqno, 0 );
	PutPoolDataByName( "APSYS",   "HstSeqNo",    0, 0, "000000", 0 );
     
    WriteLog( APP_LVL, "=============FML打包===============" );
    ret = Data_PackFml( "110|4440|0" );
    if (ret != 0) 
    {
        WriteLog( ERR_LVL, "ERROR: FML打包错: %d\n", ret );
        return PB_ERR;
    }
    if( Comm_AcCallFmlAndUnpack("110|LOAN2SVC|4440|1") != 0) 
    {
        WriteLog( ERR_LVL, "ERROR:FML通讯解包错" );
        return PB_ERR;
    }
    GetPoolDataByName( "ABSHEAD", "_host_stat", 0, 0, &host_stat, 0 );
    if( host_stat != 0 ) 
    {
        GetPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
        if( host_stat == -1 ) 
        {
            WriteLog( APP_LVL, "通讯超时:[%s]", err_msg );
        }
        else 
        {
            WriteLog( APP_LVL, "核心查询交易失败:[%s]", err_msg );
        }
        return PB_ERR;
    }

	GetPoolDataByName( "ABSHEAD", "recv_filename", 0, 0, ftpfilename, 0 );
	GetPoolDataByName( "LOAN", "MaxNum",  0, 0, &totlnm,  0 );
	if( totlnm == 0 ) 
	{
        WriteLog( ERR_LVL, "空文件[%s][%d]直接返回退出!\n",ftpfilename, totlnm );
        return  PB_ERR;
	}
	sprintf( ctotl_num, "%ld", totlnm );
    WriteLog( APP_LVL, "##############![%ld][%s]\n", totlnm, ctotl_num );
    
  
    /******************* 取文件 *******************/
	WriteLog( ERR_LVL, "Ftp取文件参数![%s]",ftpfilename );
    ret = TransFileRecv( "FTPFILE",
						 ftpfilename,
						 loan_inst,
						 0 );
    if( ret != 0 )
    {
        WriteLog( ERR_LVL, "Ftp取文件[%s]失败!\n", ftpfilename );
        return PB_ERR;
    }

	sprintf( syscmd, "mv %s/%c%c/%s/%s %s 1>/dev/null 2>&1 ",\
		      getenv("PRINTERDIR"), \
		        loan_inst[0], loan_inst[1], loan_inst, \
		            ftpfilename, getenv("PRINTERDIR"));
	system(syscmd);
    WriteLog( APP_LVL, "Ftp get file SUCCEED![%s]\n", syscmd );
    /************ 读取文件内容 ************/
    sprintf(filename, "%s/%s", getenv("PRINTERDIR"), ftpfilename);
    fp = fopen(filename, "r");
	if ( fp == NULL )
	{
		WriteLog( ERR_LVL, "打开文件[%s]失败", filename);
		return PB_ERR;
	}
	while(! feof( fp))
	{
	    for (i=1; i < totlnm+1; i++)
	    {
	        WriteLog(ERR_LVL, "struct str=[%d]:loan_dtl=[%d]", sizeof(struct str), sizeof(loan_dtl[j]));
	        fread(&loan_dtl[j], sizeof(struct str)+3, 1, fp);
	        if (cut_no < bgn_no)
	        {
	            cut_no++;
	            j++;
	            continue;   
	        } 
	        q = (char *)&loan_dtl[j];
	        if (*q == '\0')
	        {
	            break;    
	        }
	        WriteLog(ERR_LVL, "loan_dtl=[%s]", q);
	        p = q; q=strchr(p,'|'); *q='\0'; strcpy(tran_date, p ); q++;
	        p = q; q=strchr(p,'|'); *q='\0'; strcpy(tran_type, p ); q++;
	        p = q; q=strchr(p,'|'); *q='\0'; strcpy(tran_amt, p );  q++;
	        p = q; q=strchr(p,'|'); *q='\0'; strcpy(cap_amt, p );   q++;
	        p = q; q=strchr(p,'|'); *q='\0'; strcpy(interest, p);   q++;
	        sprintf(tran_amt, "%-16.2f", atof(tran_amt)/100.00);
	        sprintf(cap_amt, "%-16.2f", atof(cap_amt)/100.00);
	        sprintf(interest, "%-16.2f", atof(interest)/100.00);
	        /*********** 组织返回打包 *********/
	        /* 交易日期 */
            PutPoolDataByName("BUSIIB", "repayDt", count, 0, tran_date, 0);
            
            if (strncmp(tran_type, "还本", 4) == 0)
            {
                /* 交易类型码 */
                PutPoolDataByName("BUSIIB", "repayMode", count, 0, "1", 0);
                /* 本金金额 */
                PutPoolDataByName("BUSIIB", "repayAmt", count, 0, tran_amt, 0);
				PutPoolDataByName("BUSIIB", "bal", count, 0, tran_amt, 0);
            }
            if (strncmp(tran_type, "还息", 4) == 0)
            {
                /* 交易类型码 */
                PutPoolDataByName("BUSIIB", "repayMode", count, 0, "2", 0);
                /* 本金金额 */
                PutPoolDataByName("BUSIIB", "repayIntrst", count, 0, interest, 0);
				PutPoolDataByName("BUSIIB", "bal", count, 0, tran_amt, 0);
            }
            if (strncmp(tran_type, "结息", 4) == 0)
            {
                /* 交易类型码 */
                PutPoolDataByName("BUSIIB", "repayMode", count, 0, "3", 0);
                /* 本金金额 */
                PutPoolDataByName("BUSIIB", "repayAmt", count, 0, cap_amt, 0);
                /* 利息金额 */
                PutPoolDataByName("BUSIIB", "repayIntrst", count, 0, tran_amt, 0);
				sprintf(tmpamt,"%.2f",atof(cap_amt)+atof(tran_amt));
				PutPoolDataByName("BUSIIB", "bal", count, 0, tmpamt, 0);
            }
            if (strncmp(tran_type, "借款", 4) == 0)
            {
                /* 交易类型码 */
                PutPoolDataByName("BUSIIB", "repayMode", count, 0, "4", 0);
                /* 交易金额 */
                PutPoolDataByName("BUSIIB", "repayAmt", count, 0, tran_amt, 0);
                PutPoolDataByName("BUSIIB", "bal", count, 0, tran_amt, 0);
            }
            count++;
            j++;
            if ((count >= get_num) || (count >= 10))
            {
                break;    
            }
	    }
		break;
	}
	fclose( fp);
    
    
    sprintf(ccount, "%ld", count);
	/* 返回给打包结构的记录条数 */
	PutPoolDataByName( "BUSIIB", "v", 0, 0, ccount, 0);
	/* 本次返回记录笔数 */
	/* 记录总笔数 */

	PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, "0", 0 );
    return PB_OK;
}
/********************************************
 * desc        : 2039--手续费试算
 * Input       : 无
 * Output      : 无
 * Return      : 0  -- 成功
 *             : -1 -- 失败
 * -------------------------------------
 * Create             Date        Action
 * wo               2013/01/19    Created.
*/
int wytry_cal_trans_fee()
{
    int ret = 0;
    
    char TT_seqno1[10+1];
    char oper_tlr[6+1];
    char inst_no[4+1];
    
    char loan_no[32+1];
    char card_no[32+1];
    
    char loan_inst[4+1];
    char open_inst[4+1];
    
    long core_err;
    char err_msg[255];
    char databuf[60];
	char sqlstr[500+1];
    
    long hoststat = 0;
    
    double opfee_amt = .0f;
    double fee1 = .0f;
    
    memset(TT_seqno1, 0, sizeof(TT_seqno1));
    memset(oper_tlr, 0, sizeof(oper_tlr));
    memset(inst_no, 0, sizeof(inst_no));
    
    memset(loan_no, 0, sizeof(loan_no));
    memset(card_no, 0, sizeof(card_no));
    
    memset(loan_inst, 0, sizeof(loan_inst));
    memset(open_inst, 0, sizeof(open_inst));
    
    memset(err_msg, 0, sizeof(err_msg));
    memset(databuf, 0, sizeof(databuf));
    
    
    GetPoolDataByName("BUSIIB", "acct", 0, 0, card_no, 0);
    GetPoolDataByName("BUSIIB", "payNb", 0, 0, loan_no, 0);
    GetPoolDataByName("BUSIIB", "repayAmt", 0, 0, databuf, 0);
    opfee_amt = atof(databuf);
 
 	ret = get_TTseqno(TT_seqno1);
	if (ret)
	{
	    WriteLog(ERR_LVL, "取得PB流水号失败");
	    return PB_ERR;
	}
	
    /*查询合同*/
    PutPoolDataByName( "ABSHEAD", "_tx_code",    0, 0, "4440",   0 );
    PutPoolDataByName( "ABSHEAD", "_tx_op_stat", 0, 0, "N",      0 );
    PutPoolDataByName( "ABSHEAD", "chnl_no",     0, 0, "7",      0 );
    PutPoolDataByName( "ABSHEAD", "_tlr_no",     0, 0, "888891", 0 );
    PutPoolDataByName( "ABSHEAD", "organ_no",    0, 0, "9996", 0 );
    
    PutPoolDataByName( "ABSHEAD", "_seq_no",     0, 0, TT_seqno1, 0 );
    /*
    PutPoolDataByName( "ABSHEAD", "list_seqno",  0, 0, pb_seqno, 0 );
    */
   
	PutPoolDataByName( "APSYS",   "HstSeqNo",    0, 0, "000000", 0 );
    
    PutPoolDataByName( "LOAN",  "LoanNo",    0, 0, loan_no, 0 );
    PutPoolDataByName( "LOAN",  "LoanAcc",   0, 0, card_no, 0 );
	PutPoolDataByName( "LOAN",  "CstmManger",  0, 0, "2802", 0 );  /*查询合同*/
	PutPoolDataByName( "LOAN",  "PrdNo",   0, 0, "4005", 0 );
	

/**取贷款机构**/
    memset(sqlstr,0,sizeof(sqlstr));
	sprintf ( sqlstr,"select loan_inst  from t_loan_iou where loan_no = '%s'",loan_no);
	WriteLog(DEBUG_LVL0,"loan_no[%s]\n",loan_no );
	WriteLog(DEBUG_LVL0,"sqlstr[%s]\n", sqlstr );
	ret = PqQry("9996", loan_inst, sqlstr);
	if(ret)
	{
		WriteLog ( ERR_LVL, "查询t_loan_iou错ret[%d]\n",ret);
		PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, "查询t_loan_iou错", 0 );
		return (  -1);
	}
    WriteLog(APP_LVL, "贷款机构:%s", loan_inst);
    
    ret = get_acct_open_inst(card_no, open_inst);
    if (ret)
    {
        WriteLog(ERR_LVL, "获取账户[%s]开户机构失败", card_no);
    }
        
    /*处理手续费*/
    ret = get_fee_flag(open_inst, loan_inst);
    if (ret < 0)
    {
        WriteLog(ERR_LVL, "获取手续费标识失败");
        return PB_ERR;
    }
    
    if (ret == 1 || ret == 3)
    {    
    	strcpy(oper_tlr, "888891");
    	strcpy(inst_no, "9996"); 
    	PutPoolDataByName ( "ABSHEAD", "_seq_no", 0, 0, TT_seqno1, 0);
    	PutPoolDataByName ( "ABSHEAD", "_tlr_no", 0, 0, oper_tlr, 0);
    	PutPoolDataByName ("ABSHEAD", "_tx_code", 0, 0, "5797", 0);        
    	PutPoolDataByName ( "ABSHEAD", "organ_no", 0, 0, inst_no, 0);
    	PutPoolDataByName ( "ABSHEAD", "_tx_op_stat", 0, 0, "N", 0);
    	PutPoolDataByName ( "ABSHEAD", "chnl_no", 0, 0, "6", 0);
    
    	PutPoolDataByName ( "CBS", "Account", 0, 0, card_no, 0);
    	PutPoolDataByName ( "CBS", "Amt", 0, 0, &opfee_amt, 0);
    	PutPoolDataByName ( "CBS", "ChnoNo", 0, 0, "6", 0);
    	PutPoolDataByName ( "CBS", "distflag", 0, 0, "4", 0);
    	PutPoolDataByName ( "CBS", "AnalCode", 0, 0, "2806", 0);
    	ret = Data_PackFml("110|5797|0");
    	if (ret)
    	{
    		WriteLog(ERR_LVL,"ERROR: FML打包错: %d\n",ret);
    		return (PB_ERR);
    	}
    
    	WriteLog(TEST_LVL, "=============与核心通讯===============");
    	ret = Comm_AcCallFmlAndUnpack("110|PBSVC|5797|1");
    	if(ret)
    	{
    		WriteLog(ERR_LVL,"ERROR: FML解包错: %d\n", ret);
    		return -1;
    	}
    
    	GetPoolDataByName("ABSHEAD","_host_stat",0,0, &hoststat,0);
    	GetPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, &core_err, 0);
    	if ( hoststat == 0||core_err == 100)
    	{
    		GetPoolDataByName ( "CBS", "Fee1", 0, 0, &fee1, 0);
    		WriteLog ( DEBUG_LVL0, "计算出客户手续费fee[%f]", fee1);
    	}
    	else
    	{
    		GetPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg,0 );
    		WriteLog (DEBUG_LVL0, "app_err_no[%d]", core_err);
    		if( hoststat == -1 )
    		{
    			WriteLog( DEBUG_LVL0, "通讯超时:[%s]", err_msg );
    		}
    		else
    		{
    			WriteLog( DEBUG_LVL0, "查询失败:[%s]", err_msg );
    			WriteLog ( DEBUG_LVL0, "系统异常[%d]", core_err);
    		}
    		return (-1);
    	}
    }
    
    sprintf(databuf, "%.2f", fee1);
    PutPoolDataByName("BUSIIB", "fee", 0, 0, databuf, 0);
    
    return PB_OK;    
}
/********************************************
 * Function    : get_acct_open_inst()
 * desc        : 取帐号/卡号开户机构
 * Input       : card_no --卡号/账号
 * Output      : inst_no --开户机构
 * Return      : 0  -- 成功
 *             : -1 -- 失败
 * -------------------------------------
 * Create             Date        Action
 * wg               2013/01/21    Created.
*/
int
get_acct_open_inst(char *card_no, char *inst_no)
{
    long    host_stat = -1;
    char    opinstno[4+1];
    char    err_msg[60+1];
    char    old_trancode[10+1];
    char    old_tlrno[12+1];
    char    old_organno[12+1];
    char    old_chnlno[1+1];
	
	char 	open_instfn[12+1];
	int     ret = 0;

    memset(opinstno, 0, sizeof(opinstno));
    memset(err_msg, 0, sizeof(err_msg));
    memset(old_trancode, 0, sizeof(old_trancode));
    memset(old_tlrno, 0, sizeof(old_tlrno));
    memset(old_organno, 0, sizeof(old_organno));
    memset(old_chnlno, 0, sizeof(old_chnlno));
	memset(open_instfn, 0, sizeof(open_instfn));

    Data_SetPoolNullValue("CBS|21|0");
 	Data_SetPoolNullValue("CBS|69|0");


    /****保存调用5711之前的环境*******/
    GetPoolDataByName("ABSHEAD", "_tx_code", 0, 0, old_trancode , 0);
    GetPoolDataByName("ABSHEAD", "_tlr_no", 0, 0, old_tlrno , 0);
    GetPoolDataByName("ABSHEAD", "organ_no", 0, 0, old_organno , 0);
    GetPoolDataByName("ABSHEAD", "chnl_no", 0, 0, old_chnlno , 0);

    PutPoolDataByName("ABSHEAD", "_tx_code", 0, 0, "5711" , 0);

	PutPoolDataByName( "ABSHEAD", "chnl_no", 0, 0, "6", 0);
	PutPoolDataByName("ABSHEAD", "_tlr_no", 0, 0, "888891", 0);
	PutPoolDataByName("ABSHEAD", "organ_no", 0, 0,  "9996", 0);

    PutPoolDataByName ( "CBS", "Addr", 0, 0, card_no, 0);
    WriteLog(DEBUG_LVL0, "accno=[%s]", card_no);

    if(Data_PackFml("110|5711|0") != 0)
    {
        WriteLog(ERR_LVL,"ERROR: FML打包错");
        return -1;
    }
    if(Comm_AcCallFmlAndUnpack("110|PBSVC|5711|1") != 0)
    {
   		WriteLog(ERR_LVL,"ERROR:FML通讯或解包错");
        return -1;
    }
    
    GetPoolDataByName( "ABSHEAD", "_host_stat", 0, 0, &host_stat, 0 );
    if( host_stat != 0 )
    {
        GetPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg,0 );
        return -1;
    }
    
    GetPoolDataByName ("CBS", "OpenInstNo", 0, 0, opinstno, 0);
    rtrim(opinstno);
    if(strlen(opinstno) == 0)
    {
        WriteLog(ERR_LVL, "开户机构为空[%s]", opinstno);
        return -1;
    }
	/*PutPoolDataByName ("PAGTBUF", "age_inst", 0, 0, opinstno, 0);*/
    WriteLog(ERR_LVL, "[%s]开户机构[%s]", card_no, opinstno);
    strcpy(inst_no, opinstno);
	/*取开卡行机构全码*/
	/*
	ret = GetInstFn( opinstno, open_instfn);
	if( ret != 0)
	{
		WriteLog (ERR_LVL, "取机构全码错!");
	    return -1;
	}
	rtrim(open_instfn);
	PutPoolDataByName( "PAGTBUF", "peerseqno", 0, 0, open_instfn, 0);
   	WriteLog (DEBUG_LVL0, "机构全码open_instfn[%s]", open_instfn);
    */
    /****还原********************/
    PutPoolDataByName("ABSHEAD", "_tx_code", 0, 0, old_trancode , 0);
    PutPoolDataByName("ABSHEAD", "_tlr_no", 0, 0, old_tlrno , 0);
    PutPoolDataByName("ABSHEAD", "organ_no", 0, 0, old_organno , 0);
 	PutPoolDataByName("ABSHEAD", "chnl_no", 0, 0, old_chnlno , 0);
    return PB_OK;
}
/********************************************
 * Function    : get_fee_flag()
 * Description : 得到电话银行收取手续费标识
 * Input       : inst_no1 --卡的开户机构 inst_no2 --贷款机构
 * Output      : 无
 * Return      : -1 -- 失败 
 *             :  0 --成功且不收取手续费 1--收客户手续费 2--收机构手续费 3--收客户和机构手续费
 * Create             Date        Action
 * wg               2012/12/21    Created.
*/
static int get_fee_flag(char *inst_no1, char *inst_no2)
{
    int ret = PB_OK, fee_flag = 0;
    
    char msg[60+1];
    
    char inst_fn1[12+1];
    char inst_fn2[12+1];
    
    memset(msg, 0, sizeof(msg));
    
    memset(inst_fn1, 0, sizeof(inst_fn1));
    memset(inst_fn2, 0, sizeof(inst_fn2));
    
    if (strcmp(inst_no1, inst_no2) == 0)
    {
        WriteLog(DEBUG_LVL0, "[%s],[%s],不用收取手续费", inst_no1, inst_no2);
        return 0;
    }
    
    ret = GetInstFn(inst_no1, inst_fn1);
    if (ret)
    {
        WriteLog(ERR_LVL, "取机构[%s]全码错", inst_no1);
        return PB_ERR;
    }    

    ret = GetInstFn(inst_no2, inst_fn2);
    if (ret)
    {
        WriteLog(ERR_LVL, "取机构[%s]全码错", inst_no2);
        return PB_ERR;
    }
    
    trim(inst_fn1);
    trim(inst_fn2);
    
    /*****发卡行与贷款行为同一县联社内的不同机构****/
    if (strncmp(inst_fn1, inst_fn2, 4) == 0)
    {
        return 0;
    }
    
    /*****发卡行与贷款行为同一市州内的不同机构****/
    if (strncmp(inst_fn1, inst_fn2, 2) == 0)
    {
        return 0;
    }
    
    return 1;
}
int
cmp_open_infor()
{
	long core_err=0,host_stat=0,hoststat=0,app_err_no=0;
	int ret=0;
	char acc[33],buffer[129],err_msg[61],certtyp[2],certNb[33],name[129];
	char phone[33],RetCode[10];

	memset(acc,0,sizeof(acc));
	memset(buffer,0,sizeof(buffer));
	memset(err_msg,0,sizeof(err_msg));
	memset(certtyp,0,sizeof(certtyp));
	memset(certNb,0,sizeof(certNb));
	memset(phone,0,sizeof(phone));
	memset(name,0,sizeof(name));
	memset(RetCode,0,sizeof(RetCode));

	ret = NetParaConv( "certTyp" );
	if(ret != 0 )
	{
		WriteLog(ERR_LVL,"证件类型转换错\n", ret);
		core_err = 99999;
		strcpy(err_msg,"证件出错");
		PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char*)&core_err, 0);
		PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
		PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, "-1", 0 );
		return ( -1);
	}
    GetPoolDataByName("PAGTBUF", "papertype", 0, 0,certtyp , 0);
    GetPoolDataByName("BUSIIB", "certNb", 0, 0,certNb , 0);
    GetPoolDataByName("BUSIIB", "payNb", 0, 0,phone , 0);
    GetPoolDataByName("BUSIIB", "custNm", 0, 0,name , 0);

    PutPoolDataByName("ABSHEAD", "_tx_code", 0, 0,"5712" , 0);
    PutPoolDataByName("ABSHEAD", "_tlr_no", 0, 0, "888889", 0);
    PutPoolDataByName("ABSHEAD", "organ_no", 0, 0,  "9996", 0);
    PutPoolDataByName( "ABSHEAD", "_tx_op_stat", 0, 0, "N" , 0 );
    PutPoolDataByName( "ABSHEAD", "chnl_no", 0, 0, "6", 0);
    PutPoolDataByName( "ABSHEAD", "_host_stat", 0, 0, &host_stat, 0);
	sprintf( buffer,"1110000000000000000000000011100000000000" );

    GetPoolDataByName ( "RCBIB", "acct", 0, 0, acc, 0);  /*卡号*/
	rtrim(acc);
    PutPoolDataByName ( "CBS", "TxFlag", 0, 0, acc, 0);  /*卡号*/
    PutPoolDataByName ( "CBS", "OutAccName", 0, 0, buffer, 0);
    PutPoolDataByName ( "CBS", "PaperId", 0, 0, certtyp, 0);
    PutPoolDataByName ( "CBS", "PaperNo", 0, 0, certNb, 0);
    PutPoolDataByName ( "CBS", "Phone", 0, 0, phone, 0);
    PutPoolDataByName ( "CBS", "CustName", 0, 0, name, 0);

    WriteLog(DEBUG_LVL0, "=============FML打包===============");
    ret = Data_PackFml("110|5712|0");
    if ( ret )
    {
		WriteLog(ERR_LVL,"ERROR: FML打包错: %d\n", ret);
		core_err = 99999;
		strcpy(err_msg,"出错了,请稍后再试");
		PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char*)&core_err, 0);
		PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
		PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, "-1", 0 );
		return ( -1);
    }
    WriteLog(DEBUG_LVL0, "=============与核心通讯===============");
    ret = Comm_AcCallFmlAndUnpack("110|PBSVC|5712|1");
    if( ret )
    {
        WriteLog(ERR_LVL,"ERROR: FML解包错: %d\n", ret);
        core_err = 99999;
		strcpy(err_msg,"出错了,请稍后再试");
		PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char*)&core_err, 0);
		PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
		PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, "-1", 0 );
        return -1;
    }
    GetPoolDataByName( "ABSHEAD", "_host_stat", 0, 0, &hoststat, 0 );
    if ( hoststat != 0 )
    {
        GetPoolDataByName("ABSHEAD", "app_err_no", 0, 0, &app_err_no, 0);
        sprintf(RetCode, "%ld", app_err_no);
        rtrim(RetCode);
        if ( hoststat == -1 )
        {
            WriteLog( DEBUG_LVL0, "通讯超时:[%s]", err_msg );
            core_err = 99999;
			strcpy(err_msg,"与核心通讯超时");
			PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char*)&core_err, 0);
			PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
			PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, "-1", 0 );
            return -1;
        }
        else
        {
            if ( strcmp(RetCode,"-630")==0)
            {
                WriteLog ( ERR_LVL, "证件号码不一致[%s]", certNb);
                core_err = 99999;
                strcpy( err_msg, "与登记证件号码不匹配" );
                PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&core_err, 0 );
                PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
				PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, "-1", 0 );
                return ( -1);
            }
            if ( strcmp(RetCode,"-631")==0)
            {
                WriteLog ( ERR_LVL, "客户姓名不一致[%s]", name);
                core_err = 99999;
                strcpy( err_msg, "户名与银行卡号不匹配" );
                PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&core_err, 0 );
                PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
				PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, "-1", 0 );
                return ( -1);
            }
            if (strcmp(RetCode,"-632")==0)
            {
                WriteLog ( ERR_LVL, "手机号码不一致[%s]", phone);
                core_err = 99999;
                strcpy( err_msg, "手机号码不符" );
                PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&core_err, 0 );
				PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
				PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, "-1", 0 );
                return ( -1);
            }
            else
            {
                WriteLog ( ERR_LVL, "与核心通讯错");
                core_err = 99999;
                PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&core_err, 0 );
				PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, "-1", 0 );
               return ( -1 );
            }
        }
	}
	return 0;
}

#if 0
/**用新的方式处理....*/
int
bat_qry_prn()
{
    EXEC SQL BEGIN DECLARE SECTION;
        struct s_sc_agt_bat_item_mgmt item_mgmt;
        struct s_sc_agt_para_mgmt para_mgmt;
        char acc[32],sql_str[256],cv[6];
    EXEC SQL END DECLARE SECTION;
    char err_msg[61];
    long err_code=0,i=0;
    int  rec_num=0;
    int ret=0;
    
    /* Added by MSJ for wage's querying 20151110 - Start */
    char thver[6+1];
    char thcn2utf8[1+1];
    char thpsndMbrCd[4+1];
    char thpsndAppCd[3+1];
    char thpsndDt[8+1];
    char thpsndTm[6+1];
    char thprcvMbrCd[4+1];
    char thprcvAppCd[3+1];
    char thmmsgCd[10+1];
    char thmcallTyp[4+1];
    char thmseqNb[15+1];
    char thmsndMbrCd[4+1];
    char thmsndAppCd[3+1];
    char thmsndDt[8+1];
    char thmsndTm[6+1];
    char thmrcvMbrCd[4+1];
    char thmrcvAppCd[3+1];
    char thmrefMsgCd[10+1];
    char thmrefCallTyp[4+1];
    char thmrefSndMbrCd[4+1];
    char thmrefSndAppCd[3+1];
    char thmrefSndDt[8+1];
    char thmrefSeqNb[15+1];
    char thsretCd[6+1];
    char thsdesc[256+1];
    char thslocation[256+1];
    char thsmbrCd[4+1];
    char thsappCd[3+1];
    
    FILE * fp; 
    char trandate[10+1];
    char seqno[10+1];
    char filename[256+1];
    char xmloutput[256+1];
    char ftpfilename[256+1];
    char cmd[256+1];
    char tmpstr[145+1];
    /* Added by MSJ for wage's querying 20151110 - End */

    memset(&item_mgmt, 0, sizeof(item_mgmt));
    memset(&para_mgmt, 0, sizeof(para_mgmt));
    memset(acc, 0, sizeof(acc));
    memset(sql_str, 0, sizeof(sql_str));
    memset(err_msg, 0, sizeof(err_msg));
    
    memset( thver, 0, sizeof(thver) );
    memset( thcn2utf8, 0, sizeof(thcn2utf8) );
    memset( thpsndMbrCd, 0, sizeof(thpsndMbrCd) );
    memset( thpsndAppCd, 0, sizeof(thpsndAppCd) );
    memset( thpsndDt, 0, sizeof(thpsndDt) );
    memset( thpsndTm, 0, sizeof(thpsndTm) );
    memset( thprcvMbrCd, 0, sizeof(thprcvMbrCd) );
    memset( thprcvAppCd, 0, sizeof(thprcvAppCd) );
    memset( thmmsgCd, 0, sizeof(thmmsgCd) );
    memset( thmcallTyp, 0, sizeof(thmcallTyp) );
    memset( thmseqNb, 0, sizeof(thmseqNb) );
    memset( thmsndMbrCd, 0, sizeof(thmsndMbrCd) );
    memset( thmsndAppCd, 0, sizeof(thmsndAppCd) );
    memset( thmsndDt, 0, sizeof(thmsndDt) );
    memset( thmsndTm, 0, sizeof(thmsndTm) );
    memset( thmrcvMbrCd, 0, sizeof(thmrcvMbrCd) );
    memset( thmrcvAppCd, 0, sizeof(thmrcvAppCd) );
    memset( thmrefMsgCd, 0, sizeof(thmrefMsgCd) );
    memset( thmrefCallTyp, 0, sizeof(thmrefCallTyp) );
    memset( thmrefSndMbrCd, 0, sizeof(thmrefSndMbrCd) );
    memset( thmrefSndAppCd, 0, sizeof(thmrefSndAppCd) );
    memset( thmrefSndDt, 0, sizeof(thmrefSndDt) );
    memset( thmrefSeqNb, 0, sizeof(thmrefSeqNb) );
    memset( thsretCd, 0, sizeof(thsretCd) );
    memset( thsdesc, 0, sizeof(thsdesc) );
    memset( thslocation, 0, sizeof(thslocation) );
    memset( thsmbrCd, 0, sizeof(thsmbrCd) );
    memset( thsappCd, 0, sizeof(thsappCd) );
    memset( trandate, 0, sizeof(trandate) );
    memset( seqno, 0, sizeof(seqno) );
    memset( filename, 0, sizeof(filename) );
    memset( ftpfilename, 0, sizeof(ftpfilename) );
    memset( xmloutput, 0, sizeof(xmloutput) );
    memset( cmd, 0, sizeof(cmd) );
    memset( tmpstr, 0, sizeof(tmpstr) );
    
    /* Added by MSJ for wage's querying 20151110 - Start */
    GetPoolDataByName( "PBSYS", "PbDate", 0, 0, trandate, 0 );
    trim( trandate );
    WriteLog( APP_LVL, "trandate[%s]", trandate );
    
    GetPoolDataByName( "PBSYS", "SrcJourNo", 0, 0, seqno, 0 );
    trim( seqno );
    WriteLog( APP_LVL, "seqno[%s]", seqno );
    
    sprintf( filename, "%s/NETBANK/TOPB/CBS1000211_%s_%s.xml", getenv("PRINTERDIR"), trandate, seqno );
    WriteLog( APP_LVL, "filename[%s]", filename );
    
    fp = fopen( filename, "w+" );
    if( fp == NULL )
    {
        WriteLog( ERR_LVL, "打开文件失败!" );
        err_code = 99999;
        strcpy( err_msg, "打开文件失败!" );
        PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&err_code, 0 );
        PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
        PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, "-1", 0 );
        return (-1);
    }
    
    /***写包头信息***/
    GetPoolDataByName( "BUSIIB", "thver", 0, 0, thver, 0 );
    GetPoolDataByName( "BUSIIB", "thcn2utf8", 0, 0, thcn2utf8, 0 );
    GetPoolDataByName( "BUSIIB", "thpsndMbrCd", 0, 0, thpsndMbrCd, 0 );
    GetPoolDataByName( "BUSIIB", "thpsndAppCd", 0, 0, thpsndAppCd, 0 );
    GetPoolDataByName( "BUSIIB", "thpsndDt", 0, 0, thpsndDt, 0 );
    GetPoolDataByName( "BUSIIB", "thpsndTm", 0, 0, thpsndTm, 0 );
    GetPoolDataByName( "BUSIIB", "thprcvMbrCd", 0, 0, thprcvMbrCd, 0 );
    GetPoolDataByName( "BUSIIB", "thprcvAppCd", 0, 0, thprcvAppCd, 0 );
    GetPoolDataByName( "BUSIIB", "thmmsgCd", 0, 0, thmmsgCd, 0 );
    GetPoolDataByName( "BUSIIB", "thmcallTyp", 0, 0, thmcallTyp, 0 );
    GetPoolDataByName( "BUSIIB", "thmseqNb", 0, 0, thmseqNb, 0 );
    GetPoolDataByName( "BUSIIB", "thmsndMbrCd", 0, 0, thmsndMbrCd, 0 );
    GetPoolDataByName( "BUSIIB", "thmsndAppCd", 0, 0, thmsndAppCd, 0 );
    GetPoolDataByName( "BUSIIB", "thmsndDt", 0, 0, thmsndDt, 0 );
    GetPoolDataByName( "BUSIIB", "thmsndTm", 0, 0, thmsndTm, 0 );
    GetPoolDataByName( "BUSIIB", "thmrcvMbrCd", 0, 0, thmrcvMbrCd, 0 );
    GetPoolDataByName( "BUSIIB", "thmrcvAppCd", 0, 0, thmrcvAppCd, 0 );
    GetPoolDataByName( "BUSIIB", "thmrefMsgCd", 0, 0, thmrefMsgCd, 0 );
    GetPoolDataByName( "BUSIIB", "thmrefCallTyp", 0, 0, thmrefCallTyp, 0 );
    GetPoolDataByName( "BUSIIB", "thmrefSndMbrCd", 0, 0, thmrefSndMbrCd, 0 );
    GetPoolDataByName( "BUSIIB", "thmrefSndAppCd", 0, 0, thmrefSndAppCd, 0 );
    GetPoolDataByName( "BUSIIB", "thmrefSndDt", 0, 0, thmrefSndDt, 0 );
    GetPoolDataByName( "BUSIIB", "thmrefSeqNb", 0, 0, thmrefSeqNb, 0 );
    GetPoolDataByName( "BUSIIB", "thsretCd", 0, 0, thsretCd, 0 );
    GetPoolDataByName( "BUSIIB", "thsdesc", 0, 0, thsdesc, 0 );
    GetPoolDataByName( "BUSIIB", "thslocation", 0, 0, thslocation, 0 );
    GetPoolDataByName( "BUSIIB", "thsmbrCd", 0, 0, thsmbrCd, 0 );
    GetPoolDataByName( "BUSIIB", "thsappCd", 0, 0, thsappCd, 0 );
    
    fprintf( fp,
            "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n"
            "<transaction>\n"
            "  <header>\n"
            "    <ver>%s</ver>\n"
            "    <cn2utf8>%s</cn2utf8>\n"
            "    <pnt>\n"
            "      <sndMbrCd>6500</sndMbrCd>\n"
            "      <sndAppCd>CBS</sndAppCd>\n"
            "      <sndDt>%s</sndDt>\n"
            "      <sndTm>%s</sndTm>\n"
            "      <rcvMbrCd>0000</rcvMbrCd>\n"
            "      <rcvAppCd>ESB</rcvAppCd>\n"
            "    </pnt>\n"
            "    <msg>\n"
            "      <msgCd>CBS1000211</msgCd>\n"
            "      <callTyp>%s</callTyp>\n"
            "      <seqNb>%s%s</seqNb>\n"
            "      <sndMbrCd>6500</sndMbrCd>\n"
            "      <sndAppCd>CBS</sndAppCd>\n"
            "      <sndDt>%s</sndDt>\n"
            "      <sndTm>%s</sndTm>\n"
            "      <rcvMbrCd>0000</rcvMbrCd>\n"
            "      <rcvAppCd>ESB</rcvAppCd>\n"
            "      <refMsgCd>%s</refMsgCd>\n"
            "      <refCallTyp>%s</refCallTyp>\n"
            "      <refSndMbrCd>%s</refSndMbrCd>\n"
            "      <refSndAppCd>%s</refSndAppCd>\n"
            "      <refSndDt>%s</refSndDt>\n"
            "      <refSeqNb>%s</refSeqNb>\n"
            "    </msg>\n"
            "    <status>\n"
            "      <retCd>000000</retCd>\n"
            "      <desc>%s</desc>\n"
            "      <location>%s</location>\n"
            "      <mbrCd>6500</mbrCd>\n"
            "      <appCd>NNS</appCd>\n"
            "    </status>\n"
            "  </header>\n"
            "  <body>\n"
            "    <response>\n"
            "      <list>\n",
            thver, thcn2utf8, thpsndDt, thpsndTm, thmcallTyp, thmsndDt, seqno+3, thmsndDt, thmsndTm,
            thmmsgCd, thmcallTyp, thmsndMbrCd, thmsndAppCd, thmsndDt, thmseqNb, thsdesc, thslocation );
    
    /* Added by MSJ for wage's querying 20151110 - End */

    GetPoolDataByName("BUSIIB", "acct", 0, 0, acc, 0);
    rtrim(acc);
    sprintf(sql_str, "SELECT * FROM t_sc_agt_para_mgmt WHERE com_acc = '%s'",acc); 
    EXEC SQL PREPARE bat1_qry FROM :sql_str; 
    if (sqlca.sqlcode<0 )
    {
        WriteLog(ERR_LVL,"定义SQL语句失败[%d]", sqlca.sqlcode);
        err_code=99999;
        strcpy( err_msg, "系统错,请稍后再试" );
        PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&err_code, 0 );
        PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
        PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, "-1", 0 );
        fclose( fp );
        return -1;
    }
    
    EXEC SQL DECLARE bat1_cur SCROLL CURSOR FOR bat1_qry;
    if (sqlca.sqlcode<0 )
    {
        WriteLog(ERR_LVL,"声明SQL语句失败[%d]", sqlca.sqlcode);
        err_code=99999;
        strcpy( err_msg, "系统错,请稍后再试" );
        PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&err_code, 0 );
        PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
        PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, "-1", 0 );
        EXEC SQL FREE bat1_qry;
        fclose( fp );
        return -1;
    }
    
    EXEC SQL OPEN bat1_cur;
    if (sqlca.sqlcode<0 )
    {
        WriteLog(ERR_LVL,"打开SQL语句失败[%d]", sqlca.sqlcode);
        err_code=99999;
        strcpy( err_msg, "系统错,请稍后再试" );
        PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&err_code, 0 );
        PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
        PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, "-1", 0 );
        EXEC SQL FREE bat1_qry;
        EXEC SQL FREE bat1_cur;
        fclose( fp );
        return -1;
    }
    
    i=0;
    rec_num=0;
    while(1)
    {
        memset( &para_mgmt, 0x00, sizeof( para_mgmt ) );
        EXEC SQL FETCH bat1_cur INTO :para_mgmt;
        if (sqlca.sqlcode == 100)
        {
            WriteLog(ERR_LVL,"退出循环!i=[%d] rec_num=[%d]", i, rec_num);
            EXEC SQL CLOSE bat1_cur;
            EXEC SQL FREE bat1_cur;
            EXEC SQL FREE bat1_qry;
            break;
        }
        else if (sqlca.sqlcode != 0)
        {
            WriteLog(ERR_LVL,"获取游标失败![%d]", sqlca.sqlcode);
            strcpy( err_msg, "系统错,请稍后再试" );
            PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&err_code, 0 );
            PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
            PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, "-1", 0 );
            EXEC SQL CLOSE bat1_cur;
            EXEC SQL FREE bat1_cur;
            EXEC SQL FREE bat1_qry;
            fclose( fp );
            return -1;
        }
        EXEC SQL SELECT * INTO :item_mgmt
            FROM t_sc_agt_bat_item_mgmt
            WHERE batch_no = :para_mgmt.batch_no
            AND inst_no = :para_mgmt.inst_no;
        if(sqlca.sqlcode)
        {
            WriteLog(ERR_LVL, "数据库错[%d]", sqlca.sqlcode);
            WriteLog(ERR_LVL, "batch_no=[%s] inst_no=[%s]", para_mgmt.batch_no, para_mgmt.inst_no);
            strcpy( err_msg, "系统错,请稍后再试" );
            PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&err_code, 0 );
            PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
            PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, "-1", 0 );
            EXEC SQL CLOSE bat1_cur;
            EXEC SQL FREE bat1_cur;
            EXEC SQL FREE bat1_qry;
            fclose( fp );
            return -1;
        }
        rtrim( para_mgmt.batch_no );
        rtrim( item_mgmt.item_name );
        /* Modified by MSJ for ignoring unwanted records 20151029 - Start */
        /**
        PutPoolDataByName( "BUSIIB", "backup1", i, 0, para_mgmt.batch_no, 0);
        PutPoolDataByName( "BUSIIB", "backup2", i, 0, item_mgmt.item_name, 0);
        if( i++>100 )
        {
            EXEC SQL CLOSE bat1_cur;
            EXEC SQL FREE bat1_cur;
            EXEC SQL FREE bat1_qry;
            break;
        }
        **/
        i++;
        rtrim( item_mgmt.deputize_id );
        if( item_mgmt.deputize_id[0]=='2' )
        {
            fprintf( fp, "        <v>\n" );
            fprintf( fp, "          <proNo>%s</proNo>\n", para_mgmt.batch_no );
            fprintf( fp, "          <proNm>%s</proNm>\n", item_mgmt.item_name );
            fprintf( fp, "        </v>\n" );
            rec_num++;
            WriteLog( APP_LVL,"batch_no[%s] item_name[%s] i[%d] rec_num[%d]", 
                             para_mgmt.batch_no, item_mgmt.item_name, i, rec_num );
        
            if( rec_num>100 )
            {
                WriteLog( ERR_LVL,"WARNING：rec_num=[%d]退出循环! i[%d]", rec_num, i );
                EXEC SQL CLOSE bat1_cur;
                EXEC SQL FREE bat1_cur;
                EXEC SQL FREE bat1_qry;
                break;
            }
        }
    }
    
    /**
    memset(cv, 0, sizeof( cv ) );
    sprintf(cv,"%d",i);
    PutPoolDataByName( "BUSIIB", "v", 0, 0, cv, 0);
    **/
    WriteLog( ERR_LVL,"已退出  i=[%d] rec_num=[%d]", i, rec_num );
   
    if( 0==rec_num )
    {
        WriteLog( ERR_LVL, "该账号无代发协议" );
        err_code = 99999;
        strcpy( err_msg, "该账号无代发协议!" );
        PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&err_code, 0 );
        PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
        PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, "-1", 0 );
        fclose( fp );
        return (-1);
    }
    
    fprintf( fp, "      </list>\n"
                 "    </response>\n"
                 "  </body>\n"
                 "</transaction>\n" );
    fclose( fp );
    
    /***文件转换**
    memset( xmloutput, 0x00, sizeof( xmloutput ) );
    sprintf( xmloutput, "%s/print/NETBANK/TOPB/CBS1000211_%s_%s.xml", getenv( "HOME" ), trandate, seqno );
    WriteLog( APP_LVL, "xmloutput[%s]\n", xmloutput );
    
    memset( cmd, 0x00, sizeof( cmd ) );
    sprintf( cmd, "iconv -f GB2312 -t UTF-8 %s > %s", filename, xmloutput );
    WriteLog( APP_LVL, "cmd[%s]\n", cmd );
    ret = system( cmd );
    if( ret )
    {
        WriteLog( ERR_LVL, "UTF文件转换出错!" );
        err_code = 99999;
        sprintf( err_msg, "UTF文件转换出错!" );
        PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&err_code, 0 );
        PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
        return ( -1 );
    }*/
    
    memset( ftpfilename, 0x00, sizeof( ftpfilename ) );
    sprintf( ftpfilename, "CBS1000211_%s_%s.xml", trandate, seqno );
    WriteLog( APP_LVL, "ftpfilename[%s]\n", ftpfilename );
    
    /***发送文件***/
    ret = FtpFileName( "7000000001", 1, ftpfilename, ftpfilename, ftpfilename );
    if( ret )
    {
        WriteLog( ERR_LVL, "Ftp文件[%s]失败!\n", ftpfilename );
        err_code = 99999;
        strcpy( err_msg, "Ftp文件失败!" );
        PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&err_code, 0 );
        PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
        return (-1);
    }

    WriteLog( ERR_LVL, "======Success========" );
    
    PutPoolDataByName( "BUSIIB", "transfilename", 0, 0, ftpfilename, 0 );
    /* Modified by MSJ for ignoring unwanted records 20151029 - End */
    
    PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, "0", 0 );
    return 0;
}
#endif

long OpenQry()
{
    EXEC SQL BEGIN DECLARE SECTION;
        char prno[9];
	char certtyp[2];
	char outtye[3];
	long cnt=0;
    EXEC SQL END DECLARE SECTION;

    char acc[32+1],inphone[30],incertNb[30];
    char err_msg[256+1];
    long errcode=0,ret=0,host_stat=0,app_err_no=0,hoststat=0;
    char certNb[33],name[129],phone[33],RetCode[10],buffer[129];
    char openBrchID[30],cstno[15];
    char acc_stat[3+1];

    memset( prno, 0, sizeof(prno));
    memset( acc, 0, sizeof(acc));
    memset( inphone, 0, sizeof(inphone));
    memset( incertNb, 0, sizeof(incertNb));
    memset( err_msg, 0, sizeof(err_msg));
    memset( certtyp, 0, sizeof(certtyp));
    memset( certNb , 0, sizeof(certNb));
    memset( name, 0, sizeof(name));
    memset( phone, 0, sizeof(phone));
    memset( buffer, 0, sizeof(buffer));
    memset( openBrchID, 0, sizeof(openBrchID));
    memset( cstno, 0, sizeof(cstno));
    memset( outtye, 0, sizeof(outtye));
    memset( acc_stat, 0, sizeof(acc_stat));

    GetPoolDataByName( "BUSIIB", "acct", 0, 0, acc, 0 );
    rtrim( acc );

    ret = AccQryPub5711( acc );
    if( ret )
    {
        WriteLog( ERR_LVL, "调用5711查询账号[%s]信息失败", acc );
        GetPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode, 0 );
        if( errcode = -101 )
        PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, "账号有误", 0 );
        errcode = 99999;
        PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode, 0 );
        return ( -1 );
    }
    GetPoolDataByName ( "CBS", "distflag", 0, 0, certtyp, 0);
    GetPoolDataByName ( "CBS", "AcctStat", 0, 0, incertNb, 0);
    GetPoolDataByName ( "CBS", "CustNo", 0, 0, cstno, 0);
    GetPoolDataByName ( "CBS", "CertStat", 0, 0, prno, 0);
    GetPoolDataByName("BUSIIB", "certNb", 0, 0,certNb , 0);
    GetPoolDataByName("BUSIIB", "payNb", 0, 0,phone , 0);
    if( cstno[4] != '0')
    {
        WriteLog( ERR_LVL, "单位客户账号暂时无法开通此业务[%s]", cstno );
        PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, "单位客户账号暂时无法开通此业务", 0 );
        errcode = 99999;
        PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode, 0 );
        return ( -1 );
    }

    PutPoolDataByName( "BUSIIB", "acctTyp", 0, 0, "000", 0 );
    GetPoolDataByName ( "CBS", "OrgTranCode", 0, 0, acc_stat, 0);
    if ( acc_stat[0]!= '0')    /*销户状态*/
    {
        WriteLog(ERR_LVL, "销户");
        errcode = 99999;
        PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode, 0 );
        PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, "账户已销户", 0 );
        return(-1);
    }
    if ( acc_stat[1] == '1' || acc_stat[1] == '2'  )  
    {
        WriteLog(ERR_LVL, "账户已止付");
        errcode = 99999;
        PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode, 0 );
        PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, "账户已止付，暂不能开通此业务", 0 );
        return(-1);
    }
    if ( acc_stat[2] != '0'  )   
    {
        WriteLog(ERR_LVL, "账户挂失");
        errcode = 99999;
        PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode, 0 );
        PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, "账户已挂失,暂不能开通此业务", 0 );
        return(-1);
    }
    ret = IsCardNo( acc );
    if( ret ==0 )
    {
        PutPoolDataByName( "CBS", "CtrlFlag", 0, 0, "0001112", 0 );
        PutPoolDataByName( "CBS", "CardFlag", 0, 0, "1", 0 );
        ret = CommClient( "CoQryCSvr" );
        if( ret != 0 )
        {
            WriteLog( ERR_LVL, "ERR: 通用客户查询及账号查询检查服务失败!" );
            errcode = 99999;
            PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode, 0 );
            return -1;
        }
        ret = WyChkCard( acc );
	if( ret != 0 )
        {
            WriteLog(ERR_LVL, "卡检查错[%s]", acc);
            errcode = 99999;
            PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode, 0 );
            PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, "-1", 0 );
            return -1;
        }

        PutPoolDataByName( "BUSIIB", "backup3", 0, 0, "0", 0 );/**卡折标志**/

    }
    else
    {
        PutPoolDataByName( "BUSIIB", "backup3", 0, 0, "1", 0 );/**卡折标志**/
        if(acc[6] == '5' )
        {
            WriteLog( ERR_LVL, "该业务不支持内部帐户" );
            errcode = 99999;
            strcpy(err_msg,"该业务不支持内部帐户");
            PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode, 0 );
            PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
            return -1;
        }
        rtrim( prno );
        cnt = 0;
        EXEC SQL SELECT count(*)
            INTO :cnt
            FROM t_pb_prdno_acctype
            WHERE prd_no = :prno
            AND currtype = '01';
        if( sqlca.sqlcode != 0 )
        {
            WriteLog( ERR_LVL, "sqlcode[%d],prd_no[%s]", sqlca.sqlcode, prno );
            errcode = 99999;
            strcpy(err_msg,"系统异常,请稍后再试");
            PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode, 0 );
            PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
            return -1;
        }
        if( cnt >  0 )
        {
            errcode = 99999;
            strcpy(err_msg,"该账户类型暂不支持开通此业务");
            PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode, 0 );
            PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
            return -1;
        }
    }
    PutPoolDataByName( "CBS", "CtrlFlag", 0, 0, "0001112", 0 );
    PutPoolDataByName( "CBS", "CardFlag", 0, 0, "1", 0 );
    ret = CommClient( "CoQryCSvr" );
    if( ret != 0 )
    {
        WriteLog( ERR_LVL, "ERR: 通用客户查询及账号查询检查服务失败!" );
        errcode = 99999;
        PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode, 0 );
        return -1;
    }
    GetPoolDataByName( "CBS", "OpenInstNo", 0, 0, openBrchID, 0 );
    rtrim(openBrchID);
    GetPoolDataByName("CBS", "CustName", 0, 0,name , 0);
    rtrim(name);
    PutPoolDataByName("BUSIIB", "custNm", 0, 0,name , 0);

    PutPoolDataByName( "BUSIIB", "backup1", 0, 0, openBrchID, 0 );/**客户所属机构**/
    PutPoolDataByName( "BUSIIB", "backup2", 0, 0, openBrchID, 0 );/*开户网点*/
    PutPoolDataByName( "BUSIIB", "openBrchID", 0, 0, openBrchID, 0 );/*开户机构*/
    PutPoolDataByName( "BUSIIB", "backup4", 0, 0, "6500", 0 );/*成员机构编号*/
    PutPoolDataByName( "BUSIIB", "backup5", 0, 0, "6500", 0 );/*开户柜员*/
    rtrim( certtyp );

    /*modify by heyz for SC6000Z on 20140724 start*/
    if ('0' == cstno[4])
    {
        if (strcmp(certtyp, "0") == 0)        /*身份证*/
        {
            strcpy(outtye, "01");
        }
        else if (strcmp(certtyp, "1") == 0)   /*户口簿*/
        {
            strcpy(outtye, "02");
        }
        else if (strcmp(certtyp, "2") == 0)  /*护照*/
        {
            strcpy(outtye, "03");
        }
        else if (strcmp(certtyp, "3") == 0)  /*军官证*/
        {
            strcpy(outtye, "04");
        }
        else if (strcmp(certtyp, "4") == 0)  /*士兵证*/
        {
            strcpy(outtye, "05");
        }
        else if (strcmp(certtyp, "5") == 0)  /*港澳居民来往内地通行证*/
        {
            strcpy(outtye, "07");
        }
        else if (strcmp(certtyp, "6") == 0)  /*台湾同胞来往内地通行证*/
        {
            strcpy(outtye, "08");
        }
        else if (strcmp(certtyp, "7") == 0)  /*临时身份证*/
        {
            strcpy(outtye, "09");
        }
        else if (strcmp(certtyp, "8") == 0)  /*外国人居留证*/
        {
            strcpy(outtye, "10");
        }
        else if (strcmp(certtyp, "9") == 0)  /*警官证*/
        {
            strcpy(outtye, "06");
        }
        else if (strcmp(certtyp, "A") == 0)  /*驾驶证*/
        {
            strcpy(outtye, "49");
        }       
        else if (strcmp(certtyp, "B") == 0)  /*社会保障号*/
        {
            strcpy(outtye, "49");
        }
        else if (strcmp(certtyp, "X") == 0)  /*其他证件*/
        {
            strcpy(outtye, "49");
        }
        else
        {
            strcpy(outtye, "49");
        }
    }
    else
    {
         if( strcmp( certtyp, "1" ) == 0 )    /*税务登记号*/
         {
               strcpy( outtye, "56" );
         }
         else if (strcmp(certtyp, "2") == 0)  /*营业执照号(事业单位法人登记证)*/
         {
               strcpy(outtye, "52");
         }
         else if (strcmp(certtyp, "3") == 0)  /*组织机构代码*/
         {
               strcpy(outtye, "51");
         }
         else if (strcmp(certtyp, "4") == 0)  /*贷款卡编码*/
         {
               strcpy(outtye, "99");
         }
         else if (strcmp(certtyp, "9") == 0)  /*其它*/
         {
               strcpy(outtye, "99");
         }
         else
         {
               strcpy(certtyp, "99");
         }
    }
    /*modify by heyz for SC6000Z on 20140724 stop*/		
    
    rtrim( outtye );
    PutPoolDataByName( "BUSIIB", "certTyp", 0, 0, outtye, 0 );
        WriteLog( ERR_LVL, "certtyp[%s],certNb[%s],name[%s],inphone[%s]",certtyp,certNb,name,inphone );

    rtrim(incertNb);
    rtrim(certNb);
    if( strcmp(incertNb,certNb) != 0 )
    {
        WriteLog( ERR_LVL, "证件号不匹配" );
        errcode = 99999;
        strcpy(err_msg,"客户信息不正确");
        PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode, 0 );
        PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
        return -1;
    }

    ret = OpenQry5003(certtyp,incertNb,name,inphone,cstno);
    if ( ret !=0 )
    {
        WriteLog( ERR_LVL, "查询手机号错" );
        errcode = 99999;
        PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode, 0 );
        return -1;
    }
        WriteLog( ERR_LVL, "phone[%s][%s]",phone,inphone );
    rtrim( phone );
    rtrim( inphone );
    if( strcmp( phone,inphone ) != 0)
    {
        WriteLog( ERR_LVL, "手机号不匹配" );
        errcode = 99999;
        strcpy(err_msg,"手机号与行内预留手机号不匹配");
        PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode, 0 );
        PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
        return -1;
    }
    return 0;
}
long OpenQry5003(char *paper_type,char *paper_no,char *cust_name,char *phone,char *cstno)
{
	long sendlen=0,coreoutlen=0,ret=0,hoststat=0;
	struct s_cstm_prsn_base cstm_prsn;              /*个人客户资料*/
	struct s_cstm_corp_base cstm_corp;              /*对公客户资料*/
	long prsn_num = 0;
	long corp_num = 0;
	FBFR32 * sendbuf;
	FBFR32 * recvbuf;
	char error_code[50],tmpstr[50];
	char err_msg[256+1];
	char fml_svr[40+1];
	int i=0;
	char cstm_no[19+1];
	
	/*zpqds1.0.定义变量池中CBS数据字典结构体.保存服务调用前数据*/
	struct tag_cbs st_cbs;
	struct tag_prsn_info st_prsn_info;
	struct tag_corp_info st_corp_info;
	struct tag_prsn_info_Q031 st_prsn_info_Q031;
	struct tag_corp_info_Q033 st_corp_info_Q033;

	/*zpqds1.1.定义Q033服务的返回结果.描述结构体 */
	ZPQDS_RecDesc descArray31[] =
	{
		{offsetof(struct tag_prsn_info_Q031,cstm_lname),'C',60},
		{offsetof(struct tag_prsn_info_Q031,cstm_no),'C',14},
		{offsetof(struct tag_prsn_info_Q031,sex),'C',1},
		{offsetof(struct tag_prsn_info_Q031,cstm_slvl),'C',1},
		{offsetof(struct tag_prsn_info_Q031,cn_py),'C',11},
		{offsetof(struct tag_prsn_info_Q031,id_due_dt),'C',8},
		{offsetof(struct tag_prsn_info_Q031,nat),'C',4},
		{offsetof(struct tag_prsn_info_Q031,edu),'C',1},
		{offsetof(struct tag_prsn_info_Q031,marg_stus),'C',1},
		{offsetof(struct tag_prsn_info_Q031,bir_dt),'C',8},
		{offsetof(struct tag_prsn_info_Q031,phone),'C',20},
		{offsetof(struct tag_prsn_info_Q031,office_phone),'C',20},
		{offsetof(struct tag_prsn_info_Q031,fax),'C',20},
		{offsetof(struct tag_prsn_info_Q031,addr),'C',60},
		{offsetof(struct tag_prsn_info_Q031,census_reg_addr),'C',100},
		{offsetof(struct tag_prsn_info_Q031,email),'C',30},
		{offsetof(struct tag_prsn_info_Q031,zip),'C',6},
		{offsetof(struct tag_prsn_info_Q031,mobile),'C',20},
		{offsetof(struct tag_prsn_info_Q031,ctc_sway),'C',1},
		{offsetof(struct tag_prsn_info_Q031,prof_mclas),'C',4},
		{offsetof(struct tag_prsn_info_Q031,work_corp_mname),'C',60},
		{offsetof(struct tag_prsn_info_Q031,work_corp_addr),'C',100},
		{offsetof(struct tag_prsn_info_Q031,indu_clas),'C',3},
		{offsetof(struct tag_prsn_info_Q031,corp_zip),'C',6},
		{offsetof(struct tag_prsn_info_Q031,duty),'C',20},
		{offsetof(struct tag_prsn_info_Q031,title),'C',10},
		{offsetof(struct tag_prsn_info_Q031,frt_cer_styp),'C',1},
		{offsetof(struct tag_prsn_info_Q031,frt_cer_no),'C',18},
		{offsetof(struct tag_prsn_info_Q031,sec_cer_styp),'C',1},
		{offsetof(struct tag_prsn_info_Q031,sec_cer_no),'C',18},
		{offsetof(struct tag_prsn_info_Q031,psn_hobby),'C',16},
		{offsetof(struct tag_prsn_info_Q031,cstm_mngr_tlr),'C',6},
		{offsetof(struct tag_prsn_info_Q031,open_dt),'C',8},
		{offsetof(struct tag_prsn_info_Q031,mrmk),'C',30},
		{offsetof(struct tag_prsn_info_Q031,spu_cn_mname),'C',60},
		{offsetof(struct tag_prsn_info_Q031,spu_id_styp),'C',1},
		{offsetof(struct tag_prsn_info_Q031,spu_id_no),'C',19},
		{offsetof(struct tag_prsn_info_Q031,spu_corp_mname),'C',100},
		{offsetof(struct tag_prsn_info_Q031,spu_ctc_phone),'C',15},
		{offsetof(struct tag_prsn_info_Q031,emp_flag),'C',1},
		{offsetof(struct tag_prsn_info_Q031,shdr_flag),'C',1},
		{offsetof(struct tag_prsn_info_Q031,stk_no),'C',20},
		{offsetof(struct tag_prsn_info_Q031,degree),'C',1},
		{offsetof(struct tag_prsn_info_Q031,ln_psn_no),'C',20},
		{offsetof(struct tag_prsn_info_Q031,resd_stus),'C',1},
		{offsetof(struct tag_prsn_info_Q031,lst_upd_tlr),'C',6},
		{offsetof(struct tag_prsn_info_Q031,lst_upd_dt),'C',8}
	};
    
    ZPQDS_RecDesc descArray33[] =
    {
		{offsetof(struct tag_corp_info_Q033, cstm_lname), 'C', 100},
		{offsetof(struct tag_corp_info_Q033, cstm_no), 'C', 14},
		{offsetof(struct tag_corp_info_Q033, cstm_slvl), 'C', 1},
		{offsetof(struct tag_corp_info_Q033, sname), 'C', 60},
		{offsetof(struct tag_corp_info_Q033, reg_dc_amt), 'C', 18},
		{offsetof(struct tag_corp_info_Q033, reg_fc_ccy), 'C', 2},
		{offsetof(struct tag_corp_info_Q033, reg_fc_amt), 'C', 18},
		{offsetof(struct tag_corp_info_Q033, sen_inst), 'C', 20},
		{offsetof(struct tag_corp_info_Q033, legl_rep_mname), 'C', 30},
		{offsetof(struct tag_corp_info_Q033, cfo_mname), 'C', 10},
		{offsetof(struct tag_corp_info_Q033, cstm_ltyp), 'C', 3},
		{offsetof(struct tag_corp_info_Q033, indu_mclas), 'C', 4},
		{offsetof(struct tag_corp_info_Q033, expt_ob_fx_flag), 'C', 1},
		{offsetof(struct tag_corp_info_Q033, ctc_mname), 'C', 10},
		{offsetof(struct tag_corp_info_Q033, ctc_title), 'C', 10},
		{offsetof(struct tag_corp_info_Q033, ctc_addr), 'C', 60},
		{offsetof(struct tag_corp_info_Q033, ctc_zip), 'C', 6},
		{offsetof(struct tag_corp_info_Q033, ctc_phone), 'C', 20},
		{offsetof(struct tag_corp_info_Q033, ctc_fax), 'C', 20},
		{offsetof(struct tag_corp_info_Q033, ctc_mobile), 'C', 11},
		{offsetof(struct tag_corp_info_Q033, ctc_pb), 'C', 15},
		{offsetof(struct tag_corp_info_Q033, ctc_email), 'C', 30},
		{offsetof(struct tag_corp_info_Q033, ctc_sway), 'C', 1},
		{offsetof(struct tag_corp_info_Q033, cstm_mngr_tlr), 'C', 6},
		{offsetof(struct tag_corp_info_Q033, lcns), 'C', 20},
		{offsetof(struct tag_corp_info_Q033, lorg_code), 'C', 20},
		{offsetof(struct tag_corp_info_Q033, nat_tax_reg_no), 'C', 20},
		{offsetof(struct tag_corp_info_Q033, land_tax_reg_no), 'C', 20},
		{offsetof(struct tag_corp_info_Q033, ln_corp_no), 'C', 30},
		{offsetof(struct tag_corp_info_Q033, pyac_open_srmk), 'C', 30},
		{offsetof(struct tag_corp_info_Q033, pyac_cacc), 'C', 30},
		{offsetof(struct tag_corp_info_Q033, open_lcns_id_no), 'C', 30},
		{offsetof(struct tag_corp_info_Q033, reg_ltyp), 'C', 1},
		{offsetof(struct tag_corp_info_Q033, reg_no), 'C', 20},
		{offsetof(struct tag_corp_info_Q033, reg_dt), 'C', 9},
		{offsetof(struct tag_corp_info_Q033, lcns_due_dt), 'C', 9},
		{offsetof(struct tag_corp_info_Q033, reg_addr), 'C', 100},
		{offsetof(struct tag_corp_info_Q033, emp_mcnt), 'C', 9},
		{offsetof(struct tag_corp_info_Q033, legl_rep_cstm_no), 'C', 14},
		{offsetof(struct tag_corp_info_Q033, shdr_flag), 'C', 1},
		{offsetof(struct tag_corp_info_Q033, open_dt), 'C', 9},
		{offsetof(struct tag_corp_info_Q033, mrmk), 'C', 60},
		{offsetof(struct tag_corp_info_Q033, lst_upd_tlr), 'C', 9},
		{offsetof(struct tag_corp_info_Q033, lst_upd_dt), 'C', 9}
    };
		
	/*zpqds1.2. ZPQDS通讯区 */    
	ZPQDS_CommArea zpqdsca;
	
	memset( &zpqdsca, 0, sizeof( zpqdsca ) );
	memset( &st_corp_info_Q033, 0, sizeof( st_corp_info_Q033 ) );   
	memset( &st_prsn_info_Q031, 0x00, sizeof (struct tag_prsn_info_Q031));
	memset(error_code,0,sizeof(error_code));
	memset(tmpstr,0,sizeof(tmpstr));
	memset(err_msg,0,sizeof(err_msg));
	memset( &cstm_prsn, 0, sizeof( struct s_cstm_prsn_base));
	memset( &cstm_corp, 0, sizeof( struct s_cstm_corp_base));
	memset(cstm_no, 0x00, sizeof(cstm_no));
	
	sendbuf = (FBFR32 *)tpalloc("FML32", NULL, PBFDATA_LEN);
        if( sendbuf == NULL)
        {
                WriteLog( ERR_LVL, "分配核心使用输入缓冲池错");
                strcpy(err_msg,"系统错误，请稍后再试");
                PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
                tpfree( (char *)sendbuf );
                tpfree( (char *)recvbuf );
                return -1;
        }
	recvbuf = (FBFR32 *)tpalloc("FML32", NULL, PBFDATA_LEN);
        if( sendbuf == NULL)
        {
                WriteLog( ERR_LVL, "分配核心使用输入缓冲池错");
                strcpy(err_msg,"系统错误，请稍后再试");
                PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
                tpfree( (char *)sendbuf );
                tpfree( (char *)recvbuf );
                return -1;
        }
        
/**************** alter by heyz 20140723 5003接口改为Q031-Q033**************************************/   

    trim(paper_type);
    trim(paper_no);
    if (strcmp(paper_type, "") == 0 || strcmp(paper_no, "") == 0)
    {
        WriteLog(ERR_LVL, "按证件号查询时，需指定证件号和证件类型");
        strcpy(err_msg, "按证件号查询时，需指定证件号和证件类型");
        PutPoolDataByName("TBANK", "hostErrorMessage", 0, 0, err_msg, 0); 
        return -1;
    }
     
	if(cstno[4] == '0')	/*个人客户*/
	{
	    strcpy(tmpstr, "01");
	    memcpy(tmpstr+2, cust_name, strlen(cust_name));
	    strcpy(cust_name, tmpstr);
			WriteLog(ERR_LVL, "XXXXXXX[%s]", cust_name);
			
	    /*zpqds2.调用zpqds服务前，备份变量池中CBS数据字典的数据 */
	    memset(&st_cbs, 0, sizeof ( struct tag_cbs));
	    cbs_backup(&st_cbs);
	    /*zpqds3.调用zpqds服务前，准备请求报文数据域的值 */
	    PutPoolDataByName("ABSHEAD", "_tx_code", 0, 0, "Q031", 0);
	    PutPoolDataByName("CBS","PaperId", 0, 0, paper_type, 0 );
	    PutPoolDataByName("CBS","Remark", 0, 0, paper_no, 0 );
			  /*zpqds4.调用zpqds服务*/
		    ret = ZPQDS_Open( "9996", "Q031", &zpqdsca);
        /*zpqds5.调用完zpqds服务后,还原变量池中CBS数据字典原始值 */
		    cbs_recover(&st_cbs);        
        if (ret != 0)
        {
            ZPQDS_Close( &zpqdsca );
            if(ret == 100)
            {
                WriteLog (ERR_LVL, "查询无记录");
                PutPoolDataByName("TBANK", "hostReturnCode", 0, 0, "99999", 0);
                PutPoolDataByName("TBANK", "hostErrorMessage", 0, 0, "查询无记录", 0);
		    		    tpfree( (char *)sendbuf );
		    		    tpfree( (char *)recvbuf );
		    		    return (-1);
            }
            else
            {
                WriteLog ( ERR_LVL, "PQDS查询出错[%d]", ret);
                PutPoolDataByName("TBANK", "hostReturnCode", 0, 0, "99999", 0);
                PutPoolDataByName("TBANK", "hostErrorMessage", 0, 0, "PQDS查询出错", 0);
                WriteLog ( ERR_LVL, "PQDS查询出错[%s]", err_msg);
                WriteLog ( ERR_LVL, "PQDS查询出错[%d]", ret);
		    		    tpfree( (char *)sendbuf );
		    		    tpfree( (char *)recvbuf );
		    		    return (-1);
            }
        } 
         /* Modified by MSJ  - 20140812 */        
         memset(&st_prsn_info_Q031,0x00,sizeof(struct tag_prsn_info_Q031));
         /*zpqds11.Fetch查询结果*/
        for(i=0;zpqdsca.pqdscode != 100;i++)
        {
         /**memset(&st_prsn_info_Q031,0x00,sizeof(struct tag_prsn_info_Q031)); **/
         ret = ZPQDS_Fetch( "Q031", &zpqdsca, &st_prsn_info_Q031, &descArray31[0], NELEMS( descArray31 ) );
         if(zpqdsca.pqdscode == 100)
		    	{
		    		WriteLog ( APP_LVL, "已经到最后一行跳出循环\n");
		    		break;
		    	}
         if(ret)
         {
          ZPQDS_Close( &zpqdsca );
          WriteLog ( ERR_LVL, "拷贝查询结构错[%d]",ret);
          return(-1);
         }   
        } 
        WriteLog ( APP_LVL, "查询成功");
		    /*zpqds6.输出zpqds服务返回结果*/
		    WriteLog ( APP_LVL, " st_prsn_info_Q031.mobile= [%s]", st_prsn_info_Q031.mobile);
        rtrim(st_prsn_info_Q031.mobile);
        strcpy(phone,st_prsn_info_Q031.mobile);
        strcpy( cstm_no,st_prsn_info_Q031.cstm_no );
        
		    /*zpqds7.Close通讯区 */
		    ZPQDS_Close(&zpqdsca);
        
		    /*zpqds.modiy For SC6000z end */
    }
	else 
	{
	    strcpy(tmpstr, "02");
	    memcpy(tmpstr+2, cust_name, strlen(cust_name));
	    strcpy(cust_name, tmpstr);
			WriteLog(ERR_LVL, "XXXXXXX[%s]", cust_name);
			
        /*zpqds2.调用zpqds服务前，备份变量池中CBS数据字典的数据 */
        memset(&st_cbs, 0, sizeof ( struct tag_cbs));
        cbs_backup(&st_cbs);
		    /*zpqds3.调用zpqds服务前，准备请求报文数据域的值 */
		    PutPoolDataByName("ABSHEAD", "_tx_code", 0, 0, "Q033", 0);
		    PutPoolDataByName("CBS","PaperId", 0, 0, paper_type, 0 );
		    PutPoolDataByName("CBS","Remark", 0, 0, paper_no, 0 );
		    /*zpqds4.调用zpqds服务*/
		    ret = ZPQDS_Open( "9996", "Q033", &zpqdsca);
        /*zpqds5.调用完zpqds服务后,还原变量池中CBS数据字典原始值 */
		    cbs_recover(&st_cbs);
        
        if (ret != 0)
        {
            ZPQDS_Close( &zpqdsca );
            if(ret == 100)
            {
                WriteLog (ERR_LVL, "查询无记录");
                PutPoolDataByName("TBANK", "hostReturnCode", 0, 0, "99999", 0);
                PutPoolDataByName("TBANK", "hostErrorMessage", 0, 0, "查询无记录", 0);
		    		    tpfree( (char *)sendbuf );
		    		    tpfree( (char *)recvbuf );
		    		    return (-1);
            }
            else
            {
                WriteLog ( ERR_LVL, "PQDS查询出错[%d]", ret);
                PutPoolDataByName("TBANK", "hostReturnCode", 0, 0, "99999", 0);
                PutPoolDataByName("TBANK", "hostErrorMessage", 0, 0, "PQDS查询出错", 0);
                WriteLog ( ERR_LVL, "PQDS查询出错[%s]", err_msg);
                WriteLog ( ERR_LVL, "PQDS查询出错[%d]", ret);
		    		    tpfree( (char *)sendbuf );
		    		    tpfree( (char *)recvbuf );
		    		    return (-1);
            }
        }         
         /*zpqds11.Fetch查询结果*/
        for(i=0;zpqdsca.pqdscode != 100;i++)
        {
         memset(&st_corp_info_Q033,0x00,sizeof(struct tag_corp_info_Q033));
         ret = ZPQDS_Fetch( "Q033", &zpqdsca, &st_corp_info_Q033, &descArray33[0], NELEMS( descArray33 ) );
         if(zpqdsca.pqdscode == 100)
		    	{
		    		WriteLog ( APP_LVL, "已经到最后一行跳出循环\n");
		    		break;
		    	}
         if(ret)
         {
          ZPQDS_Close( &zpqdsca );
          WriteLog ( ERR_LVL, "拷贝查询结构错[%d]",ret);
          return(-1);
         }   
        } 
        WriteLog ( APP_LVL, "查询成功");
		    /*zpqds6.输出zpqds服务返回结果*/
		    WriteLog ( APP_LVL, " st_corp_info_Q033.ctc_mobile= [%s]", st_corp_info_Q033.ctc_mobile);
		    rtrim(st_corp_info_Q033.ctc_mobile);
		    strcpy(phone,st_corp_info_Q033.ctc_mobile);
        strcpy( cstm_no,st_corp_info_Q033.cstm_no );
        
		    /*zpqds7.Close通讯区 */
		    ZPQDS_Close(&zpqdsca);
        
		    /*zpqds.modiy For SC6000z end */
    }
    
/************************delete by hyz on 20140723*****************************    
	Fchg32( sendbuf, getcorefmlid("organ_no", HEAD, REQ, "0000"), 0, "9996", 0);
	Fchg32( sendbuf, getcorefmlid("_tlr_no", HEAD, REQ, "0000"), 0, "888889", 0);
	Fchg32( sendbuf, getcorefmlid("_tx_op_stat", HEAD, REQ, "0000"), 0, "N", 0);
	Fchg32( sendbuf, getcorefmlid("chnl_no", HEAD, REQ, "0000"), 0, "W", 0);
	Fchg32( sendbuf, getcorefmlid("_tx_code", HEAD, REQ, "0000"), 0, "5003", 0);
	Fchg32( sendbuf, getcorefmlid("_seq_no", HEAD, REQ, "0000"), 0, "", 0);

	Fchg32( sendbuf, getcorefmlid("busi_type", HEAD, REQ, "0000"), 0, "700", 0);
	Fchg32( sendbuf, getcorefmlid("chn_no", HEAD, REQ, "0000"), 0, "700", 0);

	Fchg32( sendbuf, getcorefmlid("paper_type", BODY, REQ, "5003"), 0, paper_type, 0);
	Fchg32( sendbuf, getcorefmlid("paper_no", BODY, REQ, "5003"), 0, paper_no, 0);
	if( cstno[4] == '0' )
	{
		strcpy(tmpstr, "01");
	}
	else
	{
		strcpy(tmpstr, "02");
	}
	memcpy(tmpstr+2, cust_name, strlen(cust_name));
	Fchg32( sendbuf, getcorefmlid("cstm_name", BODY, REQ, "5003"), 0, tmpstr, 0);

	WriteLog( ERR_LVL, "发送到核心的报文");
	sendlen = Fused32( sendbuf );
	ret = tpcorecall( "PB_SELSVC", (char*)sendbuf,sendlen,(char**)&recvbuf, &coreoutlen, 0 );
	if( ret )
	{
		WriteLog( ERR_LVL, "tpcorecall核心错");
		strcpy(err_msg,"系统错误，请稍后再试");
		PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
		tpfree( (char *)sendbuf );
                tpfree( (char *)recvbuf );
		return -1;
	}
	WriteLog( ERR_LVL, "接收核心的报文");
	if( Fget32( sendbuf, getcorefmlid("_host_stat", HEAD, ANS, "0000"), 0, (char *)&hoststat, 0) < 0 ) {
	        WriteLog( ERR_LVL, "读取上传包的_host_stat字段出错, code=[%d]!", Ferror32 );
	}
	if( Fget32( sendbuf, getcorefmlid("_error_code", HEAD, ANS, "0000"), 0, error_code, 0) < 0 ) {
       		 WriteLog( ERR_LVL, "读取上传包的_error_code字段出错, code=[%d]!", Ferror32 );
	}
	if( hoststat == 0 )
	{
		WriteLog( APP_LVL, "tpcorecall 5003 success!" );
	}
	else if ( hoststat == 1000 )
	{
		WriteLog (ERR_LVL, "核心通讯超时");
		strcpy(err_msg,"通讯超时");
		PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
		tpfree( (char *)sendbuf );
		tpfree( (char *)recvbuf );
		return -1;
	}
	else
	{
		WriteLog (ERR_LVL, "核心错[%s]",error_code);
		PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, error_code, 0 );
		tpfree( (char *)sendbuf );
		tpfree( (char *)recvbuf );
		return -1;
	}

	Fget32( recvbuf, getcorefmlid("cstm_prsn_num",BODY, ANS, "5003"), 0, (char *)&prsn_num, 0);
	Fget32( recvbuf, getcorefmlid("cstm_corp_num", BODY, ANS, "5003"), 0, (char *)&corp_num, 0);
		
	if( prsn_num > 0)
	{
		Fget32( recvbuf, getcorefmlid("cstm_prsn", BODY, ANS, "5003"), 0, (char *)&cstm_prsn, 0);
		rtrim(cstm_prsn.mphone);
		strcpy(phone,cstm_prsn.mphone);
	}
	else if( corp_num > 0)
	{
		Fget32( recvbuf, getcorefmlid("cstm_corp", BODY,ANS,"5003"), 0, (char *)&cstm_corp, 0);
		rtrim(cstm_corp.contact_mphone);
		strcpy(phone,cstm_corp.contact_mphone);
	}
	else
	{
		WriteLog (ERR_LVL, "未找到客户信息");
		strcpy(err_msg,"未找到客户信息");
		PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
		tpfree( (char *)sendbuf );
    tpfree( (char *)recvbuf );
		return -1;
	}
**********************************************************************************************/
	rtrim(phone);
	if(strlen(phone) == 0)
	{
		WriteLog (ERR_LVL, "未在行内预留手机号，请到柜面预留手机号");
		strcpy(err_msg,"未在行内预留手机号，请到柜面预留手机号");
		PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
		tpfree( (char *)sendbuf );
        	tpfree( (char *)recvbuf );
		return -1;
	}
	WriteLog (ERR_LVL, "wwwwwwwwwww[%s]",phone);
	tpfree( (char *)sendbuf );
        tpfree( (char *)recvbuf );

	return 0;
}
	/***********
	**卡检查**
	*****************/
int WyChkCard( char *card_no )
{
	long    host_stat = -1;
	char    instno[4+1];
	char    err_msg[60+1];
	char    old_trancode[10+1];
	char    old_tlrno[12+1];
	char    old_organno[12+1];
	char    old_chnlno[1+1];
	char    acc_stat[3+1];
	char    CardChkFlag[40+1];
	char    ret_code[8+1];
	char    acc[25+1];
	long    ret = -1;
	long    hoststat = 1;

	memset(instno, 0, sizeof(instno));
	memset(err_msg, 0, sizeof(err_msg));
	memset(old_trancode, 0, sizeof(old_trancode));
	memset(old_tlrno, 0, sizeof(old_tlrno));
	memset(old_organno, 0, sizeof(old_organno));
	memset(old_chnlno, 0, sizeof(old_chnlno));
	memset(acc_stat, 0, sizeof(acc_stat));
	memset( CardChkFlag, 0x00, sizeof( CardChkFlag ) );
	memset(ret_code, 0, sizeof(ret_code));
	memset(acc,      0, sizeof(acc));

	Data_SetPoolNullValue("CBS|21|0");
	Data_SetPoolNullValue("CBS|69|0");

	strcpy( acc, card_no );
	WriteLog(ERR_LVL, "卡号/账号cardno=[%s]", card_no);

	/****保存调用5712之前的环境*******/
	GetPoolDataByName("ABSHEAD", "_tx_code", 0, 0, old_trancode , 0);
	GetPoolDataByName("ABSHEAD", "_tlr_no", 0, 0, old_tlrno , 0);
	GetPoolDataByName("ABSHEAD", "organ_no", 0, 0, old_organno , 0);
	GetPoolDataByName("ABSHEAD", "chnl_no", 0, 0, old_chnlno , 0);

	PutPoolDataByName("ABSHEAD", "_tx_code", 0, 0, "5712" , 0);
	PutPoolDataByName("ABSHEAD", "_tlr_no", 0, 0, "888888" , 0);
	PutPoolDataByName("ABSHEAD", "organ_no", 0, 0, "9996" , 0);
	PutPoolDataByName( "ABSHEAD", "chnl_no", 0, 0, "4", 0);
	WriteLog(ERR_LVL, "卡号/账号acc=[%s]", acc);
	rtrim( acc  );
	PutPoolDataByName("CBS", "TxFlag", 0, 0, acc, 0);
	PutPoolDataByName( "ABSHEAD", "_tx_op_stat", 0, 0, "N" , 0 );

	strcpy( CardChkFlag, "0100001110010000000000000100000000000000" );

	PutPoolDataByName ( "CBS", "OutAccName", 0, 0, CardChkFlag, 0);
	WriteLog(APP_LVL, "=============FML打包===============");
	ret=Data_PackFml("110|5712|0");
	if( ret )
	{
		PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, "通讯错误", 0 );
		return -1;
	}

	WriteLog(APP_LVL, "=============与核心通讯===============");
	ret = Comm_AcCallFmlAndUnpack("110|PBSVC|5712|1");
	if( ret )
	{
		PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, "5712与核心通讯错误", 0 );
		return -1;
	}

	/**取核心错误返回码**/
	GetPoolDataByName("CBS", "PrdNo", 0, 0, ret_code, 0);/*返回码*/

	if( strlen( ret_code ) == 0 )
	{
		WriteLog( ERR_LVL, "返回码为空" );
		PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, "返回码为空", 0 );
		return -1;
	}

	switch( atoi( ret_code ) )
	{
		case 000:
			WriteLog( ERR_LVL, "卡检查成功" );
			break;
		case -501:
			WriteLog( ERR_LVL, "其他错误" );
			PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, "其他错误", 0 );
			return -1;
			break;
		case -502:
			WriteLog( ERR_LVL, "不是卡号" );
			PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, "不是卡号", 0 );
			return -1;
			break;
		case -507:
			WriteLog( ERR_LVL, "卡已销户" );
			PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, "卡已销户", 0 );
			return -1;
			break;
		case -508:
			WriteLog( ERR_LVL, "卡未启动" );
			PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, "卡未启动", 0 );
			return -1;
			break;
		case -509:
			WriteLog( ERR_LVL, "卡已挂失" );
			PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, "账户已挂失,暂不能开通此业务", 0 );
			return -1;
			break;
		case -527:
			WriteLog( ERR_LVL, "卡不存在" );
			PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, "卡不存在", 0 );
			return -1;
			break;
		case -528:
			WriteLog( ERR_LVL, "卡已止付" );
			PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, "账户已止付，暂不能开通此业务", 0 );
			return -1;
			break;
		default:
			WriteLog( ERR_LVL, "返回码错误" );
			return -1;
			break;
	}
	/****还原********************/
	PutPoolDataByName("ABSHEAD", "_tx_code", 0, 0, old_trancode , 0);
	PutPoolDataByName("ABSHEAD", "_tlr_no", 0, 0, old_tlrno , 0);
	PutPoolDataByName("ABSHEAD", "organ_no", 0, 0, old_organno , 0);
	PutPoolDataByName("ABSHEAD", "chnl_no", 0, 0, old_chnlno , 0);
	return(0);
}
