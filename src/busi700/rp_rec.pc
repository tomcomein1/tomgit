/*PB3.0系统自动生成demo源码文件*/

#include <stdio.h>
#include <stdlib.h>
#include <sys/types.h>
#include <errno.h>
#include <string.h>
#include <unistd.h>

#include <time.h>
#include "pbconstval.h" 
#include "pbstructdef.h" 
#ifdef ORACLE_DATABASE
EXEC SQL include "pbranchdb.h";
#else
#include "pbranchdb.h"
#endif
#include "pberrlog.h"
#include "pbglbvardef.h"
#include "pbbasefunc.h"
#include "pbvarmacro.h"

#include "pbdb.h"
#include "fml32.h"
#include "atmi.h"

EXEC SQL include "pb_s_agt_batch.h";
EXEC SQL include "pbsrv.h";

EXEC SQL BEGIN DECLARE SECTION;
struct s_sc_agt_bat_item_mgmt AgtMgmt;
struct s_sc_agt_para_mgmt ParaMgmt;
struct s_sc_agt_dtl_mid
{
    char col_acc[32+1];
    char col_crop_name[50+1];
    double rb_amt;
    char remake2[40+1];
    char flag[6+1];
    char msg[40+1];
};
EXEC SQL END DECLARE SECTION;
#define MIN(val1, val2)     ((val1) < (val2) ? (val1) : (val2))

int reg_to_server_rec(char *BatchNo, char *agt_num_tmp, char *totalNum, char *totalAmt_tmp);
int gen_reg_file_rec( char * recfile, char *batchNo, char *agt_num_tmp, char *totalNum, char *totalAmt_tmp);
const char* GetFieldByPos_new( char *field, int maxlen, int pos, const char *buf, const char *dlm );

int rpRec()
{
	EXEC SQL BEGIN DECLARE SECTION;
 	    struct s_pb_net_dtl net_dtl;
	    char backup2[128+1];
	    char acct[32+1];
            char AccDate[10+1];
            char Hostseqno[20+1];
            char btchNb[32+1];
            char InstNo[4+1];
            char BatchNo[10+1];
            char agt_num_tmp[10+1];
            long TotalNum = 0;
            char totalNum[20+1];
            double TotalAmt = 0.00;
            char totalAmt_tmp[20+1];
	EXEC SQL END DECLARE SECTION;
	char inst_no[4+1];
	char cmd[400+1];
	char btchNm[128+1];
	char operTyp[2+1];
	char currencyTyp[6+1];
	char cashFlg[2+1];
        char remarkCd[16+1];
	char remark[128+1];
	char backup1[128+1];
	char backup3[128+1];
	char seqNb[32+1];
	char payAcct[32+1];
	char payCustNm[128+1];
	char rcvAcct[32+1];
	char rcvCustNm[128+1];
	char agrmtNb[32+1];
	char memo[128+1];
        char flowNo[40+1];
	char hostSeqNb[10+1];
	char err_msg[256+1];
	char tran_time[14+1];
	char tmp_time[80+1];
	char buff[2048+1];
	char tmp_str[50][128+1];
	dtime_t dt_time;
	long totalQnt = 0;
	long errcode = 0;
	int ret = 0;
	int i = 0;
	long j = 0;
	double totalAmt = 0.00;
	double amt = 0.00;
	FILE *fp;
	char txtfile[256+1];
	char cfgfile[128+1];
	char xmlinput[256+1];
	char xmlinputfilename[128+1];
	char filepath[128+1];
	char *p = NULL;
	char *q = NULL;

	memset( &net_dtl, 0, sizeof( net_dtl ) );
	memset( btchNb, 0, sizeof( btchNb ) );
	memset( btchNm, 0, sizeof( btchNm ) );
	memset( operTyp, 0, sizeof( operTyp ) );
	memset( currencyTyp, 0, sizeof( currencyTyp ) );
	memset( cashFlg, 0, sizeof( cashFlg ) );
	memset( remarkCd, 0, sizeof( remarkCd ) );
	memset( remark, 0, sizeof( remark ) );
	memset( backup1, 0, sizeof( backup1 ) );
	memset( backup2, 0, sizeof( backup2 ) );
	memset( backup3, 0, sizeof( backup3 ) );
	memset( seqNb, 0, sizeof( seqNb ) );
	memset( payAcct, 0, sizeof( payAcct ) );
	memset( payCustNm, 0, sizeof( payCustNm ) );
	memset( acct, 0, sizeof( acct ) );
	memset( rcvAcct, 0, sizeof( rcvAcct ) );
	memset( rcvCustNm, 0, sizeof( rcvCustNm ) );
	memset( agrmtNb, 0, sizeof( agrmtNb ) );
	memset( memo, 0, sizeof( memo ) );
	memset( flowNo, 0, sizeof( flowNo ) );
	memset( hostSeqNb, 0, sizeof( hostSeqNb ) );
	memset( err_msg, 0, sizeof( err_msg ) );
	memset( tran_time, 0, sizeof( tran_time ) );
	memset( tmp_time, 0, sizeof( tmp_time ) );
	memset( &dt_time, 0, sizeof( dt_time ) );
	memset( txtfile, 0, sizeof( txtfile ) );
	memset( cfgfile, 0, sizeof( cfgfile ) );
	memset( xmlinput, 0, sizeof( xmlinput ) );
	memset( xmlinputfilename, 0, sizeof( xmlinputfilename ) );
	memset( filepath, 0, sizeof( filepath ) );
	memset( buff, 0, sizeof( buff ) );
	memset( inst_no, 0, sizeof( inst_no ) );
	
	GetPoolDataByName( "ABSHEAD", "_seq_no", 0, 0, net_dtl.seqno, 0);
	ret = PayGetPbDate( net_dtl.trandate );
	if( ret < 0 )
	{
		WriteLog( ERR_LVL, "取PB系统日期失败!\n" );
		errcode = 99999;
		strcpy( err_msg, "取PB系统日期失败!" );
		PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode, 0 );
		PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
		return (-1);
	}
	memset( AccDate, 0, sizeof( AccDate ) );
	strcpy( AccDate, net_dtl.trandate );
        memset( Hostseqno, 0, sizeof( Hostseqno ) );
        GetPoolDataByName( "ABSHEAD", "_seq_no", 0, 0, Hostseqno, 0);
	memset( InstNo, 0x00, sizeof( InstNo ) );
	GetPoolDataByName( "ABSHEAD", "organ_no", 0, 0, inst_no, 0);
	rtrim( AccDate );
	rtrim( inst_no );
	/***取系统时间***/
	dtcurrent( &dt_time );
	dttoasc( &dt_time, tmp_time );
	rtrim( tmp_time );
	WriteLog( APP_LVL, "系统时间tmp_time[%s]\n", tmp_time );
	WriteLog( APP_LVL, "tperr_msg[%s]\n", tpstrerror(2) );
	memcpy( tran_time, tmp_time, 4 );
	memcpy( tran_time + 4, tmp_time + 5, 2 );
	memcpy( tran_time + 6, tmp_time + 8, 2 );
	memcpy( tran_time + 8, tmp_time + 11, 2 );
	memcpy( tran_time + 10, tmp_time + 14, 2 );
	memcpy( tran_time + 12, tmp_time + 17, 2 );
	rtrim( tran_time );
	WriteLog( APP_LVL, "系统时间tran_time[%s]\n", tran_time );
	/***取包内容（转化后文件第6行内容）***/
	GetPoolDataByName( "BUSIIB", "transfilename", 0, 0, xmlinputfilename, 0 );
	WriteLog( APP_LVL, "xmlinputfilename[%s]\n", xmlinputfilename );
	sprintf( filepath, "%s/print", getenv( "HOME" ) );
        if( access( filepath, R_OK ) != 0 )
        {
	    if(mkdir(filepath,S_IEXEC |S_IREAD | S_IWRITE | S_IRGRP | S_IXGRP | S_IXOTH | S_IROTH ))
 	    {
	        WriteLog( ERR_LVL, "创建目录出错[%s]!", filepath );
	        errcode = 99999;
	        sprintf( err_msg, "创建目录出错[%s]!", filepath );
	        PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode, 0 );
	        PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
	        return ( -1 );
            }
        }
	memset( filepath, 0x00, sizeof( filepath ) );
	sprintf( filepath, "%s/print/NETBANK", getenv( "HOME" ) );
        if( access( filepath, R_OK ) != 0 )
        {
	    if(mkdir(filepath,S_IEXEC |S_IREAD | S_IWRITE | S_IRGRP | S_IXGRP | S_IXOTH | S_IROTH ))
 	    {
	        WriteLog( ERR_LVL, "创建目录出错[%s]!", filepath );
	        errcode = 99999;
	        sprintf( err_msg, "创建目录出错[%s]!", filepath );
	        PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode, 0 );
	        PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
	        return ( -1 );
            }
        }

	memset( filepath, 0x00, sizeof( filepath ) );
	sprintf( filepath, "%s/print/NETBANK/TOPB", getenv( "HOME" ) );
        if( access( filepath, R_OK ) != 0 )
        {
	    if(mkdir(filepath,S_IEXEC |S_IREAD | S_IWRITE | S_IRGRP | S_IXGRP | S_IXOTH | S_IROTH ))
 	    {
	        WriteLog( ERR_LVL, "创建目录出错[%s]!", filepath );
	        errcode = 99999;
	        sprintf( err_msg, "创建目录出错[%s]!", filepath );
	        PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode, 0 );
	        PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
	        return ( -1 );
            }
        }

	ret = FtpFileName( "7000000001", 2, xmlinputfilename, xmlinputfilename, xmlinputfilename );
	if( ret )
	{
		WriteLog( ERR_LVL, "取xml文件失败[%s]!", xmlinputfilename );
		errcode = 99999;
		sprintf( err_msg, "取xml文件失败[%s]!", xmlinputfilename );
		PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode, 0 );
		PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
		return ( -1 );
	}

	memset( cfgfile, 0x00, sizeof( cfgfile ) );
	sprintf( cfgfile, "%s/etc/%s", getenv( "HOME" ), "xml700.cfg" );
	WriteLog( APP_LVL, "cfgfile[%s]\n", cfgfile );
	
	memset( xmlinput, 0x00, sizeof( xmlinput ) );
	sprintf( xmlinput, "%s/print/NETBANK/TOPB/%s", getenv( "HOME" ), xmlinputfilename );
	WriteLog( APP_LVL, "xmlinput[%s]\n", xmlinput );
	
	memset( txtfile, 0x00, sizeof( txtfile ) );
	sprintf( txtfile, "%s/print/NETBANK/TOPB/PB%s%s%s.txt", getenv( "HOME" ), "CBS1000280", tran_time , net_dtl.seqno);
	WriteLog( APP_LVL, "txtfile[%s]\n", txtfile );

	memset( cmd, 0x00, sizeof(cmd) );
	sprintf( cmd, "XmlExchTxt 1 %s CBS1000280 %s %s UTF-8 1>null 2>&1", cfgfile, xmlinput, txtfile );
	WriteLog( APP_LVL, "cmd[%s]\n", cmd );
	ret = system( cmd );
	if( ret )
	{
		WriteLog( ERR_LVL, "xml文件转换出错!" );
		errcode = 99999;
		sprintf( err_msg, "xml文件转换出错!" );
		PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode, 0 );
		PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
		return ( -1 );
	}
	
        WriteLog( APP_LVL, "txtfile[%s]\n", txtfile );
	fp = fopen( txtfile, "r" );
	if( fp == NULL )
	{
		WriteLog( ERR_LVL, "打开txtfile[%s]文件失败!", txtfile );
		errcode = 99999;
		sprintf( err_msg, "打开txtfile[%s]文件失败!", txtfile );
		PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode, 0 );
		PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
		return ( -1 );
	}
	/***从文件中读取第6行数据***/
	for( i = 0; i < 5; i++ )
	{
		memset( buff, 0x00, sizeof( buff ) );
		fgets( buff, sizeof( buff ), fp );
		WriteLog( APP_LVL, "buff[%s]\n", buff );
	}
	
	memset( buff, 0x00, sizeof( buff ) );
	p = fgets( buff, sizeof( buff ), fp );
	if( p == NULL )
	{
		WriteLog( ERR_LVL, "读取txtfile[%s]文件出错!", txtfile );
		errcode = 99999;
		sprintf( err_msg, "读取txtfile[%s]文件出错!", txtfile );
		PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode, 0 );
		PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
		fclose( fp );
		return ( -1 );
	}
	WriteLog( APP_LVL, "buff[%s]\n", buff );

	j = 0;
        while( j < 8 )
        {
            memset( tmp_str[j], 0x00, sizeof( tmp_str[j] ));
            GetFieldByPos_new(tmp_str[j], sizeof(tmp_str[j]), j+1, buff, "|");
            j++;
        }
    fclose( fp );
    strcpy( flowNo, tmp_str[0] );
    rtrim( flowNo );
    WriteLog( APP_LVL, "flowNo[%s]\n", flowNo );

    strcpy( acct, tmp_str[1] );
    rtrim( acct );
    WriteLog( APP_LVL, "acct[%s]\n", acct );

    strcpy( btchNb, tmp_str[2] );
    rtrim( btchNb );
    WriteLog( APP_LVL, "btchNb[%s]\n", btchNb );

    totalAmt = atof( tmp_str[3] );
    WriteLog( APP_LVL, "totalAmt[%f]\n", totalAmt );

    totalQnt = atol( tmp_str[4]);
    WriteLog( APP_LVL, "totalQnt[%d]\n", totalQnt );

    strcpy( remarkCd, tmp_str[5] );
    rtrim( remarkCd );
    WriteLog( APP_LVL, "remarkCd[%s]\n", remarkCd );

    strcpy( remark, tmp_str[6] );
    rtrim( remark );
    WriteLog( APP_LVL, "remark[%s]\n", remark );

    strcpy( memo, tmp_str[7] );
    rtrim( memo );
    WriteLog( APP_LVL, "memo[%s]\n", memo );

    strcpy( operTyp, "2" );
    rtrim( operTyp );
    WriteLog( APP_LVL, "operTyp[%s]\n", operTyp );

    /***读取文件完成***/

    TotalAmt = totalAmt;
    TotalNum = totalQnt;
    if( TotalNum > 10000 )
    {
	WriteLog( ERR_LVL, "总笔数超过10000笔!\n" );
	errcode = 99999;
	strcpy( err_msg, "总笔数超过10000笔!" );
	PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode, 0 );
	PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
	return (-1);
    }
    memset( totalNum, 0, sizeof( totalNum ) );
    memset( totalAmt_tmp, 0, sizeof( totalAmt_tmp ) );
    sprintf( totalNum, "%ld", TotalNum );
    sprintf( totalAmt_tmp, "%.2f", totalAmt );

    WriteLog( ERR_LVL, "batch_no=%s com_acc=%s",btchNb, acct);
    memset( &ParaMgmt, 0, sizeof( ParaMgmt ) );
    memset( &AgtMgmt, 0, sizeof( AgtMgmt ) );
    EXEC SQL SELECT A.*,B.* INTO  :ParaMgmt,:AgtMgmt
        FROM t_sc_agt_para_mgmt A, t_sc_agt_bat_item_mgmt B
        WHERE A.batch_no = :btchNb
        AND A.com_acc = :acct
        AND A.batch_no = B.batch_no
        AND A.inst_no = B.inst_no
        AND B.deputize_id = '1';
    if( sqlca.sqlcode )
    {
	WriteLog( ERR_LVL, "查询批量项目配置表失败!sqlcode=[%d]\n", sqlca.sqlcode);
	errcode = 99999;
	strcpy( err_msg, "查询批量项目配置表失败!" );
	PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode, 0 );
	PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
	return (-1);
    }
    strcpy( InstNo, AgtMgmt.inst_no );
    rtrim( InstNo );
    PutPoolDataByName( "ABSHEAD", "organ_no", 0, 0, InstNo, 0 );
    /***检查操作类型***/
    trim( AgtMgmt.deputize_id );
    trim( operTyp );
    if( strlen( operTyp ) != 0 )
    {
        if( strcmp(operTyp, AgtMgmt.deputize_id) == 0 )
        {
            WriteLog( ERR_LVL, "此协议非批量代收opertype[%s]deputize_id[%s]!\n", operTyp, AgtMgmt.deputize_id );
  	    errcode = 99999;
            strcpy( err_msg, "此协议非批量代收!");
	    PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode, 0 );
       	    PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
            return (-1);
        }
    }

    /***生成统一格式文件***/
    memset( BatchNo, 0, sizeof( BatchNo ) );
    memset( agt_num_tmp, 0, sizeof( agt_num_tmp ) );
    strncpy( BatchNo, btchNb, 10 );
    ret = gen_reg_file_rec( xmlinput, BatchNo, agt_num_tmp, totalNum, totalAmt_tmp);
    if( ret < 0 )
    {
	WriteLog( ERR_LVL, "生成统一格式文件错!\n" );
	errcode = 99999;
	strcpy( err_msg, "生成统一格式文件错!" );
	PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode, 0 );
	PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
	return (-1);
    }

    strcpy( net_dtl.batchno, BatchNo );
    strcpy( net_dtl.instno, ParaMgmt.inst_no );
    strcpy( net_dtl.hopedate, net_dtl.trandate );
    net_dtl.agt_num = atoi( agt_num_tmp );         /*代收批次号*/
    strcpy( net_dtl.btchnb, flowNo );  /*代收流水号*/
    strcpy( net_dtl.remarkcd, remarkCd );
    strcpy( net_dtl.remark, remark );
    strcpy( net_dtl.backup1, flowNo );
    strcpy( net_dtl.backup2, acct );
    strcpy( net_dtl.backup3, AgtMgmt.head_name );
    sprintf( net_dtl.backup4,"%d", totalQnt );
    sprintf( net_dtl.backup5,"%.2f", totalAmt );
    strcpy( net_dtl.backup6, "企业批量代收");

    /***发起柜台批量***/
    ret = reg_to_server_rec( BatchNo, agt_num_tmp , totalNum, totalAmt_tmp);
    if( ret )
    {
	WriteLog( ERR_LVL, "转柜台批量处理时错!\n" );
	return (-1);
    }
	
    EXEC SQL UPDATE t_pb_net_dtl
	SET batchno = :net_dtl.batchno,
	instno = :net_dtl.instno,
	hopedate = :net_dtl.hopedate,
	agt_num = :net_dtl.agt_num,
	btchnb = :net_dtl.btchnb,
	remarkcd = :net_dtl.remarkcd,
	remark = :net_dtl.remark,
	backup1 = :net_dtl.backup1,
	backup2 = :net_dtl.backup2,
	backup3 = :net_dtl.backup3,
	backup4 = :net_dtl.backup4,
	backup5 = :net_dtl.backup5,
	backup6 = :net_dtl.backup6
    WHERE trandate = :net_dtl.trandate
	AND seqno = :net_dtl.seqno;
    if( SQLCODE || sqlca.sqlerrd[2] != 1 )
    {
	WriteLog( ERR_LVL, "更新网银流水表出错!\n" );
	errcode = 99999;
	strcpy( err_msg, "更新网银流水表出错!" );
	PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode, 0 );
	PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
	return (-1);
    }
	
    PutPoolDataByName( "BUSIIB", "hostSeqNb", 0, 0, Hostseqno, 0 );
	
    return ( 0 );
}

int 
reg_to_server_rec(char *BatchNo, char *agt_num_tmp, char *totalNum, char *totalAmt_tmp)
{
	EXEC SQL BEGIN DECLARE SECTION;
	char idflag[1+1];
	long fmldata;
        char AccDate[10+1];
        char Hostseqno[20+1];
        char TlrNo[6+1];       /*柜员流水号*/
        char InstNo[4+1];
        int BATCHNO = -1;
        long TotalNum = -1;
        double TotalAmt = 0.00;
	EXEC SQL END DECLARE SECTION;

	FBFR32 *sendbuf, *recvbuf;		/*FML32 上下传缓冲包*/
	long RcvLen = 0;				/*FML--TPCALL 返回时接收长度*/
	int rval;
	int i;
	long agt_num = 0;
	long hoststat = 1;
	char hostmsg[80+1];
	char getstr[50+1];				/*WSNADDR env*/
	char putstr[50+1];				/*WSNADDR env*/
	char _SendFile[1024+1];
	char AGTMAINSERVER[20+1];		/*批量主控SERVER*/
        int ret = -1;
	FML_TRAN_STRUCT fml_tran_head, fml_tran_rec;
	long pbsave = 0;
	long port = 0;

	memset( Hostseqno, 0, sizeof( Hostseqno ) );
	memset( hostmsg, 0, sizeof( hostmsg ) );
	memset( _SendFile, 0, sizeof( _SendFile ) );
	memset( InstNo, 0, sizeof( InstNo ) );
        GetPoolDataByName( "ABSHEAD", "organ_no", 0, 0, InstNo, 0 );

        memset( AccDate, 0, sizeof( AccDate ) );
        ret = PayGetPbDate( AccDate );
        if( ret < 0 )
        {
                WriteLog( ERR_LVL, "取PB系统日期失败!\n" );
                return (-1);
        }
        memset( Hostseqno, 0, sizeof( Hostseqno ) );
        GetPoolDataByName( "ABSHEAD", "_seq_no", 0, 0, Hostseqno, 0);
        memset( TlrNo, 0x00, sizeof( TlrNo ) );
        GetPoolDataByName( "ABSHEAD", "_tlr_no", 0, 0, TlrNo, 0);
	memset( InstNo, 0, sizeof( InstNo ) );
        GetPoolDataByName( "ABSHEAD", "organ_no", 0, 0, InstNo, 0 );
        rtrim( AccDate );
        rtrim( Hostseqno );
        rtrim( TlrNo );
        rtrim( InstNo );

        rtrim( agt_num_tmp );
        rtrim( totalNum );
        rtrim( totalAmt_tmp );
        BATCHNO = atoi( agt_num_tmp );
        TotalNum  =  atoi ( totalNum );
        TotalAmt = atof( totalAmt_tmp );
	GetPoolDataByName( "ABSHEAD", "_seq_no", 0, 0, Hostseqno, 0);
	WriteLog( ERR_LVL, "Hostseqno[%s]TotalAmt[%.2f]\n", Hostseqno, TotalAmt);
	/* 对上传包公共包头赋值 */
	memset( &FrontBuff, 0x00, sizeof( FrontBuff ) );
	strcpy( (char *)FrontBuff.AreaNo, "000000" );		/*区域号*/
	strcpy( (char *)FrontBuff.ChnlNo, "001" );		/*渠道号*/
	FrontBuff.Save = '1';				/*FML包标志*/

	memset( AGTMAINSERVER, 0x00, sizeof( AGTMAINSERVER ) );

	strcpy( (char *)FrontBuff.FTranCode, "6250" );		/*外部交易码*/
	strcpy( AGTMAINSERVER, "FmlAdt" );

	/*初始化公共包头PBHEAD(0000)*/
	memset( &fml_tran_head, 0x00, sizeof( fml_tran_head ) );
	rval = GetFmlTran( FrontBuff.AreaNo, FrontBuff.ChnlNo, "0000", '0', &fml_tran_head );
	if( rval < 0 )
	{
		WriteLog( ERR_LVL, "GetFmlTran(0000) Fail ret [%d]", rval );
		return (-1);
	}

	/*初始化交易包*/
	memset( &fml_tran_rec, 0x00, sizeof( fml_tran_rec ) );
	rval = GetFmlTran( FrontBuff.AreaNo, FrontBuff.ChnlNo, FrontBuff.FTranCode, '0', &fml_tran_rec );
	if( rval < 0 )
	{
		WriteLog(ERR_LVL, "GetFmlTran(%s) Fail ret [%d] ", FrontBuff.FTranCode, rval );
		return ( -1 );
	}
	
	/*分配FML缓冲池*/
	sendbuf = (FBFR32 *)tpalloc( "FML32", NULL, PACKDATA_LEN + 1 );
	if( sendbuf == NULL )
	{
		WriteLog( ERR_LVL, "Tpalloc sendbuf failed!" );
		/* tpfree( (char *)sendbuf ); */
		return ( -1 );
	}
	rval = Finit32( sendbuf, (FLDLEN32)Fsizeof(sendbuf) );

	recvbuf = (FBFR32 *)tpalloc( "FML32", NULL, PACKDATA_LEN + 1 );
	if( recvbuf == NULL )
	{
		WriteLog( ERR_LVL, "Tpalloc recvbuf failed!" );
		tpfree( (char *) sendbuf );
		/* tpfree( (char *) recvbuf ); */
		return ( -1 );
	}
	rval = Finit32( recvbuf, (FLDLEN32)Fsizeof( recvbuf ) );

	/*为请求交易公共包头赋值*/
	WriteLog( APP_LVL, "fml_tran_head.FldNum=[%ld]", fml_tran_head.FldNum );
	for( i = 0; i < fml_tran_head.FldNum; i++ )
	{
		if( strncmp( fml_tran_head.Flds[i].TranFldName, "tran_flag", 10 ) == 0 )
		{
			WriteLog( APP_LVL, "fld. = [%d][%s] ", fml_tran_head.Flds[i].FldFmlId, fml_tran_head.Flds[i].TranFldName );
			fmldata = 0;
			Fchg32( sendbuf, fml_tran_head.Flds[i].FldFmlId, 0, ( char * )&fmldata, NULL );
		}
		if( strncmp( fml_tran_head.Flds[i].TranFldName, "chnl_no", 10 ) == 0 )
		{
			WriteLog( APP_LVL, "fld. = [%d][%s] ", fml_tran_head.Flds[i].FldFmlId, fml_tran_head.Flds[i].TranFldName );
			Fchg32( sendbuf, fml_tran_head.Flds[i].FldFmlId, 0, "0", NULL );
		}
		if( strncmp( fml_tran_head.Flds[i].TranFldName, "_tx_op_stat", 10 ) == 0 )
		{
			WriteLog( APP_LVL, "fld. = [%d][%s] ", fml_tran_head.Flds[i].FldFmlId, fml_tran_head.Flds[i].TranFldName );
			Fchg32( sendbuf, fml_tran_head.Flds[i].FldFmlId, 0, "N", NULL );
		}
		if( strncmp( fml_tran_head.Flds[i].TranFldName, "organ_no", 10 ) == 0 )
		{
			WriteLog( ERR_LVL, "InstNo[%s]\n", InstNo );
			WriteLog( APP_LVL, "fld. = [%d][%s] ", fml_tran_head.Flds[i].FldFmlId, fml_tran_head.Flds[i].TranFldName );
			Fchg32( sendbuf, fml_tran_head.Flds[i].FldFmlId, 0, InstNo, NULL );
		}
		if( strncmp( fml_tran_head.Flds[i].TranFldName, "query_inst", 10 ) == 0 )
		{
			WriteLog( APP_LVL, "fld. = [%d][%s] ", fml_tran_head.Flds[i].FldFmlId, fml_tran_head.Flds[i].TranFldName );
			Fchg32( sendbuf, fml_tran_head.Flds[i].FldFmlId, 0, InstNo, NULL );
		}
		if( strncmp( fml_tran_head.Flds[i].TranFldName, "_seq_no", 10 ) == 0 )
		{
			WriteLog( APP_LVL, "fld. = [%d][%s] ", fml_tran_head.Flds[i].FldFmlId, fml_tran_head.Flds[i].TranFldName );
			Fchg32( sendbuf, fml_tran_head.Flds[i].FldFmlId, 0, Hostseqno, NULL );
		}
		if( strncmp( fml_tran_head.Flds[i].TranFldName, "_tlr_no", 10 ) == 0 )
		{
			WriteLog( APP_LVL, "fld. = [%d][%s] ", fml_tran_head.Flds[i].FldFmlId, fml_tran_head.Flds[i].TranFldName );
			Fchg32( sendbuf, fml_tran_head.Flds[i].FldFmlId, 0, TlrNo, NULL );
		}
		if( strncmp( fml_tran_head.Flds[i].TranFldName, "_tx_code", 10 ) == 0 )
		{
			WriteLog( APP_LVL, "fld. = [%d][%s] ", fml_tran_head.Flds[i].FldFmlId, fml_tran_head.Flds[i].TranFldName );
			Fchg32( sendbuf, fml_tran_head.Flds[i].FldFmlId, 0, "6250", NULL );
		}

		/*filename*/
		if( strncmp( fml_tran_head.Flds[i].TranFldName, "send_filename", 13 ) == 0 )
		{
			memset( _SendFile, 0x00, sizeof( _SendFile ) );
			rtrim( BatchNo );
			rtrim( InstNo );
			rtrim( AccDate );
			sprintf( _SendFile, "%s%s%s%d.txt", BatchNo, InstNo, AccDate, BATCHNO );

			WriteLog( APP_LVL, "fld. = [%d][%s] ", fml_tran_head.Flds[i].FldFmlId, fml_tran_head.Flds[i].TranFldName );
			Fchg32( sendbuf, fml_tran_head.Flds[i].FldFmlId, 0, _SendFile, NULL );
		}
	}
	/***报文体赋值***/
	for( i = 0; i < fml_tran_rec.FldNum; i++ )
	{
		/* filename */
		if( strncmp( fml_tran_rec.Flds[i].TranFldName, "file_name", 9 ) == 0 )
		{
			memset( _SendFile, 0x00, sizeof( _SendFile ) );
			rtrim( BatchNo );
			rtrim( InstNo );
			rtrim( AccDate );
			sprintf( _SendFile, "%s%s%s%d.txt", BatchNo, InstNo, AccDate, BATCHNO );

			WriteLog( APP_LVL, "fld. = [%d][%s]", fml_tran_rec.Flds[i].FldFmlId, fml_tran_rec.Flds[i].TranFldName );
			Fchg32( sendbuf, fml_tran_rec.Flds[i].FldFmlId, 0, _SendFile, NULL );
		}
		/* batch_no */
		if( strncmp( fml_tran_rec.Flds[i].TranFldName, "batch_no", 8 ) == 0 )
		{
			WriteLog( APP_LVL, "fld. = [%d][%s]", fml_tran_rec.Flds[i].FldFmlId, fml_tran_rec.Flds[i].TranFldName );
			Fchg32( sendbuf, fml_tran_rec.Flds[i].FldFmlId, 0, BatchNo, NULL );
		}
		/* busiflag */
		if( strncmp( fml_tran_rec.Flds[i].TranFldName, "flag", 8 ) == 0 )
		{
			WriteLog( APP_LVL, "fld. = [%d][%s]", fml_tran_rec.Flds[i].FldFmlId, fml_tran_rec.Flds[i].TranFldName );
			WriteLog( APP_LVL, "TotalNum[%d]MAXNUM[%d]\n", TotalNum, AgtMgmt.max_num );
			if( TotalNum > AgtMgmt.max_num )
				Fchg32( sendbuf, fml_tran_rec.Flds[i].FldFmlId, 0, (char *)&ParaMgmt.agt_hostbatch_mode, NULL );		/*0_批 1_实时*/
			else
				Fchg32( sendbuf, fml_tran_rec.Flds[i].FldFmlId, 0, "1", NULL );		/*0_批 1_实时*/
		}
		/* agt_num */
		agt_num = BATCHNO;
		if( strncmp( fml_tran_rec.Flds[i].TranFldName, "rec_no", 7 ) == 0 )
		{
			WriteLog( APP_LVL, "agt_num[%d]\n", agt_num );
			WriteLog( APP_LVL, "fld. = [%d][%s]", fml_tran_rec.Flds[i].FldFmlId, fml_tran_rec.Flds[i].TranFldName );
			Fchg32( sendbuf, fml_tran_rec.Flds[i].FldFmlId, 0, (char *)&agt_num, NULL );
		}
		/* total_num */
		if( strncmp( fml_tran_rec.Flds[i].TranFldName, "rec_num", 9 ) == 0 )
		{
			WriteLog( APP_LVL, "fld. = [%d][%s]", fml_tran_rec.Flds[i].FldFmlId, fml_tran_rec.Flds[i].TranFldName );
			Fchg32( sendbuf, fml_tran_rec.Flds[i].FldFmlId, 0, (char *)&TotalNum, NULL );
		}
		/* idflag */
		memset( idflag, 0, sizeof( idflag ) );
		idflag[0] = '1';
		if( strncmp( fml_tran_rec.Flds[i].TranFldName, "prt_flag", 8 ) == 0 )
		{
			WriteLog( APP_LVL, "fld. = [%d][%s]", fml_tran_rec.Flds[i].FldFmlId, fml_tran_rec.Flds[i].TranFldName );
			Fchg32( sendbuf, fml_tran_rec.Flds[i].FldFmlId, 0, (char *)&idflag, NULL );		/*校验证件/户名标志*/
		}
		/* total_amount */
		if( strncmp( fml_tran_rec.Flds[i].TranFldName, "amt", 9 ) == 0 )
		{
			WriteLog( APP_LVL, "fld. = [%d][%s]", fml_tran_rec.Flds[i].FldFmlId, fml_tran_rec.Flds[i].TranFldName );
			Fchg32( sendbuf, fml_tran_rec.Flds[i].FldFmlId, 0, (char *)&TotalAmt, NULL );
		}
		/* hope_date */
		if( strncmp( fml_tran_rec.Flds[i].TranFldName, "acc_date", 9 ) == 0 )
		{
			WriteLog( APP_LVL, "fld. = [%d][%s]", fml_tran_rec.Flds[i].FldFmlId, fml_tran_rec.Flds[i].TranFldName );
			Fchg32( sendbuf, fml_tran_rec.Flds[i].FldFmlId, 0, (char *)&AccDate, NULL );
		}
		if( strncmp( fml_tran_rec.Flds[i].TranFldName, "check_point", 11 ) == 0 )
		{
			WriteLog( APP_LVL, "fld. = [%d][%s]", fml_tran_rec.Flds[i].FldFmlId, fml_tran_rec.Flds[i].TranFldName );
			Fchg32( sendbuf, fml_tran_rec.Flds[i].FldFmlId, 0, "", NULL );
		}
		if( strncmp( fml_tran_rec.Flds[i].TranFldName, "acc_type", 8 ) == 0 )
		{
			WriteLog( APP_LVL, "fld. = [%d][%s]", fml_tran_rec.Flds[i].FldFmlId, fml_tran_rec.Flds[i].TranFldName );
			Fchg32( sendbuf, fml_tran_rec.Flds[i].FldFmlId, 0, "9", NULL );
		}
		if( strncmp( fml_tran_rec.Flds[i].TranFldName, "sex", 3 ) == 0 )
		{
			WriteLog( APP_LVL, "fld. = [%d][%s]", fml_tran_rec.Flds[i].FldFmlId, fml_tran_rec.Flds[i].TranFldName );
			Fchg32( sendbuf, fml_tran_rec.Flds[i].FldFmlId, 0, "1", NULL );
		}
	}
	
	/*打印上传包*/
	PrtFmlDetailLvl( DATA_LVL, sendbuf );

	/*发送到PB流程*/
	memset( getstr, 0, sizeof( getstr ) );
	strcpy( getstr, getenv( "WSNADDR" ) );
	WriteLog( TEST_LVL, "oldWSNADDR = [%s]", getstr );

	port = GetLocalTuxPort();

	memset( putstr, 0, sizeof( putstr ) );
	sprintf( putstr, "WSNADDR = %s%ld", "//127.0.0.1:", port );
	putenv( putstr );
	WriteLog( TEST_LVL, "newWSNADDR = [%s]", putstr );
	rval = tpcall( AGTMAINSERVER, (char *)sendbuf, 0, (char **)&recvbuf, &RcvLen, TPNOTRAN );
	if( rval < 0 )
	{
		if( tperrno == 13 )
		{
			WriteLog( ERR_LVL, "调TUXEDO服务[%s]超时", AGTMAINSERVER );
			WriteLog( ERR_LVL, "超时，录入柜台OK!" );
			hoststat = 0;
			tpfree( (char *)sendbuf );
			tpfree( (char *)recvbuf );
			tpterm();
			return (0);   /** 状态未知 当成功处理 **/
		}else
		{
			WriteLog( ERR_LVL, "调用TUXEDO服务[%s]失败!!tperrno=[%d]%s[%s]", AGTMAINSERVER, tperrno, tpstrerror(tperrno), getenv("WSNADDR") );
			if( tperrno == 6 || tperrno == 10 )
			{
				WriteLog( ERR_LVL, "TUXEDO服务[%s]不存在或服务错!", AGTMAINSERVER );
				hoststat = 1;
			}
			tpfree( (char *)sendbuf );
			tpfree( (char *)recvbuf );
			tpterm();
			return (-1);
		}
	}
	else
	{
		WriteLog( TEST_LVL, "调用TUXEDO服务[%s]成功!!", AGTMAINSERVER );
	}
	memset( putstr, 0, sizeof( putstr ) );
	sprintf( putstr, "WSNADDR=%s", getstr );
	putenv( putstr );
	WriteLog( TEST_LVL, "resetWSNADDR = [%s]", putstr );

	memset( getstr, 0, sizeof( getstr ) );
	strcpy( getstr, getenv( "WSNADDR" ) );
	WriteLog( TEST_LVL, "finalWSNADDR = [%s]", getstr );

	/* 打印下传包 */
	PrtFmlDetailLvl( DATA_LVL, recvbuf );

	memset( &fml_tran_head, 0x00, sizeof( fml_tran_head ) );
	rval = GetFmlTran( FrontBuff.AreaNo, FrontBuff.ChnlNo, "0000", '1', &fml_tran_head );
	if( rval < 0 )
	{
		WriteLog( ERR_LVL, "GetFmlTran(0000) Fail ret [%d]", rval );
		tpfree( (char *)sendbuf );
		tpfree( (char *)recvbuf );
		tpterm();
		return(-1);
	}

	WriteLog(DEBUG_LVL, "fml_tran_head.FldNum=[%ld]", fml_tran_head.FldNum);

	for( i = 0;i < fml_tran_head.FldNum; i++ )
	{
		if( strncmp( fml_tran_head.Flds[i].TranFldName, "_host_stat", 11 ) == 0 )
		{
			WriteLog( TEST_LVL, "fld. = [%d][%s] ", fml_tran_head.Flds[i].FldFmlId, fml_tran_head.Flds[i].TranFldName );
			Fget32( recvbuf, fml_tran_head.Flds[i].FldFmlId ,0 ,(char *)&hoststat, NULL );
		}
		if( strncmp( fml_tran_head.Flds[i].TranFldName, "_error_code", 12 ) == 0 )
		{
			WriteLog( TEST_LVL, "fld. = [%d][%s] ", fml_tran_head.Flds[i].FldFmlId, fml_tran_head.Flds[i].TranFldName );
			Fget32( recvbuf, fml_tran_head.Flds[i].FldFmlId ,0 ,(char *)hostmsg, NULL );
		}
	}

	tpfree( (char *)sendbuf );
	tpfree( (char *)recvbuf );

	tpterm();

	if( hoststat != 0 )
	{
		WriteLog( ERR_LVL, "录入柜台批失败! " );
		WriteLog( ERR_LVL, "hoststat[%d],HostMsg[%s] ", hoststat, hostmsg );
		PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, "99999", 0 );
		PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, hostmsg, 0 );
		return ( -1 );
	}else
		WriteLog( APP_LVL, "录入柜台批OK!" );

	return (0);
}

/*****************************************************
* Function     :通过xml文件组柜面6250批量处理文件
* Description  :
* Input        ：无
* Output       : 无
* Return       :  0 -- 成功
                 -1 -- 失败
*-----------------------------------------
*Create        Date         Action
* fjx        2015/10/22     Create
*****************************************************/
int 
gen_reg_file_rec( char * recfile, char *batchNo, char *agt_num_tmp, char *totalNum, char *totalAmt_tmp)
{
	EXEC SQL BEGIN DECLARE SECTION;
	long cnt = 0;
        char AccDate[10+1];
        char InstNo[4+1];
        char BatchNo[10+1];
        int BATCHNO = 0;
        long TotalNum = -1; 
        double TotalAmt = 0.00;
	EXEC SQL END DECLARE SECTION;
	char dirname[100+1];
	char bat_file[100+1];
        char rec_file[100+1];
        char gzbat_file[100+1];
	char err_msg[256+1];
        char headbuf[300];
	
	/*文件相关变量值*/
	char btchNb[32+1];
	char btchNm[128+1];
	char operTyp[2+1];
        int  len = 0,len1=0,len2=0;
	int totalQnt = 0;
	double totalAmt = 0.00;
	char currencyTyp[6+1];
	char cashFlg[2+1];
        char remarkCd[16+1];
	char remark[128+1];
	char backup1[128+1];
	char backup2[128+1];
	char backup3[128+1];
	char seqNb[32+1];
	char payAcct[32+1];
	char payCustNm[128+1];
	char rcvAcct[32+1];
	char rcvCustNm[128+1];
	double amt = 0.00;
	char agrmtNb[32+1];
	char agrmtNbPublic[32+1];
	char memo[128+1];
	char stmp[1024+1];
	char cmd[128+1];
	FILE *fp = NULL;
	/*文件相关变量值*/

	char tmp_str[50][128+1];
	long j = 0;
	char *p = NULL;
	char *q = NULL;
        FILE *fr = NULL,*frec = NULL, *fw = NULL;
	int ret = 0;
	int i = 0;
	double commission = 0.00;
	double old_amount = 0.00;
	double over_amount = 0.00;
        char buff[30012],tmpbuff[30012],fwbuff[30012];
        char *p1 = NULL,*p2 = NULL;

	memset( headbuf, 0, sizeof( headbuf ) );
	memset( dirname, 0, sizeof( dirname ) );
	memset( bat_file, 0, sizeof( bat_file ) );
	memset( rec_file, 0, sizeof( rec_file ) );
	memset( gzbat_file, 0, sizeof( gzbat_file ) );
	memset( err_msg, 0, sizeof( err_msg ) );
	memset( btchNb, 0, sizeof( btchNb ) );
	memset( btchNm, 0, sizeof( btchNm ) );
	memset( operTyp, 0, sizeof( operTyp ) );
	memset( currencyTyp, 0, sizeof( currencyTyp ) );
	memset( cashFlg, 0, sizeof( cashFlg ) );
	memset( remarkCd, 0, sizeof( remarkCd ) );
	memset( remark, 0, sizeof( remark ) );
	memset( backup1, 0, sizeof( backup1 ) );
	memset( backup2, 0, sizeof( backup2 ) );
	memset( backup3, 0, sizeof( backup3 ) );
	memset( seqNb, 0, sizeof( seqNb ) );
	memset( payAcct, 0, sizeof( payAcct ) );
	memset( payCustNm, 0, sizeof( payCustNm ) );
	memset( rcvAcct, 0, sizeof( rcvAcct ) );
	memset( rcvCustNm, 0, sizeof( rcvCustNm ) );
	memset( buff, 0, sizeof( buff ) );
	memset( stmp, 0, sizeof( stmp ) );
	memset( cmd, 0, sizeof( cmd ) );
	
	memset( agrmtNb, 0, sizeof( agrmtNb ) );
	memset( agrmtNbPublic, 0, sizeof( agrmtNbPublic ) );
	memset( memo, 0, sizeof( memo ) );

        memset( AccDate, 0, sizeof( AccDate ) );
        ret = PayGetPbDate( AccDate );
        if( ret < 0 )
        {
                WriteLog( ERR_LVL, "取PB系统日期失败!\n" );
                return (-1);
        }
        memset( InstNo, 0, sizeof( InstNo ) );
        GetPoolDataByName( "ABSHEAD", "organ_no", 0, 0, InstNo, 0 );
        rtrim( InstNo );

        rtrim( batchNo );
        rtrim( totalNum );
        rtrim( totalAmt_tmp );
	memset( BatchNo, 0, sizeof( BatchNo ) );
        strcpy(BatchNo, batchNo);	
        TotalNum =  atoi ( totalNum );
        TotalAmt =  atof ( totalAmt_tmp );
	/***设置批次号***/
	WriteLog( APP_LVL, "batch_no[%s],inst_no[%s],hope_date[%s]\n", BatchNo, InstNo, AccDate );
	EXEC SQL SELECT max(agt_num), count(*) INTO :BATCHNO, :cnt
		FROM t_sc_agt_batch
		WHERE batch_no = :BatchNo
		AND inst_no = :InstNo
		AND hope_date = :AccDate;
	if( SQLCODE && SQLCODE != 100 )
	{
		WriteLog( ERR_LVL, "查询批次管理表失败!\n" );
		return (-1);
	}
	if( cnt == 0 )
	{
		BATCHNO = 1;
	}
	else
	{
		BATCHNO ++;
	}
        sprintf( agt_num_tmp, "%d", BATCHNO );
	WriteLog( APP_LVL, "BATCHNO[%d],cnt[%d]\n", BATCHNO, cnt );
	
	sprintf( dirname, "%s/%c%c/%s", getenv("PRINTERDIR"), InstNo[0], InstNo[1], InstNo );
	sprintf( bat_file, "%s/%c%c/%s/%s%s%s%d.txt", getenv("PRINTERDIR"), InstNo[0], InstNo[1], InstNo, BatchNo, InstNo, AccDate, BATCHNO );
        sprintf( rec_file, "%s/%c%c/%s/%s%s%s%drec.txt", getenv("PRINTERDIR"), InstNo[0], InstNo[1], InstNo, BatchNo, InstNo, AccDate, BATCHNO );
        sprintf( gzbat_file, "%s/%c%c/%s/%s%s%s%d.txt.gz", getenv("PRINTERDIR"), InstNo[0], InstNo[1], InstNo, BatchNo, InstNo, AccDate, BATCHNO );
	WriteLog( APP_LVL, "gzbat_file=[%s] trans filename = [%s] \n", gzbat_file, bat_file );
	
	/***检查目录***/
	if( access( dirname, F_OK ) != 0 )
	{
		memset( cmd, 0x00, sizeof( cmd ) );
		sprintf( cmd, "mkdir -p -m755 %s 1>/dev/null 2>&1", dirname );
		ret = system( cmd );
		if( ret != 0 )
		{
			WriteLog( ERR_LVL, "新建目录[%s]失败!\n", dirname );
			return (-1);
		}
	}
	
	rtrim( ParaMgmt.com_acc );
	rtrim( ParaMgmt.unit_name );
	rtrim( ParaMgmt.inst_no );
	rtrim( ParaMgmt.batch_no );
	rtrim( AgtMgmt.summ_no );
	rtrim( AgtMgmt.summ_note );
	WriteLog( APP_LVL, "ParaMgmt.com_acc = [%s]\n", ParaMgmt.com_acc );
	WriteLog( APP_LVL, "ParaMgmt.unit_name = [%s]\n", ParaMgmt.unit_name );
	WriteLog( APP_LVL, "ParaMgmt.inst_no = [%s]\n", ParaMgmt.inst_no );
	WriteLog( APP_LVL, "ParaMgmt.batch_no = [%s]\n", ParaMgmt.batch_no );
	WriteLog( APP_LVL, "AgtMgmt.summ_no = [%s]\n", AgtMgmt.summ_no );
	WriteLog( APP_LVL, "AgtMgmt.summ_note = [%s]\n", AgtMgmt.summ_note );
	WriteLog( APP_LVL, "TotalAmt = [%.2f]\n", TotalAmt );
	WriteLog( APP_LVL, "TotalNum = [%ld]\n", TotalNum );

	sprintf( headbuf, "%s|", ParaMgmt.com_acc );

        memset ( tmpbuff, 0x00, sizeof( tmpbuff)) ;
	sprintf( tmpbuff, "%s|", ParaMgmt.unit_name );
        strcat ( headbuf, tmpbuff );

        memset ( tmpbuff, 0x00, sizeof( tmpbuff)) ;
	sprintf( tmpbuff, "%f|", TotalAmt );
        strcat ( headbuf, tmpbuff );

	strcat( headbuf, "|" );

        memset ( tmpbuff, 0x00, sizeof( tmpbuff)) ;
	sprintf( tmpbuff, "%s|", ParaMgmt.inst_no );
        strcat ( headbuf, tmpbuff ); 

        memset ( tmpbuff, 0x00, sizeof( tmpbuff)) ;
	sprintf( tmpbuff, "%s|", AgtMgmt.summ_no );
        strcat ( headbuf, tmpbuff );
        
        memset ( tmpbuff, 0x00, sizeof( tmpbuff)) ;
	sprintf( tmpbuff, "%s|", AgtMgmt.summ_note );
        strcat ( headbuf, tmpbuff );

        memset ( tmpbuff, 0x00, sizeof( tmpbuff)) ;
	sprintf( tmpbuff, "%d|", TotalNum );
        strcat ( headbuf, tmpbuff );
	if( AgtMgmt.deputize_id[0] == '1' )
	{
                memset ( tmpbuff, 0x00, sizeof( tmpbuff)) ;
		sprintf( tmpbuff, "%c%c%c%c%c%c%c%c|", AgtMgmt.bat_flag[0], AgtMgmt.bat_flag[1], AgtMgmt.bat_flag[2], AgtMgmt.bat_flag[3], AgtMgmt.bat_flag[4], '0', AgtMgmt.bat_flag[6], AgtMgmt.bat_flag[7] );
                strcat ( headbuf, tmpbuff );
	}
	else
	{
                memset ( tmpbuff, 0x00, sizeof( tmpbuff)) ;
		sprintf( tmpbuff, "%c%c%c%c%c%c%c%c|", AgtMgmt.bat_flag[0], AgtMgmt.bat_flag[1], AgtMgmt.bat_flag[2], AgtMgmt.bat_flag[3], AgtMgmt.bat_flag[4], '1', AgtMgmt.bat_flag[6], AgtMgmt.bat_flag[7] );
                strcat ( headbuf, tmpbuff );
	}
	strcat( headbuf, "1234|" );

        memset ( tmpbuff, 0x00, sizeof( tmpbuff)) ;
	sprintf( tmpbuff, "%s|\n", ParaMgmt.batch_no );
        strcat ( headbuf, tmpbuff );

	/****
	账号-acc         | 户名-acc_name      | 金额-amount        |
	证件类型-id_type | 证件号-id_no       | 地址-addr          |
	客户号-cust_no   | 原始金额-old_amount| 滞纳金-over_amount |
	手续费-commission| 备用1-reserve1     | 备用2-reserve2     |
	MAC-mac          |       sum_seqno    |
	***************对应报文结构中的字段********************
	acc|acc_name|amount|id_type|id_no|addr|cust_no|old_amount|over_amount|
	commission|reserve1|reserve2|mac|\n
	rcvAcct|rcvCustNm|amt|||||0.00|0.00|0.00|backup1|backup2|||
	****/

        frec = fopen( rec_file, "w+" );
        if( frec == NULL )
        {
                WriteLog( ERR_LVL, "打开文件[%s]失败!\n", bat_file );
                return (-1);
        }

        /***读取文件将需要的字段写入送到核心的文件***/
        WriteLog( APP_LVL, "xmlfile = [%s]\n", recfile );
        fr = fopen( recfile, "r" );
        if( fr == NULL )
        {
                WriteLog( ERR_LVL, "打开文件[%s]失败!\n", recfile );
                fclose( frec );
                return (-1);
        }

        memset( buff, 0x00, sizeof( buff ) );
        len = sizeof( buff );
        if( (len1 = fread( buff, 1,  len-1 ,fr ) ) == NULL)
        {
                WriteLog( ERR_LVL, "文件为空[%d][%s][%s]!\n",ret,buff, recfile );
                fclose( frec );
                fclose( fr );
                return -1;
        }
        if((p1=(char*)strstr(buff,"<fileName>")) != NULL )
        {
                if((p2=(char*)strstr(p1,"</fileName>")) != NULL )
                {
                        memset(tmpbuff, 0, sizeof(tmpbuff) );
                        memset(fwbuff, 0, sizeof(fwbuff) );
                        memcpy(tmpbuff,p1+10,p2-p1-10);
                        ret = fwrite(tmpbuff,1, p2-p1-10,frec);
                        if(ret < 0 )
                        {
                               WriteLog( ERR_LVL, "base写入文件错");
                               fclose( frec );
                               fclose( fr );
                               return -1;
                        }
                }
                else
                {
                        memset(tmpbuff, 0, sizeof(tmpbuff) );
                        memset(fwbuff, 0, sizeof(fwbuff) );
                        memcpy(tmpbuff,p1+10,strlen(p1+10)-10);

                        ret = fwrite(tmpbuff,1 , strlen(p1+10)-10,frec);
                        if(ret < 0 )
                        {
                                WriteLog( ERR_LVL, "写入文件错");
                                fclose( frec );
                                fclose( fr );
                                return -1;
                        }
                        memcpy(buff,p1+strlen(p1+10),10);
                        memset(buff+10,0,len-10);
                        i=0;
                        while(1)
                        {
                                if(i++>100)
                                {
                                        WriteLog( ERR_LVL, "[%s][%s]报文解析失败\n", buff,p1 );
                                        fclose( frec );
                                        fclose( fr );
                                        return -1;
                                }
                                if( len1 == NULL)
                                {
                                        break;
                                }
                                if( ( len1 = fread( buff+10, len -11,  1 ,fr )) == NULL )
                                {
                                        WriteLog( ERR_LVL, "文件为空[%d][%s][%s]!\n",len1,buff,
recfile );
                                }
                                p1 = buff;
                                if((p2=(char*)strstr(buff,"</fileName>")) != NULL )
                                {
                                        memset(tmpbuff, 0, sizeof(tmpbuff) );
                                        memset(fwbuff, 0, sizeof(fwbuff) );
                                        memcpy(tmpbuff,buff,p2-p1);
                                        len1=strlen(tmpbuff);

                                        ret = fwrite(tmpbuff,1, p2-p1,frec);
                                        if(ret < 0 )
                                        {
                                                WriteLog( ERR_LVL, "写入文件错");
                                                fclose( frec );
                                                fclose( fr );
                                                return -1;
                                        }
                                        break;
                                }
                                else
                                {
                                        memset(tmpbuff, 0, sizeof(tmpbuff) );
                                        memset(fwbuff, 0, sizeof(fwbuff) );
                                        memcpy(tmpbuff,buff,len-11);
                                        len1=strlen(tmpbuff);

                                        ret = fwrite(tmpbuff,1, len-11,frec);
                                        if(ret < 0 )
                                        {
                                                WriteLog( ERR_LVL, "base解码错");
                                                fclose( frec );
                                                fclose( fr );
                                                return -1;
                                        }
                                        memcpy(buff,buff+strlen(buff+10),10);
                                        memset(buff+10,0,len-10);
                                }
                        }
                }
        }
        else
        {
                WriteLog( ERR_LVL, "[%s][%s]报文解析失败\n", buff,p1 );
                fclose( frec );
                fclose( fr );
                return -1;
        }

        WriteLog( APP_LVL, "buff = [%s]\n", buff );
        fclose( fr );
        fclose( frec );

        ret=Base64DealFile( "u", rec_file, gzbat_file );
        if( ret < 0 )
        {
                WriteLog( ERR_LVL, "base64编码失败!\n" );
        }
        fw = fopen( bat_file, "w+" );
        if( fw == NULL )
        {
                WriteLog( ERR_LVL, "打开文件[%s]失败!\n", bat_file );
                return (-1);
        }
        WriteLog( ERR_LVL, "bbb[%s]!\n", headbuf );
        fputs(headbuf,fw);
        fclose(fw);

        memset(cmd,0,sizeof(cmd));
        sprintf(cmd,"gunzip -c %s>>%s ",gzbat_file,bat_file);
        WriteLog( APP_LVL, "mmmmmmmmmmmm[%s]",cmd );
        ret = system( cmd );

	return 0;
}


const char* GetFieldByPos_new( char *field, int maxlen, int pos, const char *buf, const char *dlm )
{
    const char *start;              /* 字段起始位置 */
    const char *end;                /* 字段终止位置 */
    const char *buf_ptr;            /* 遍历缓存指针 */
    int  i;
    int  dlm_len;                   /* 分割符长度   */
    int  count;                     /* 分割符计数器 */
    int  overflow;                  /* 溢出控制     */

    /* 界定字段的起始位置和终止位置 */
    start       =  buf;
    end         = NULL;
    count       = 0;
    overflow    = 0;
    buf_ptr     = buf;

    /* 分割符不能为空 */
    if ( dlm == NULL || *dlm == '\0' )
    {
        return NULL;
    }
    dlm_len = strlen(dlm);

    /* 从1开始计数 */
    if ( pos == 0 )
    {
        return NULL;
    }

    while ( *buf_ptr != '\0' )
    {
        /* 溢出控制     */
        if ( overflow++ > 10240 )
        {
            return NULL;
        }

        /* 跳过双字节字符 */
        if ( *buf_ptr > 0x80 && memcmp(buf_ptr, dlm, dlm_len) != 0)
        {
            buf_ptr += 2;
            continue;
        }

        if ( memcmp(buf_ptr, dlm, dlm_len) == 0 )
        {
            count++;
            if ( count == pos - 1 )
            {
                start = buf_ptr + dlm_len;
            }
            else if ( count == pos )
            {
                end   = buf_ptr - 1;
                break;
            }
            buf_ptr += dlm_len;             /* 跳过分割符     */ 
        }
        else
        {
            buf_ptr++;                      /* 指向下一个字符 */
        }
    }

    /* 字段不为空时复制 */
    if ( end != NULL && end >= start )
    {
        buf_ptr = start;
        for ( i = 0; i < MIN( end - start + 1, maxlen-1 ); i++ )
        {
            /* 双字节特殊处理 */
            if ( *buf_ptr > 0x80 )
            {
                /* 防止中文多复制1位 */
                if ( ( i + 1 ) == MIN( end - start + 1, maxlen-1 ))
                {
                    return start;
                }
                *field++ = *buf_ptr++;
                i++;
            }
            *field++ = *buf_ptr++;
        }
        return start;
    }

    return NULL;
}

/** 代收明细结果查询 */
int recQry_new()
{
	EXEC SQL BEGIN DECLARE SECTION;
	char sql_str[1024+1];
	char batch_no[10+1];
	char instno[4+1];
	char hopedate[10+1];
	char chnlseqno[32+1];
	char btchNb[32+1];
	char work_date[10+1];
	char cmp_date[10+1];
	char trandate[8+1];
	char seqno[10+1];
	char seqNb[15+1];
	char flag[6+1];
	char err_code[6+1];
	char err_msg[256+1];
	char dtl_msg[40+1];
	char col_acc[32+1];
	char col_crop_name[90+1];
	double rb_amt=0;
	char remake2[40+1];
	char work_stat[1+1],btchstat[1+1];
	long agt_num = -1;
	long ag_tx_seqno = -1;
	long cnt;
	EXEC SQL END DECLARE SECTION;
	char filename[256+1];
	char cfgfile[256+1];
	char xmloutput[256+1];
	char ftpoutput[256+1];
	char ftpfilename[256+1];
	char ftpfilename1[256+1];
	char ftpfilename1o[256+1];
	char cmd[256+1];
	char stxtfile[256+1];
	char ftxtfile[256+1];
	char stxtfile_mid[256+1];
	char ftxtfile_mid[256+1];
	char stat[1+1];
	char errRes[60+1];
	
	char thver[6+1];
	char thcn2utf8[1+1];
	
	char thpsndMbrCd[4+1];
	char thpsndAppCd[3+1];
	char thpsndDt[8+1];
	char thpsndTm[6+1];
	char thprcvMbrCd[4+1];
	char thprcvAppCd[3+1];
	
	char thmmsgCd[10+1];
	char thmcallTyp[4+1];
	char thmseqNb[15+1];
	char thmsndMbrCd[4+1];
	char thmsndAppCd[3+1];
	char thmsndDt[8+1];
	char thmsndTm[6+1];
	char thmrcvMbrCd[4+1];
	char thmrcvAppCd[3+1];
	char thmrefMsgCd[10+1];
	char thmrefCallTyp[4+1];
	char thmrefSndMbrCd[4+1];
	char thmrefSndAppCd[3+1];
	char thmrefSndDt[8+1];
	char thmrefSeqNb[15+1];
	
	char thsretCd[6+1];	
	char thsdesc[256+1];	
	char thslocation[256+1];	
	char thsmbrCd[4+1];	
	char thsappCd[3+1];	
	char buff[2048],tmpbuff[2048];
	char *p1;
	
	FILE * fp, * sfp, *ffp,*fw; 
	int ret = 0,len=0,len1=0,i=0;
	long errcode = 0;

	/* Added by MSJ 20121214 - Start */
	int l_hopedate=0;
	int l_work_date=0;
	/* 20121214 - End */

	memset( sql_str, 0, sizeof( sql_str ) );
	memset( batch_no, 0, sizeof( batch_no ) );
	memset( instno, 0, sizeof( instno ) );
	memset( hopedate, 0, sizeof( hopedate ) );
	memset( chnlseqno, 0, sizeof( chnlseqno ) );
	memset( btchNb, 0, sizeof( btchNb ) );
	memset( work_date, 0, sizeof( work_date ) );
	memset( cmp_date, 0, sizeof( cmp_date ) );
	memset( flag, 0, sizeof( flag ) );
	memset( err_code, 0, sizeof( err_code ) );
	memset( err_msg, 0, sizeof( err_msg ) );
	memset( filename, 0, sizeof( filename ) );
	memset( cfgfile, 0, sizeof( cfgfile ) );
	memset( xmloutput, 0, sizeof( xmloutput ) );
	memset( ftpoutput, 0, sizeof( ftpoutput ) );
	memset( ftpfilename, 0, sizeof( ftpfilename ) );
	memset( ftpfilename1, 0, sizeof( ftpfilename1 ) );
	memset( ftpfilename1o, 0, sizeof( ftpfilename1o ) );
	memset( cmd, 0, sizeof( cmd ) );
	memset( stxtfile, 0, sizeof( stxtfile ) );
	memset( stxtfile_mid, 0, sizeof( stxtfile_mid ) );
	memset( ftxtfile, 0, sizeof( ftxtfile ) );
	memset( ftxtfile_mid, 0, sizeof( ftxtfile_mid ) );
	memset( stat, 0, sizeof( stat ) );
	memset( errRes, 0, sizeof( errRes ) );
	memset( seqno, 0, sizeof( seqno ) );
	memset( seqNb, 0, sizeof( seqNb ) );
	memset( trandate, 0, sizeof( trandate ) );
	
	memset( thver, 0, sizeof( thver ) );
	memset( thcn2utf8, 0, sizeof( thcn2utf8 ) );
	
	memset( thpsndMbrCd, 0, sizeof( thpsndMbrCd ) );
	memset( thpsndAppCd, 0, sizeof( thpsndAppCd ) );
	memset( thpsndDt, 0, sizeof( thpsndDt ) );
	memset( thpsndTm, 0, sizeof( thpsndTm ) );
	memset( thprcvMbrCd, 0, sizeof( thprcvMbrCd ) );
	memset( thprcvAppCd, 0, sizeof( thprcvAppCd ) );
	memset( work_stat, 0, sizeof( work_stat ) );
	memset( btchstat, 0, sizeof( btchstat ) );
	
	memset( thmmsgCd, 0, sizeof( thmmsgCd ) );
	memset( thmcallTyp, 0, sizeof( thmcallTyp ) );
	memset( thmseqNb, 0, sizeof( thmseqNb ) );
	memset( thmsndMbrCd, 0, sizeof( thmsndMbrCd ) );
	memset( thmsndAppCd, 0, sizeof( thmsndAppCd ) );
	memset( thmsndDt, 0, sizeof( thmsndDt ) );
	memset( thmsndTm, 0, sizeof( thmsndTm ) );
	memset( thmrcvMbrCd, 0, sizeof( thmrcvMbrCd ) );
	memset( thmrcvAppCd, 0, sizeof( thmrcvAppCd ) );
	memset( thmrefMsgCd, 0, sizeof( thmrefMsgCd ) );
	memset( thmrefCallTyp, 0, sizeof( thmrefCallTyp ) );
	memset( thmrefSndMbrCd, 0, sizeof( thmrefSndMbrCd ) );
	memset( thmrefSndAppCd, 0, sizeof( thmrefSndAppCd ) );
	memset( thmrefSndDt, 0, sizeof( thmrefSndDt ) );
	memset( thmrefSeqNb, 0, sizeof( thmrefSeqNb ) );
	
	memset( thsretCd, 0, sizeof( thsretCd ) );
	memset( thsdesc, 0, sizeof( thsdesc ) );
	memset( thslocation, 0, sizeof( thslocation ) );
	memset( thsmbrCd, 0, sizeof( thsmbrCd ) );
	memset( thsappCd, 0, sizeof( thsappCd ) );
	memset( buff, 0, sizeof( buff ) );
	memset( tmpbuff, 0, sizeof( tmpbuff ) );

	/***从变量池中取值***/
	GetPoolDataByName( "BUSIIB", "thmseqNb", 0, 0, chnlseqno, 0 );
	GetPoolDataByName( "BUSIIB", "btchNb", 0, 0, btchNb, 0 );
	GetPoolDataByName( "PBSYS", "SrcJourNo", 0, 0, seqno, 0 );
	GetPoolDataByName( "PBSYS", "PbDate", 0, 0, trandate, 0 );
	memcpy( seqNb, trandate, 8 );
	memcpy( seqNb+8, seqno+3, 7 );
	ret = PayGetPbDate( work_date );
	if( ret != 0 )
	{
		WriteLog( ERR_LVL, "取系统日期错\n" );
		strcpy( err_code, "99999" );
		errcode = 99999;
		strcpy( err_msg, "取系统日期错!" );
		PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode, 0 );
		PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
		return (-1);
	}
	WriteLog( APP_LVL, "cnt[%d]\n", cnt );
	/***查询网银流水表***/
	EXEC SQL SELECT first 1 batchno, instno, hopedate, agt_num
		INTO :batch_no, :instno, :hopedate, :agt_num
		FROM t_pb_net_dtl
		WHERE btchnb = :btchNb;
	if( sqlca.sqlcode != 0 )
	{
		WriteLog( ERR_LVL, "sqlcode[%d]\n", sqlca.sqlcode );
		if( sqlca.sqlcode == 100 )
		{
			/** Commentted by MSJ - 20150817 
			strcpy( err_code, "20027" );
			errcode = 20027;
			strcpy( err_msg, "无此批次号!" );
			PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode, 0 );
			PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
			return (-1);**/
			WriteLog( ERR_LVL, "网银流水表查无记录" );
			strcpy( err_msg, "行内未收到该笔代收交易" );
			PutPoolDataByName("BUSIIB","hostSeqStat", 0, 0, "2",0);
			PutPoolDataByName( "BUSIIB","errRes", 0, 0, err_msg, 0);
			PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, "0", 0 );
			EndQry( work_date, seqNb, btchNb );
			return ( 0 );
		}
		else
		{
			WriteLog( ERR_LVL, "代收工资查询失败!" );
			strcpy( err_code, "20028" );
			errcode = 20028;
			strcpy( err_msg, "代收工资查询失败!" );
			PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode, 0 );
			PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
			return (-1);
		}
	}
	strncpy( cmp_date, btchNb, 8 );
	WriteLog( APP_LVL, "batchno[%s],hopedate[%s],agt_num[%d],instno[%s],cmp_date[%s],work_date[%s]\n", batch_no, hopedate, agt_num, instno, cmp_date, work_date );

	rtrim( cmp_date );
	rtrim( work_date );
	rtrim( hopedate );

	EXEC SQL SELECT  work_stat
                INTO  :work_stat
                FROM t_sc_agt_batch
                WHERE batch_no = :batch_no
                AND inst_no = :instno
                AND hope_date = :hopedate
                AND agt_num = :agt_num;
	if( sqlca.sqlcode != 0 )
	{
                if( sqlca.sqlcode == 100 )
                {
			EXEC SQL SELECT  work_stat
              		  INTO  :work_stat
              		  FROM t_sc_agt_batch_his
             		   WHERE batch_no = :batch_no
               		 AND inst_no = :instno
       		         AND hope_date = :hopedate
           		     AND agt_num = :agt_num;
			if( sqlca.sqlcode == 100 )
			{
				/** Commentted by MSJ - 20150817 
                        	strcpy( err_code, "99999" );
                    	   	 errcode = 99999;
                       		 strcpy( err_msg, "要查询的记录不存在!" );
                       		 PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode, 0 );
                       		 PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
                       		 return (-1);**/
                       		 WriteLog( ERR_LVL, "代收批次表查无记录" );
                       		 strcpy( err_msg, "数据库中未找到该笔代收交易" );
                       		 PutPoolDataByName("BUSIIB","hostSeqStat", 0, 0, "2",0);
                       		 PutPoolDataByName( "BUSIIB","errRes", 0, 0, err_msg, 0);
                       		 PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, "0", 0 );
                       		 EndQry( work_date, seqNb, btchNb );
                       		 return ( 0 );
			}
			else if( sqlca.sqlcode != 0 )
			{
				WriteLog( ERR_LVL, "代收批次表查无记录" );
				errcode = 99999;
                        	strcpy( err_msg, "代收工资查询失败!" );
				PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode, 0 );
				PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
				return (-1);
				
			}
                }
                else
                {
                        WriteLog( ERR_LVL, "代收工资查询失败!" );
                        errcode = 99999;
                        strcpy( err_msg, "代收工资查询失败!" );
                        PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode, 0 );
                        PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
                        return (-1);
                }
        }
	if( work_stat[0] >= '0' && work_stat[0] < 'c' )
	{
		btchstat[0]='0';
	}
	else if( work_stat[0] >= 'c')
	{
                btchstat[0] = '1';
	}
	else
	{
		btchstat[0] = '2';
	}


	rdefmtdate( &l_work_date, "yyyymmdd", work_date);
	rdefmtdate( &l_hopedate, "yyyymmdd", hopedate);
	WriteLog( ERR_LVL,"batchno[%s],hopedate[%s],agt_num[%d],instno[%s],work_date[%s]\n",
		   batch_no, hopedate, agt_num, instno, work_date );
	/* 代理明细表中存储当天与前一天记录*/
	/* if( strncmp( hopedate, work_date, 8 ) == 0 ) */
	if( (l_work_date-l_hopedate==0) || (l_work_date-l_hopedate==1) )
	{
		sprintf( sql_str, "select col_acc,col_crop_name,rb_amt, remake2, flag, msg from t_sc_agt_dtl where batch_no = '%s' and hope_date = '%s' and col_inst = '%s' and agt_num = %d", batch_no, hopedate, instno, agt_num );
        /***取总笔数***/
        EXEC SQL SELECT count(*) INTO :cnt
            FROM t_sc_agt_dtl
            WHERE batch_no = :batch_no
                AND hope_date = :hopedate
                AND col_inst = :instno
                AND agt_num = :agt_num;
        if( SQLCODE )
        {
            WriteLog( ERR_LVL, "数据库操作出错!sqlcode[%d]\n", SQLCODE );
            strcpy( err_code, "99999" );
            errcode = 99999;
            strcpy( err_msg, "数据库操作出错!" );
            PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode, 0 );
            PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
            return (-1);
        }
	}
	else
	{
		sprintf( sql_str, "select col_acc,col_crop_name,rb_amt,remake2, flag, msg from t_sc_agt_dtl_his where batch_no = '%s' and hope_date = '%s' and col_inst = '%s' and agt_num = %d", batch_no, hopedate, instno, agt_num );
        /***取总笔数***/
        EXEC SQL SELECT count(*) INTO :cnt
            FROM t_sc_agt_dtl_his
            WHERE batch_no = :batch_no
                AND hope_date = :hopedate
                AND col_inst = :instno
                AND agt_num = :agt_num;
        if( SQLCODE )
        {
            WriteLog( ERR_LVL, "数据库操作出错!sqlcode[%d]\n", SQLCODE );
            strcpy( err_code, "99999" );
            errcode = 99999;
            strcpy( err_msg, "数据库操作出错!" );
            PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode, 0 );
            PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
            return (-1);
        }
	}
	/* 20121214 - End */

	WriteLog( APP_LVL, "sql_str[%s]\n", sql_str );
	WriteLog( APP_LVL, "cnt[%d]\n", cnt );

	EXEC SQL PREPARE agt_dtl_sql FROM :sql_str;
	if( SQLCODE )
	{
		WriteLog( ERR_LVL, "准备游标出错!" );
		strcpy( err_code, "99999" );
		errcode = 99999;
		strcpy( err_msg, "准备游标出错!" );
		PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode, 0 );
		PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
		return (-1);
	}
	EXEC SQL DECLARE agt_dtl_cur SCROLL CURSOR for agt_dtl_sql;
	if( SQLCODE )
	{
		WriteLog( ERR_LVL, "声明游标出错!" );
		strcpy( err_code, "99999" );
		errcode = 99999;
		strcpy( err_msg, "声明游标出错!" );
		PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode, 0 );
		PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
		EXEC SQL FREE agt_dtl_sql;
		return (-1);
	}
	EXEC SQL OPEN agt_dtl_cur;
	if( SQLCODE )
	{
		WriteLog( ERR_LVL, "打开游标出错!" );
		strcpy( err_code, "99999" );
		errcode = 99999;
		strcpy( err_msg, "打开游标出错!" );
		PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode, 0 );
		PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
		EXEC SQL FREE agt_dtl_cur;
		EXEC SQL FREE agt_dtl_sql;
		return (-1);
	}
	sprintf( filename, "%s/NETBANK/TOPB/WappushbreakdownQry%s%s.txt", getenv("PRINTERDIR"), work_date, btchNb );
	sprintf( stxtfile, "%s/NETBANK/TOPB/SWappushbreakdownQry%s%s.txt", getenv("PRINTERDIR"),work_date, btchNb );
	sprintf( stxtfile_mid, "%s/NETBANK/TOPB/SWappushbreakdownQry%s%smid.txt", getenv("PRINTERDIR"),work_date, btchNb );
	sprintf( ftxtfile, "%s/NETBANK/TOPB/FWappushbreakdownQry%s%s.txt", getenv("PRINTERDIR"),work_date, btchNb );
	sprintf( ftxtfile_mid, "%s/NETBANK/TOPB/FWappushbreakdownQry%s%smid.txt", getenv("PRINTERDIR"),work_date, btchNb );
	WriteLog( APP_LVL, "filename[%s]\n", filename );
	fp = fopen( filename, "w+" );
	if( fp == NULL )
	{
		WriteLog( ERR_LVL, "打开文件失败!" );
		strcpy( err_code, "99999" );
		errcode = 99999;
		strcpy( err_msg, "打开文件失败!" );
		PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode, 0 );
		PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
		EXEC SQL CLOSE agt_dtl_cur;
		EXEC SQL FREE agt_dtl_cur;
		EXEC SQL FREE agt_dtl_sql;
		return (-1);
	}
	sfp = fopen( stxtfile, "w+" );
	if( sfp == NULL )
	{
		WriteLog( ERR_LVL, "打开文件失败!" );
		strcpy( err_code, "99999" );
		errcode = 99999;
		strcpy( err_msg, "打开文件失败!" );
		PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode, 0 );
		PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
		EXEC SQL CLOSE agt_dtl_cur;
		EXEC SQL FREE agt_dtl_cur;
		EXEC SQL FREE agt_dtl_sql;
		return (-1);
	}
	ffp = fopen( ftxtfile, "w+" );
	if( ffp == NULL )
	{
		WriteLog( ERR_LVL, "打开文件失败!" );
		strcpy( err_code, "99999" );
		errcode = 99999;
		strcpy( err_msg, "打开文件失败!" );
		PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode, 0 );
		PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
		EXEC SQL CLOSE agt_dtl_cur;
		EXEC SQL FREE agt_dtl_cur;
		EXEC SQL FREE agt_dtl_sql;
		return (-1);
	}
	/***写包头信息***/
	fprintf( fp, "!1|!1|\n" );
	GetPoolDataByName( "BUSIIB", "thver", 0, 0, thver, 0 );
	GetPoolDataByName( "BUSIIB", "thcn2utf8", 0, 0, thcn2utf8, 0 );
	
	fprintf( fp, "%s|%s|!1|!1|!1|\n", thver, thcn2utf8 );
	
	GetPoolDataByName( "BUSIIB", "thpsndMbrCd", 0, 0, thpsndMbrCd, 0 );
	GetPoolDataByName( "BUSIIB", "thpsndAppCd", 0, 0, thpsndAppCd, 0 );
	GetPoolDataByName( "BUSIIB", "thpsndDt", 0, 0, thpsndDt, 0 );
	GetPoolDataByName( "BUSIIB", "thpsndTm", 0, 0, thpsndTm, 0 );
	GetPoolDataByName( "BUSIIB", "thprcvMbrCd", 0, 0, thprcvMbrCd, 0 );
	GetPoolDataByName( "BUSIIB", "thprcvAppCd", 0, 0, thprcvAppCd, 0 );
	fprintf( fp, "%s|%s|%s|%s|%s|%s|\n", "6500", "CBS", thpsndDt, thpsndTm, "0000", "ESB" );
	
	GetPoolDataByName( "BUSIIB", "thmmsgCd", 0, 0, thmmsgCd, 0 );
	GetPoolDataByName( "BUSIIB", "thmcallTyp", 0, 0, thmcallTyp, 0 );
	GetPoolDataByName( "BUSIIB", "thmseqNb", 0, 0, thmseqNb, 0 );
	GetPoolDataByName( "BUSIIB", "thmsndMbrCd", 0, 0, thmsndMbrCd, 0 );
	GetPoolDataByName( "BUSIIB", "thmsndAppCd", 0, 0, thmsndAppCd, 0 );
	GetPoolDataByName( "BUSIIB", "thmsndDt", 0, 0, thmsndDt, 0 );
	GetPoolDataByName( "BUSIIB", "thmsndTm", 0, 0, thmsndTm, 0 );
	GetPoolDataByName( "BUSIIB", "thmrcvMbrCd", 0, 0, thmrcvMbrCd, 0 );
	GetPoolDataByName( "BUSIIB", "thmrcvAppCd", 0, 0, thmrcvAppCd, 0 );
	GetPoolDataByName( "BUSIIB", "thmrefMsgCd", 0, 0, thmrefMsgCd, 0 );
	GetPoolDataByName( "BUSIIB", "thmrefCallTyp", 0, 0, thmrefCallTyp, 0 );
	GetPoolDataByName( "BUSIIB", "thmrefSndMbrCd", 0, 0, thmrefSndMbrCd, 0 );
	GetPoolDataByName( "BUSIIB", "thmrefSndAppCd", 0, 0, thmrefSndAppCd, 0 );
	GetPoolDataByName( "BUSIIB", "thmrefSndDt", 0, 0, thmrefSndDt, 0 );
	GetPoolDataByName( "BUSIIB", "thmrefSeqNb", 0, 0, thmrefSeqNb, 0 );
	fprintf( fp, "CBS1000271|%s|%s|%s|%s|", thmcallTyp, seqNb, "6500", "CBS" );
	fprintf( fp, "%s|%s|%s|%s|%s|", thmsndDt, thmsndTm, "0000", "ESB", thmmsgCd );
	fprintf( fp, "%s|%s|%s|%s|%s|\n", thmcallTyp, thmsndMbrCd, thmsndAppCd, thmsndDt, thmseqNb );
	
	GetPoolDataByName( "BUSIIB", "thsretCd", 0, 0, thsretCd, 0 );
	GetPoolDataByName( "BUSIIB", "thsdesc", 0, 0, thsdesc, 0 );
	GetPoolDataByName( "BUSIIB", "thslocation", 0, 0, thslocation, 0 );
	GetPoolDataByName( "BUSIIB", "thsmbrCd", 0, 0, thsmbrCd, 0 );
	GetPoolDataByName( "BUSIIB", "thsappCd", 0, 0, thsappCd, 0 );
	
	fprintf( fp, "%s|%s|%s|%s|%s|\n", "000000", thsdesc, thslocation, "6500", "NNS" );
	
	fprintf( fp, "!1|\n" );
	cnt = 1;
	fprintf( ffp, "收款账号,收款户名,金额,交易状态" );
        fwrite("",1, 1,ffp);
        fwrite("\n",1, 1,ffp);
	fprintf( sfp, "收款账号,收款户名,金额,交易状态" );
        fwrite("",1, 1,sfp);
        fwrite("\n",1, 1,sfp);
	while(1)
	{
		ag_tx_seqno = 0;
		rb_amt=0;
		memset( flag, 0, sizeof( flag ) );
		memset( stat, 0, sizeof( stat ) );
		memset( col_acc, 0, sizeof( col_acc ) );
		memset( col_crop_name, 0, sizeof( col_crop_name ) );
		memset( remake2, 0, sizeof( remake2 ) );
		memset( dtl_msg, 0, sizeof( dtl_msg ) );
		memset( errRes, 0, sizeof( errRes ) );
		EXEC SQL FETCH ABSOLUTE :cnt agt_dtl_cur INTO :col_acc, :col_crop_name, :rb_amt, :remake2, :flag, :dtl_msg;
		if( sqlca.sqlcode == 100 )
		{
			if( cnt == 1 )
			{
				strcpy( err_code, "20009" );
				errcode = 99999;
				strcpy( err_msg, "要查询的记录不存在!" );
				PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode, 0 );
				PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
				EXEC SQL CLOSE agt_dtl_cur;
				EXEC SQL FREE agt_dtl_cur;
				EXEC SQL FREE agt_dtl_sql;
				fclose( fp );
				return (-1);
			}
			break;
		}
		else if( sqlca.sqlcode < 0 )
		{
			strcpy( err_code, "20028" );
			errcode = 20028;
			strcpy( err_msg, "代收工资查询失败!" );
			PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode, 0 );
			PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
			EXEC SQL CLOSE agt_dtl_cur;
			EXEC SQL FREE agt_dtl_cur;
			EXEC SQL FREE agt_dtl_sql;
			fclose( fp );
			return (-1);
		}
		if( flag[2] == 'M' )
			stat[0] = '1';
		else if( flag[2] == 'A' || flag[2] == 'G' )
			stat[0] = '3';
		else if( flag[2] == 'B' )
		{
			stat[0] = '2';
			strcpy( errRes, "余额不足" );
		}
		else if( flag[2] == 'C' )
		{
			stat[0] = '2';
			strcpy( errRes, "账户状态不正确" );
		}
		else if( flag[2] == 'D' )
		{
			stat[0] = '2';
			strcpy( errRes, "未签约" );
		}
		else if( flag[2] == 'E' )
		{
			stat[0] = '2';
			strcpy( errRes, "交易账号不存在(或证件号码不符)" );
		}
		else if( flag[2] == 'F' )
		{
			stat[0] = '2';
			strcpy( errRes, "明细总金额不等于入账总金额" );
		}
		else if( flag[2] == 'H' )
		{
			stat[0] = '2';
			strcpy( errRes, "G/L账户不存在" );
		}
		else if( flag[2] == 'I' )
		{
			stat[0] = '2';
			strcpy( errRes, "客户名称检查失败" );
		}
		else if( flag[2] == 'J' )
		{
			stat[0] = '2';
			strcpy( errRes, "账户已销户" );
		}
		else if( flag[2] == 'K' )
		{
			stat[0] = '2';
			strcpy( errRes, "手续费率/金额有误" );
		}
		else if( flag[2] == 'L' )
		{
			stat[0] = '2';
			strcpy( errRes, "其它原因" );
		}
		else if( flag[2] == 'N' )
		{
			stat[0] = '2';
			strcpy( errRes, "交易失败" );
		}
		else
		{
			stat[0] = '2';
			strcpy( errRes, "未知错误" );
		}

		if( strlen( dtl_msg ) != 0 )
		{
			memset( errRes, 0x00, sizeof( errRes ) );
			strcpy( errRes, dtl_msg );
		}
		rtrim( remake2 );
		rtrim( errRes );
		rtrim(col_acc);
		rtrim(col_crop_name);
		rtrim(dtl_msg);
		if(stat[0] == '1' )
		{
			fprintf( sfp, "\'%s,%s,%-10.2f,%s", col_acc,col_crop_name,rb_amt,errRes );
			fwrite("\",1, 1,sfp);
			fwrite("\n",1, 1,sfp);
		}
		else
		{
			fprintf( ffp, "\'%s,%s,%-10.2f,%s", col_acc,col_crop_name,rb_amt,errRes );
			fwrite("",1, 1,ffp);
			fwrite("\n",1, 1,ffp);
		}
		cnt ++;
	}
	EXEC SQL CLOSE agt_dtl_cur;
	EXEC SQL FREE agt_dtl_cur;
	EXEC SQL FREE agt_dtl_sql;
	fclose( fp );
	fclose( sfp );
	fclose( ffp );
	
	ret = zbasefile(stxtfile, stxtfile_mid);
	if( ret !=0 )
	{
		WriteLog( ERR_LVL, "文件失败!" );
		strcpy( err_code, "99999" );
		errcode = 99999;
		strcpy( err_msg, "生成文件失败!" );
		PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode, 0 );
		PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
		return -1;
	}
	ret = zbasefile(ftxtfile, ftxtfile_mid);
	if( ret !=0 )
	{
		WriteLog( ERR_LVL, "文件失败!" );
		strcpy( err_code, "99999" );
		errcode = 99999;
		strcpy( err_msg, "生成文件失败!" );
		PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode, 0 );
		PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
		return -1;
	}

	/***文件格式转换***/
	memset( cfgfile, 0x00, sizeof( cfgfile ) );
	sprintf( cfgfile, "%s/etc/%s", getenv( "HOME" ), "xml700.cfg" );
	WriteLog( APP_LVL, "cfgfile[%s]\n", cfgfile );

	memset( xmloutput, 0x00, sizeof( xmloutput ) );
	sprintf( xmloutput, "%s/print/NETBANK/TOPB/CBS1000271%s%s.xml", getenv( "HOME" ), work_date, btchNb );
	sprintf( ftpoutput, "%s/print/NETBANK/TOPB/CBS1000271z%s%s.xml", getenv( "HOME" ), work_date, btchNb );
	WriteLog( APP_LVL, "xmloutput[%s]\n", xmloutput );

	memset( cmd, 0x00, sizeof( cmd ) );
        sprintf( cmd, "XmlExchTxt 2 %s CBS0000461 %s %s UTF-8 1>null 2>&1", cfgfile,xmloutput, filename );
        WriteLog( APP_LVL, "cmd[%s]\n", cmd );
        ret = system( cmd );
        if( ret )
        {
                WriteLog( ERR_LVL, "txt文件转换出错!" );
                strcpy( err_code, "99999" );
        errcode = 99999;
                sprintf( err_msg, "txt文件转换出错!" );
                PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode, 0 );
                PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
        return ( -1 );
        }

	
	fp = fopen( xmloutput, "r+" );
	if( fp == NULL )
	{
		WriteLog( ERR_LVL, "打开文件失败!" );
		strcpy( err_code, "99999" );
		errcode = 99999;
		strcpy( err_msg, "打开文件失败!" );
		PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode, 0 );
		PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
		return -1;
	}
	sfp = fopen( stxtfile_mid, "r" );
	if( sfp == NULL )
	{
		WriteLog( ERR_LVL, "打开文件失败!" );
		strcpy( err_code, "99999" );
		errcode = 99999;
		strcpy( err_msg, "打开文件失败!" );
		PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode, 0 );
		PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
		return -1;
	}
	ffp = fopen( ftxtfile_mid, "r" );
	if( ffp == NULL )
	{
		WriteLog( ERR_LVL, "打开文件失败!" );
		strcpy( err_code, "99999" );
		errcode = 99999;
		strcpy( err_msg, "打开文件失败!" );
		PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode, 0 );
		PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
		return -1;
	}
	memset( ftpfilename, 0x00, sizeof( ftpfilename ) );
	sprintf( ftpfilename, "CBS1000271%s%s.txt", work_date, btchNb );
	sprintf( ftpfilename1, "%s/NETBANK/TOPB/CBS1000271%s%s.txt", getenv("PRINTERDIR"), work_date, btchNb );
	WriteLog( APP_LVL, "ftpfilename[%s]\n", ftpfilename );
	fw = fopen( ftpfilename1, "w" );
	if( ffp == NULL )
	{
		WriteLog( ERR_LVL, "打开文件失败!" );
		strcpy( err_code, "99999" );
		errcode = 99999;
		strcpy( err_msg, "打开文件失败!" );
		PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode, 0 );
		PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
		return -1;
	}
	if( (ret = fread( buff, 1,  sizeof(buff)-1 ,fp ) ) == NULL)
	{
		WriteLog( ERR_LVL, "读取文件失败!" );
		strcpy( err_code, "99999" );
		errcode = 99999;
		strcpy( err_msg, "读取文件失败!" );
		PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode, 0 );
		PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
		return -1;
	}
	if((p1=(char*)strstr((char*)buff,"<response>")) == NULL )
	{
		WriteLog( ERR_LVL, "读取文件失败![%s]",buff );
		strcpy( err_code, "99999" );
		errcode = 99999;
		strcpy( err_msg, "读取文件失败!" );
		PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode, 0 );
		PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
		return -1;
	}
	len1 = p1 - buff+10;
		WriteLog( ERR_LVL, "sssssss![%s][%d][%d]",buff,len,strlen(buff) );
		WriteLog( ERR_LVL, "sssssss![%s]",buff+len1 );
	if( fwrite(buff,1, len1,fw) !=len1 )
	{
		WriteLog( ERR_LVL, "写入文件失败!" );
		strcpy( err_code, "99999" );
		errcode = 99999;
		strcpy( err_msg, "写入文件失败!" );
		PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode, 0 );
		PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
		return -1;
	}
	memset(tmpbuff,0,sizeof(tmpbuff));
	sprintf(tmpbuff,"<stt>%s</stt><errMsg></errMsg>",btchstat);
	if( fwrite(tmpbuff,1, strlen(tmpbuff),fw) ==0 )
	{
		WriteLog( ERR_LVL, "写入文件失败!" );
		strcpy( err_code, "99999" );
		errcode = 99999;
		strcpy( err_msg, "写入文件失败!" );
		PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode, 0 );
		PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
		return -1;
	}
	if( fwrite("\n        <successFileName>",1,26 ,fw) !=26 )
	{
		WriteLog( ERR_LVL, "写入文件失败!" );
		strcpy( err_code, "99999" );
		errcode = 99999;
		strcpy( err_msg, "写入文件失败!" );
		PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode, 0 );
		PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
		return -1;
	}
	i=0;
	memset(tmpbuff,0,sizeof(tmpbuff));
	while( len = fread(tmpbuff, 1, sizeof(tmpbuff)-1, sfp ) )
	{
		 WriteLog( ERR_LVL, "xxxxxxx[%s][%d]!",tmpbuff,len );
		
		if( fwrite(tmpbuff,1, strlen(tmpbuff),fw) ==0 )
		{
			WriteLog( ERR_LVL, "写入文件失败!" );
			strcpy( err_code, "99999" );
			errcode = 99999;
			strcpy( err_msg, "写入文件失败!" );
			PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode, 0 );
			PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
			return -1;
		}
		if(len < sizeof(tmpbuff)-1 )
		{
			break;
		}
		memset(tmpbuff,0,sizeof(tmpbuff));
		if(i++>100)
		{
			WriteLog( ERR_LVL, "写入文件失败!" );
			strcpy( err_code, "99999" );
			errcode = 99999;
			strcpy( err_msg, "写入文件失败!" );
			PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode, 0 );
			PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
			return -1;
		}
		 WriteLog( ERR_LVL, "xxxxxxx[%s]!",tmpbuff );
	}
		 WriteLog( ERR_LVL, "xxxxxxx[%s]!",tmpbuff );
	if((len= fwrite("</successFileName>",1,18 ,fw)) !=18 )
	{
		WriteLog( ERR_LVL, "写入文件失败![%d]",len );
		strcpy( err_code, "99999" );
		errcode = 99999;
		strcpy( err_msg, "写入文件失败!" );
		PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode, 0 );
		PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
		return -1;
	}
		 WriteLog( ERR_LVL, "xxxxxxx[%s]!",tmpbuff );
	if( fwrite("\n        <failFileName>",1,23 ,fw) !=23 )
	{
		WriteLog( ERR_LVL, "写入文件失败!" );
		strcpy( err_code, "99999" );
		errcode = 99999;
		strcpy( err_msg, "写入文件失败!" );
		PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode, 0 );
		PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
		return -1;
	}
	i=0;
	memset(tmpbuff,0,sizeof(tmpbuff));
		 WriteLog( ERR_LVL, "xxxxxxx[%s]!",tmpbuff );
	while( len = fread(tmpbuff, 1, sizeof(tmpbuff)-1, ffp ) )
	{
		
		 WriteLog( ERR_LVL, "xxxxxxx[%s][%d]!",tmpbuff,len );
		if( fwrite(tmpbuff,1, strlen(tmpbuff),fw) ==0 )
		{
			WriteLog( ERR_LVL, "写入文件失败!" );
			strcpy( err_code, "99999" );
			errcode = 99999;
			strcpy( err_msg, "写入文件失败!" );
			PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode, 0 );
			PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
			return -1;
		}
		if(len < sizeof(tmpbuff)-1)
		{
		 WriteLog( ERR_LVL, "xxxxxxx[%s][%d]!",tmpbuff,len );
			break;
		}
		memset(tmpbuff,0,sizeof(tmpbuff));
		if(i++>100)
		{
			WriteLog( ERR_LVL, "写入文件失败!" );
			strcpy( err_code, "99999" );
			errcode = 99999;
			strcpy( err_msg, "写入文件失败!" );
			PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode, 0 );
			PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
			return -1;
		}
	}
		 WriteLog( ERR_LVL, "xxxxxxx[%s][%d]!",tmpbuff,len );
	if( fwrite("</failFileName>\n",1,16 ,fw) !=16 )
	{
		WriteLog( ERR_LVL, "写入文件失败!" );
		strcpy( err_code, "99999" );
		errcode = 99999;
		strcpy( err_msg, "写入文件失败!" );
		PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode, 0 );
		PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
		return -1;
	}
	if( fwrite(buff+len1,1, strlen(buff+len1) ,fw) !=strlen(buff+len1) )
	{
		 WriteLog( ERR_LVL, "xxxxxxx[%s][%d]!",tmpbuff,len );
		WriteLog( ERR_LVL, "写入文件失败!" );
		strcpy( err_code, "99999" );
		errcode = 99999;
		strcpy( err_msg, "写入文件失败!" );
		PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode, 0 );
		PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
		return -1;
	}
	fclose(fp);
	fclose(fw);
	fclose(sfp);
	fclose(ffp);
	
	/***发送文件***/
	ret = FtpFileName( "7000000001", 1, ftpfilename, ftpfilename, ftpfilename );
	if( ret )
	{
		WriteLog( ERR_LVL, "Ftp文件[%s]失败!\n", ftxtfile );
		strcpy( err_code, "99999" );
		errcode = 99999;
		strcpy( err_msg, "Ftp文件[%s]失败!", ftxtfile );
 		PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode, 0 );
		PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
		return (-1);
	}

	WriteLog( APP_LVL, "over!\n" );
	PutPoolDataByName( "BUSIIB", "transfilename", 0, 0, ftpfilename, 0 );
	PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, "0", 0 );
	return ( 0 );
}
