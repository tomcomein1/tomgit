/***********************************************************************
 * Trans       : 南充燃气费代收
 * Function    :
 * Input       : 
 * Output      : 
 * Return      : 0 - 成功; -1 - 失败
 * Description :
 * ------------------------------------------------------------------------
 * Author   Action  Date                Content
 * MSJ      create  2012-10-11
 **************************************************************************/

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/types.h>
#include <sys/select.h>
#include <sys/types.h>
#include <errno.h>
#include <sys/stat.h>
#include <errno.h>
#include <sys/stat.h>
#include <time.h>
#include <unistd.h>
#include "atmi.h"       /* TUXEDO  Header File */
#include "fml32.h"
#ifdef ORACLE_DATABASE
EXEC SQL include "pbranchdb.h";
#else
#include "pbranchdb.h"
#endif
#include "pbconstval.h"
#include "pbstructdef.h"
#include "pbvarmacro.h"
#include "pberrlog.h"
#include "pbglbvardef.h"
#include "pbbasefunc.h"
#include "userlog.h"


/* 中间业务代收费管理表 */
$struct s_agt_mgmt
{
    char agt_code[10+1];     /* 代理代码 */
    char agt_busi[60+1];     /* 代理类别 */
    char agt_acc[25+1];      /* 代理客户清算账号 */
    char fee_flag[2+1];      /* 手续费类型 */
                                 /* 0 - 按比率收取 */
                                 /* 1 - 固定额度收取 */
    int fee_rate;            /* 收费比率 */
    double fee_amt;          /* 固定额度手续费 */
    double fee_min;          /* 收取手续费最小额 */
    double fee_max;          /* 收取手续费最大额 */
    char sdm_acc[25+1];      /* 代理客户行内结算账号 */
    char bakeup1[20+1];      /* 保留字段 */   
    char bakeup2[60+1];      /* 保留字段 */ 
    char bakeup3[60+1];      /* 保留字段 */ 
};

struct PKG_CBS0000120 {
	char	cardAcctFlg[2+1];
	char	payCardAcctNb[32+1];
	char	payCurTyp[6+1];
	char	payCashFlg[2+1];
	char	payCustNm[128+1];
	char	payBrchID[32+1];
	char	payBrchNm[128+1];
	char	chkPwdFlg[2+1];
	char	pwdTyp[2+1];
	char	pwd[128+1];
	char	transferChnl[2+1];
	char	fastFlg[2+1];
	char	manualFlg[2+1];
	char	rcvAcct[32+1];
	char	rcvCustNm[128+1];
	char	rcvAcctSvcr[32+1];
	char	rcvAcctSvcrNm[128+1];
	char	transAmt[16+1];
};

struct PKG_CBS0000121 {
	char	needTotalFee[16+1];
	char	needPostFee[16+1];
	char	needManFee[16+1];
};


/***********************************************************************
 * Trans       : 南充燃气费代收
 * Function    : 客户网上支付
 * Input       : 
 * Output      : 
 * Return      : 0 - 成功; -1 - 失败
 * Description :
 * ------------------------------------------------------------------------
 * Author   Action  Date                Content
 * MSJ      create  2012-10-11
 **************************************************************************/
long gas_pay()
{
    EXEC SQL BEGIN DECLARE SECTION;
    char out_inst[10+1];
    char inn_inst[10+1];
    double fee;
    char pb_date[10+1];
    char pb_seqno[10+1];
    char fee_acc[25+1];
    EXEC SQL END DECLARE SECTION;
    char summ_no[20+1];
    char out_acc[32+1];
    char in_acc[32+1];
    char fee_flag[2+1];
    char c_tran_amt[20+1];
    char c_fee[20+1];
    char s_avalbal[20+1];
    char s_bal[20+1];
    char s_real_amt[20+1];
    char core_err[60+1];
    char curr_type[6+1];
    char dist_flag[1+1];
    double tran_amt;
    double avalbal;
    double bal;
    double real_amt;
    long ret;
    long core_err_no;

    memset( out_acc, 0, sizeof( out_acc));
    memset( in_acc, 0, sizeof( in_acc));
    memset( fee_acc, 0, sizeof( fee_acc));
    memset( fee_flag, 0, sizeof( fee_flag));
    memset( c_fee, 0, sizeof( c_fee));
    memset( c_tran_amt, 0, sizeof( c_tran_amt));
    memset( summ_no, 0, sizeof( summ_no));
    memset( s_avalbal, 0, sizeof( s_avalbal));
    memset( s_bal, 0, sizeof( s_bal));
    memset( s_real_amt, 0, sizeof( s_real_amt));
    memset( core_err, 0, sizeof( core_err));
    memset( curr_type, 0, sizeof( curr_type));
    memset( out_inst, 0, sizeof( out_inst));
    memset( inn_inst, 0, sizeof( inn_inst));
    memset( dist_flag, 0, sizeof( dist_flag));
    memset( pb_date, 0, sizeof( pb_date));
    memset( pb_seqno, 0, sizeof( pb_seqno));


    tran_amt = 0.00;
    fee = 0.00;
    avalbal =0.00;
    bal =0.00;
    ret = 0;
    real_amt = 0.00;
    core_err_no = 0;


    /*柜员*/
    PutPoolDataByName( "ABSHEAD", "_tlr_no", 0, 0, "888886", 0);
    /*机构*/
    /*转出开户行*/
    GetPoolDataByName(  "ABSHEAD", "organ_no",0, 0, out_inst, 0);
    rtrim(out_inst);
    WriteLog( APP_LVL, "out_inst[%s]", out_inst);
    /*转入开户行*/
    GetPoolDataByName(  "CBS", "BatNo",0, 0, inn_inst, 0);
    rtrim(inn_inst);
    WriteLog( APP_LVL, "inn_inst[%s]", inn_inst);
    /*取核心日期*/
    PayGetCoreDate( pb_date);
    /*取交易流水*/
    GetPoolDataByName( "ABSHEAD", "_seq_no", 0, 0, pb_seqno, 0);
    /*渠道*/
    PutPoolDataByName( "ABSHEAD", "chnl_no", 0, 0, "W", 0);
    /*计算跨度*/
    ret = ChkInputInstScope ( inn_inst, out_inst);
    if ( ret < 0)
    {
    	WriteLog ( ERR_LVL, "取跨度失败");
    	strcpy( core_err, "取跨度失败");
    	core_err_no = 99999;
    	PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char*)&core_err_no,0);
    	PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, core_err,0);
    	return ( -1);
    }
    else
    {
    	WriteLog ( ERR_LVL, "跨度为%d", ret);
    	sprintf ( dist_flag, "%d", ret);
    	WriteLog ( ERR_LVL, "跨度dist_flag[%c]", dist_flag[0]);
    }

    /*核心记账属性*/
    PutPoolDataByName( "CBS", "AccSign", 0, 0, "0", 0);    /*0-记账 1-开户*/
    /*摘要*/
    PutPoolDataByName( "CBS", "Summary", 0, 0, "南充燃气缴费", 0);
    /*摘要码*/
    strcpy( summ_no,"200");
    PutPoolDataByName( "CBS", "KeyData", 0, 0, summ_no, 0);
    /*币种*/
    GetPoolDataByName( "BUSIIB", "payCurTyp", 0, 0, curr_type, 0 );
    PutPoolDataByName( "BUSIIB", "currencyTyp", 0, 0, curr_type, 0 );
    ret = NetParaConv( "currencyTyp|cashFlg|pwdTyp");
    if( ret)
    {
        WriteLog( ERR_LVL, "网银参数转换错");
        strcpy( core_err, "网银参数转换错");
        core_err_no = -1;
        PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, "39999", 0 );
        PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char*)&core_err_no,0);
        PutPoolDataByName( "BUSIIB", "thsdesc", 0, 0, core_err, 0 );
        PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, core_err,0);
        return( -1);
    }
    GetPoolDataByName( "PAGTBUF", "currtype", 0, 0, curr_type, 0);
    PutPoolDataByName( "CBS", "CurrType", 0, 0, curr_type, 0);

    GetPoolDataByName( "BUSIIB", "payAcct", 0, 0, out_acc, 0);


    /*手续费*/
    GetPoolDataByName( "BUSIIB", "fee", 0, 0, c_fee, 0);
    GetPoolDataByName( "BUSIIB", "feeFlg", 0, 0, fee_flag, 0);
    fee = atof( c_fee );

    if( fee<0.001 )		/*不收手续费*/
    {
        fee = 0.00;
        PutPoolDataByName( "CBS", "SubTranCode", 0, 0, "01", 0);
    }
	else
        PutPoolDataByName( "CBS", "SubTranCode", 0, 0, "02", 0);

    /*账号*/
    GetPoolDataByName( "BUSIIB", "payAcct", 0, 0, out_acc, 0);
    GetPoolDataByName( "BUSIIB", "rcvAcct", 0, 0, in_acc, 0);
    WriteLog( APP_LVL, "out_acc[%s]in_acc[%s]", out_acc, in_acc);

    PutPoolDataByName( "CBS", "Account", 0, 0, out_acc, 0);
    PutPoolDataByName( "CBS", "Account", 0, 1, in_acc, 0);
    PutPoolDataByName( "BUSIIB", "payCardAcctNb", 0, 0, out_acc, 0);
    PutPoolDataByName( "BUSIIB", "payCardAcctNb", 0, 1, in_acc, 0);

    /*取行内结算账号*/
    EXEC SQL SELECT sdm_acc INTO :fee_acc
        FROM t_agt_mgmt
        WHERE agt_code = "CBS1000620";
    if( sqlca.sqlcode)
    {
        WriteLog( ERR_LVL, "取行内结算账号失败[%d]", sqlca.sqlcode);
        core_err_no = 99999;
        sprintf( core_err, "数据库检索失败[%d]", sqlca.sqlcode );
        PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&core_err_no, 0 );
        PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, core_err, 0 );
        return ( -1);
    }

    /*金额*/
    GetPoolDataByName( "BUSIIB", "transAmt", 0, 0, c_tran_amt, 0);
    tran_amt = atof( c_tran_amt);
    PutPoolDataByName( "CBS", "Amt", 0, 0, (char*)&tran_amt, 0);
    PutPoolDataByName( "CBS", "Amt", 0, 1, (char*)&tran_amt, 0);


    PutPoolDataByName( "ABSHEAD", "organ_no", 0, 0, out_inst, 0);
    PutPoolDataByName( "ABSHEAD", "query_inst", 0, 0, inn_inst, 0);
    PutPoolDataByName( "CBS", "distflag", 0, 0, dist_flag, 0);
    PutPoolDataByName( "BUSIIB", "feeFlg", 0, 0, fee_flag, 0);
    PutPoolDataByName( "CBS", "Phone", 0, 0, fee_acc, 0);
    PutPoolDataByName( "CBS", "Fee1", 0, 0, (char *)&fee, 0);

	/* 收手续费添加相应会计分录 */
	if( fee<0.001 )
    {
        PutPoolDataByName( "CBS", "Account", 0, 2, fee_acc, 0);
        PutPoolDataByName( "CBS", "Account", 0, 3, in_acc, 0);
        PutPoolDataByName( "BUSIIB", "payCardAcctNb", 0, 2, fee_acc, 0);
        PutPoolDataByName( "BUSIIB", "payCardAcctNb", 0, 3, in_acc, 0);
        PutPoolDataByName( "CBS", "Amt", 0, 2, (char*)&fee, 0);
        PutPoolDataByName( "CBS", "Amt", 0, 3, (char*)&fee, 0);
	}

    /*登记机构及手续费信息*/
    EXEC SQL UPDATE t_pb_net_dtl
        SET payinstno = :out_inst, 
            rcvinstno = :inn_inst, 
            accinstno = :out_inst,
            fee = :fee,
            fee1 = :fee
        WHERE trandate = :pb_date
        AND seqno = :pb_seqno;
    if( sqlca.sqlcode || sqlca.sqlerrd[2] != 1)
    {
        WriteLog( ERR_LVL, "update net_dtl err[%d][%d]", sqlca.sqlcode, sqlca.sqlerrd[2]);
        WriteLog( ERR_LVL, "pb_date[%s]pb_seqno[%s]", pb_date, pb_seqno);
        strcpy( core_err, "数据库操作失败");
        core_err_no = -1;
        PutPoolDataByName( "BUSIIB", "thsdesc", 0, 0, core_err, 0);
        PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char*)&core_err_no,0);
        PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, core_err,0);
        return( -1);
    }

    /*实际收费额*/
    real_amt = tran_amt + fee;
    sprintf( s_real_amt, "%.2f", real_amt);
    PutPoolDataByName( "BUSIIB", "realTotalFee", 0, 0, s_real_amt, 0);

    PutPoolDataByName( "BUSIIB", "realManFee", 0, 0, c_fee, 0);
    PutPoolDataByName( "BUSIIB", "realPostFee", 0, 0, c_tran_amt, 0);

    /*预计算转出账户余额 可用余额*/
    GetPoolDataByName( "BUSIIB", "payAvlBal", 0, 0, s_avalbal, 0);
    WriteLog( APP_LVL, "s_avalbal before[%s]", s_avalbal);
    avalbal = atof(s_avalbal);
    if( fee > 0.0)
        avalbal = avalbal - ( tran_amt + fee);
    else
        avalbal = avalbal - tran_amt;
    memset( s_avalbal, 0, sizeof( s_avalbal));
    sprintf( s_avalbal, "%.2f", avalbal);
    WriteLog( APP_LVL, "s_avalbal after[%s]", s_avalbal);
    PutPoolDataByName( "BUSIIB", "payAvlBal", 0, 0, s_avalbal, 0);

    GetPoolDataByName( "BUSIIB", "payBal", 0, 0, s_bal, 0);
    WriteLog( APP_LVL, "s_bal before[%s]", s_bal);
    bal =  atof( s_bal);
    if( fee > 0.0)
        bal = bal - ( tran_amt + fee);
    else
        bal = bal - tran_amt;
    memset( s_bal, 0, sizeof( s_bal));
    sprintf( s_bal, "%.2f", bal);
    WriteLog( APP_LVL, "s_bal after[%s]", s_bal);
    PutPoolDataByName( "BUSIIB", "payBal", 0, 0, s_bal, 0);


    return( 0);

    
    
}


/***********************************************************************
 * Trans       : 南充燃气费代收
 * Function    : 客户退款
 * Input       : 
 * Output      : 
 * Return      : 0 - 成功; -1 - 失败
 * Description :
 * ------------------------------------------------------------------------
 * Author   Action  Date                Content
 * MSJ      create  2012-10-11
 **************************************************************************/
int gas_payback()
{
    EXEC SQL BEGIN DECLARE SECTION;
    char out_inst[10+1];
    char inn_inst[10+1];
    double fee;
    char pb_date[10+1];
    char pb_seqno[10+1];
    char fee_acc[25+1];
    EXEC SQL END DECLARE SECTION;
    char summ_no[20+1];
    char out_acc[32+1];
    char in_acc[32+1];
    char fee_flag[2+1];
    char c_tran_amt[20+1];
    char c_fee[20+1];
    char s_avalbal[20+1];
    char s_bal[20+1];
    char s_real_amt[20+1];
    char core_err[60+1];
    char curr_type[6+1];
    char dist_flag[1+1];
    double tran_amt;
    double avalbal;
    double bal;
    double real_amt;
    long ret;
    long core_err_no;

    memset( out_acc, 0, sizeof( out_acc));
    memset( in_acc, 0, sizeof( in_acc));
    memset( fee_acc, 0, sizeof( fee_acc));
    memset( fee_flag, 0, sizeof( fee_flag));
    memset( c_fee, 0, sizeof( c_fee));
    memset( c_tran_amt, 0, sizeof( c_tran_amt));
    memset( summ_no, 0, sizeof( summ_no));
    memset( s_avalbal, 0, sizeof( s_avalbal));
    memset( s_bal, 0, sizeof( s_bal));
    memset( s_real_amt, 0, sizeof( s_real_amt));
    memset( core_err, 0, sizeof( core_err));
    memset( curr_type, 0, sizeof( curr_type));
    memset( out_inst, 0, sizeof( out_inst));
    memset( inn_inst, 0, sizeof( inn_inst));
    memset( dist_flag, 0, sizeof( dist_flag));
    memset( pb_date, 0, sizeof( pb_date));
    memset( pb_seqno, 0, sizeof( pb_seqno));


    tran_amt = 0.00;
    fee = 0.00;
    avalbal =0.00;
    bal =0.00;
    ret = 0;
    real_amt = 0.00;
    core_err_no = 0;


    /*柜员*/
    PutPoolDataByName( "ABSHEAD", "_tlr_no", 0, 0, "888886", 0);
    /*机构*/
    /*转出开户行*/
    GetPoolDataByName(  "ABSHEAD", "organ_no",0, 0, out_inst, 0);
    rtrim(out_inst);
    WriteLog( APP_LVL, "out_inst[%s]", out_inst);
    /*转入开户行*/
    GetPoolDataByName(  "CBS", "BatNo",0, 0, inn_inst, 0);
    rtrim(inn_inst);
    WriteLog( APP_LVL, "inn_inst[%s]", inn_inst);
    /*取核心日期*/
    PayGetCoreDate( pb_date);
    /*取交易流水*/
    GetPoolDataByName( "ABSHEAD", "_seq_no", 0, 0, pb_seqno, 0);
    /*渠道*/
    PutPoolDataByName( "ABSHEAD", "chnl_no", 0, 0, "W", 0);
    /*计算跨度*/
    ret = ChkInputInstScope ( inn_inst, out_inst);
    if ( ret < 0)
    {
    	WriteLog ( ERR_LVL, "取跨度失败");
    	strcpy( core_err, "取跨度失败");
    	core_err_no = 99999;
    	PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char*)&core_err_no,0);
    	PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, core_err,0);
    	return ( -1);
    }
    else
    {
    	WriteLog ( ERR_LVL, "跨度为%d", ret);
    	sprintf ( dist_flag, "%d", ret);
    	WriteLog ( ERR_LVL, "跨度dist_flag[%c]", dist_flag[0]);
    }

    /*核心记账属性*/
    PutPoolDataByName( "CBS", "AccSign", 0, 0, "0", 0);    /*0-记账 1-开户*/
    /*摘要*/
    PutPoolDataByName( "CBS", "Summary", 0, 0, "南充燃气缴费", 0);
    /*摘要码*/
    strcpy( summ_no,"200");
    PutPoolDataByName( "CBS", "KeyData", 0, 0, summ_no, 0);
    /*币种*/
    GetPoolDataByName( "BUSIIB", "payCurTyp", 0, 0, curr_type, 0 );
    PutPoolDataByName( "BUSIIB", "currencyTyp", 0, 0, curr_type, 0 );
    ret = NetParaConv( "currencyTyp|cashFlg|pwdTyp");
    if( ret)
    {
        WriteLog( ERR_LVL, "网银参数转换错");
        strcpy( core_err, "网银参数转换错");
        core_err_no = -1;
        PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, "39999", 0 );
        PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char*)&core_err_no,0);
        PutPoolDataByName( "BUSIIB", "thsdesc", 0, 0, core_err, 0 );
        PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, core_err,0);
        return( -1);
    }
    GetPoolDataByName( "PAGTBUF", "currtype", 0, 0, curr_type, 0);
    PutPoolDataByName( "CBS", "CurrType", 0, 0, curr_type, 0);

    GetPoolDataByName( "BUSIIB", "payAcct", 0, 0, out_acc, 0);


    /*手续费*/
    GetPoolDataByName( "BUSIIB", "fee", 0, 0, c_fee, 0);
    GetPoolDataByName( "BUSIIB", "feeFlg", 0, 0, fee_flag, 0);
    fee = atof( c_fee );

    if( fee_flag[0] == '0')		/*不收手续费*/
    {
        real_amt = tran_amt;
    }
    else
    {
        real_amt = tran_amt + fee;
    }

    /*交易子码*/
    PutPoolDataByName( "CBS", "SubTranCode", 0, 0, "22", 0);

    /*账号*/
    GetPoolDataByName( "BUSIIB", "payAcct", 0, 0, out_acc, 0);
    GetPoolDataByName( "BUSIIB", "rcvAcct", 0, 0, in_acc, 0);
    WriteLog( APP_LVL, "out_acc[%s]in_acc[%s]", out_acc, in_acc);

    PutPoolDataByName( "CBS", "Account", 0, 0, out_acc, 0);
    PutPoolDataByName( "CBS", "Account", 0, 1, in_acc, 0);
    PutPoolDataByName( "BUSIIB", "payCardAcctNb", 0, 0, out_acc, 0);
    PutPoolDataByName( "BUSIIB", "payCardAcctNb", 0, 1, in_acc, 0);

    /*取行内结算账号*/
    EXEC SQL SELECT sdm_acc INTO :fee_acc
        FROM t_agt_mgmt
        WHERE agt_code = "CBS1000620";
    if( sqlca.sqlcode)
    {
        WriteLog( ERR_LVL, "取行内结算账号失败[%d]", sqlca.sqlcode);
        core_err_no = 99999;
        sprintf( core_err, "数据库检索失败[%d]", sqlca.sqlcode );
        PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&core_err_no, 0 );
        PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, core_err, 0 );
        return ( -1);
    }

    PutPoolDataByName( "CBS", "Account", 0, 2, in_acc, 0);
    PutPoolDataByName( "CBS", "Account", 0, 3, fee_acc, 0);
    PutPoolDataByName( "BUSIIB", "payCardAcctNb", 0, 2, in_acc, 0);
    PutPoolDataByName( "BUSIIB", "payCardAcctNb", 0, 3, fee_acc, 0);

    /*金额*/
    GetPoolDataByName( "BUSIIB", "transAmt", 0, 0, c_tran_amt, 0);
    tran_amt = atof( c_tran_amt);
    PutPoolDataByName( "CBS", "Amt", 0, 0, (char*)&real_amt, 0);
    PutPoolDataByName( "CBS", "Amt", 0, 1, (char*)&tran_amt, 0);
    PutPoolDataByName( "CBS", "Amt", 0, 2, (char*)&fee, 0);
    PutPoolDataByName( "CBS", "Amt", 0, 3, (char*)&fee, 0);


    PutPoolDataByName( "ABSHEAD", "organ_no", 0, 0, out_inst, 0);
    PutPoolDataByName( "ABSHEAD", "query_inst", 0, 0, inn_inst, 0);
    PutPoolDataByName( "CBS", "distflag", 0, 0, dist_flag, 0);
    PutPoolDataByName( "BUSIIB", "feeFlg", 0, 0, fee_flag, 0);
    PutPoolDataByName( "CBS", "Phone", 0, 0, fee_acc, 0);
    PutPoolDataByName( "CBS", "Fee1", 0, 0, (char *)&fee, 0);

    /*登记机构及手续费信息*/
    EXEC SQL UPDATE t_pb_net_dtl
        SET payinstno = :out_inst, 
            rcvinstno = :inn_inst, 
            accinstno = :out_inst,
            fee = :fee,
            fee1 = :fee
        WHERE trandate = :pb_date
        AND seqno = :pb_seqno;
    if( sqlca.sqlcode || sqlca.sqlerrd[2] != 1)
    {
        WriteLog( ERR_LVL, "update net_dtl err[%d][%d]", sqlca.sqlcode, sqlca.sqlerrd[2]);
        WriteLog( ERR_LVL, "pb_date[%s]pb_seqno[%s]", pb_date, pb_seqno);
        strcpy( core_err, "数据库操作失败");
        core_err_no = -1;
        PutPoolDataByName( "BUSIIB", "thsdesc", 0, 0, core_err, 0);
        PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char*)&core_err_no,0);
        PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, core_err,0);
        return( -1);
    }

    /*赋值返回报文*/
    sprintf( s_real_amt, "%.2f", real_amt);
    PutPoolDataByName( "BUSIIB", "realTotalFee", 0, 0, s_real_amt, 0);

    PutPoolDataByName( "BUSIIB", "realManFee", 0, 0, c_fee, 0);
    PutPoolDataByName( "BUSIIB", "realPostFee", 0, 0, c_tran_amt, 0);

    return( 0);

}



/***********************************************************************
 * Trans       : 南充燃气费代收
 * Function    : 手续费试算
 * Input       : 
 * Output      : 
 * Return      : 0 - 成功; -1 - 失败
 * Description :
 * ------------------------------------------------------------------------
 * Author   Action  Date                Content
 * MSJ      create  2012-10-11
 **************************************************************************/
int TsfeeCalcu()
{
    EXEC SQL BEGIN DECLARE SECTION;
        struct s_agt_mgmt agt_buss;
    EXEC SQL END DECLARE SECTION;
    struct  PKG_CBS0000120 PKGCBS120;
    struct  PKG_CBS0000121 PKGCBS121;
    char	ChkFlag[20+1];
    char	CdmAccStat[60+1];
    char	SdmAccStat[60+1];
    char	FixAccStat[60+1];
    char	CardAccStat[60+1];
    char	stat[100+1];
    char  acc[25+1];
    char  err_code[6+1];
    char	err_msg[256+1];
    int		ret = 0;
    long    app_err_no = 0;
    double	fee = 0.00;
    double  amout=0.00;

    
    memset( &agt_buss, 0x00, sizeof(agt_buss) );
    memset( &PKGCBS120, 0x00, sizeof(struct PKG_CBS0000120) );
    memset( &PKGCBS121, 0x00, sizeof(struct PKG_CBS0000121) );
    memset( ChkFlag, 0x00, sizeof(ChkFlag) );
    memset( CdmAccStat, 0x00, sizeof(CdmAccStat) );
    memset( SdmAccStat, 0x00, sizeof(SdmAccStat) );
    memset( FixAccStat, 0x00, sizeof(FixAccStat) );
    memset( CardAccStat, 0x00, sizeof(CardAccStat) );
    memset( stat, 0x00, sizeof(stat) );
    memset( acc, 0x00, sizeof(acc) );
    memset( err_code, 0x00, sizeof(err_code) );
    memset( err_msg,  0x00, sizeof(err_msg)  );


    GetPoolDataByName( "BUSIIB", "cardAcctFlg", 0, 0, PKGCBS120.cardAcctFlg, 0 );
    if( strlen(PKGCBS120.cardAcctFlg) == 0 )
    {
        WriteLog( ERR_LVL, "ERR: cardAcctFlg不允许为空值!" );
        app_err_no = 40002;
        strcpy( err_code, "340002" );
        strcpy( err_msg, "手续费试算失败" );
        PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, err_code, 0 );
        PutPoolDataByName( "BUSIIB", "thsdesc",  0, 0, err_msg,  0 );
        PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, &app_err_no,  0 );
        PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg,  0 );
        return( -1 );
    }


    GetPoolDataByName( "BUSIIB", "payAcct", 0, 0, PKGCBS120.payCardAcctNb, 0 );
    if( strlen(PKGCBS120.payCardAcctNb) == 0 ) {
        WriteLog( ERR_LVL, "ERR: payCardAcctNb不允许为空值!" );
        app_err_no = 20003;
        strcpy( err_code, "320003" );
        strcpy( err_msg, "转出卡号或账号不存在" );
        PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, err_code, 0 );
        PutPoolDataByName( "BUSIIB", "thsdesc",  0, 0, err_msg,  0 );
        PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, &app_err_no,  0 );
        PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg,  0 );
        return( -1 );
    }

    GetPoolDataByName( "BUSIIB", "payCurTyp", 0, 0, PKGCBS120.payCurTyp, 0 );
    if( strlen(PKGCBS120.payCurTyp) == 0 )
    {
        WriteLog( ERR_LVL, "ERR: payCurTyp不允许为空值!" );
        app_err_no = 40002;
        strcpy( err_code, "340002" );
        strcpy( err_msg, "取币种编码出错" );
        PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, err_code, 0 );
        PutPoolDataByName( "BUSIIB", "thsdesc",  0, 0, err_msg,  0 );
        PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, &app_err_no,  0 );
        PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg,  0 );
        return( -1 );
    }
    
    PutPoolDataByName( "BUSIIB", "currencyTyp", 0, 0, PKGCBS120.payCurTyp, 0 );
    ret = NetParaConv("currencyTyp");
    if( ret < 0 )
    {
        WriteLog( ERR_LVL, "ERR: payCurTyp转换错误!" );
        app_err_no = 99999;
        strcpy( err_code, "999999" );
        strcpy( err_msg, "取币种编码出错" );
        PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, err_code, 0 );
        PutPoolDataByName( "BUSIIB", "thsdesc",  0, 0, err_msg,  0 );
        PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, &app_err_no,  0 );
        PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg,  0 );
        return( -1 );
    }
    
    memset( PKGCBS120.payCurTyp, 0x00, sizeof(PKGCBS120.payCurTyp) );
    GetPoolDataByName( "PAGTBUF", "currtype", 0, 0, PKGCBS120.payCurTyp, 0 );
    PutPoolDataByName( "BUSIIB", "payCurTyp", 0, 0, PKGCBS120.payCurTyp, 0 );
    
    GetPoolDataByName( "BUSIIB", "payCashFlg", 0, 0, PKGCBS120.payCashFlg, 0 );
    GetPoolDataByName( "BUSIIB", "payCustNm",  0, 0, PKGCBS120.payCustNm,  0 );
    if( strlen(PKGCBS120.payCustNm) == 0 )
    {
        WriteLog( ERR_LVL, "ERR: payCustNm不允许为空值!" );
        app_err_no = 40002;
        strcpy( err_code, "340002" );
        strcpy( err_msg, "转出客户名称为空" );
        PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, err_code, 0 );
        PutPoolDataByName( "BUSIIB", "thsdesc",  0, 0, err_msg,  0 );
        PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, &app_err_no,  0 );
        PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg,  0 );
        return( -1 );
    }

    GetPoolDataByName( "BUSIIB", "payBrchID", 0, 0, PKGCBS120.payBrchID, 0 );
    GetPoolDataByName( "BUSIIB", "payBrchNm", 0, 0, PKGCBS120.payBrchNm, 0 );
    GetPoolDataByName( "BUSIIB", "chkPwdFlg", 0, 0, PKGCBS120.chkPwdFlg, 0 );
    if( strlen(PKGCBS120.chkPwdFlg) == 0 ) 
    {
        WriteLog( ERR_LVL, "ERR: chkPwdFlg不允许为空值!" );
        app_err_no = 40002;
        strcpy( err_code, "340002" );
        strcpy( err_msg, "密码校验标志为空" );
        PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, err_code, 0 );
        PutPoolDataByName( "BUSIIB", "thsdesc",  0, 0, err_msg,  0 );
        PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, &app_err_no,  0 );
        PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg,  0 );
        return( -1 );
    }

    GetPoolDataByName( "BUSIIB", "pwdTyp", 0, 0, PKGCBS120.pwdTyp, 0 );
    GetPoolDataByName( "BUSIIB", "pwd",    0, 0, PKGCBS120.pwd,    0 );
    if( strncmp(PKGCBS120.chkPwdFlg,"1",1) == 0 )
    {
        if( strlen(PKGCBS120.pwdTyp) == 0 ||
        	strlen(PKGCBS120.pwd)    == 0 ) {
        	WriteLog( ERR_LVL, "ERR: pwdTyp,pwd不允许为空值!" );
        	app_err_no = 10015;
        	strcpy( err_code, "310015" );
        	strcpy( err_msg, "查询密码错" );
        	PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, err_code, 0 );
        	PutPoolDataByName( "BUSIIB", "thsdesc",  0, 0, err_msg,  0 );
        	PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, &app_err_no,  0 );
        	PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg,  0 );
        	return( -1 );
        }
        
        /* 密码校验 */
        ChkFlag[0] = '1';
        ChkFlag[1] = '0';
        ChkFlag[2] = '2';
        PutPoolDataByName( "BUSIIB", "qryCls", 0, 0, "1", 0 );
        PutPoolDataByName( "BUSIIB", "loanCreditFlg", 0, 0, ChkFlag, 0 );
        PutPoolDataByName( "BUSIIB", "custNm", 0, 0, PKGCBS120.payCustNm, 0 );
    }
    else if( strncmp(PKGCBS120.chkPwdFlg,"0",1) == 0 )
    {
        /* 不进行密码校验 */
        ChkFlag[0] = '1';
        ChkFlag[1] = '0';
        ChkFlag[2] = '0';
        PutPoolDataByName( "BUSIIB", "qryCls", 0, 0, "1", 0 );
        PutPoolDataByName( "BUSIIB", "loanCreditFlg", 0, 0, ChkFlag, 0 );
        PutPoolDataByName( "BUSIIB", "custNm", 0, 0, PKGCBS120.payCustNm, 0 );
    }

    memset( acc, 0x00, sizeof(acc) );
    GetPoolDataByName( "BUSIIB", "payAcct", 0, 0, acc, 0);
    rtrim(acc);
    PutPoolDataByName( "BUSIIB", "payCardAcctNb", 0, 0, acc, 0);

    ret = CommClient( "CoQryCSvr" );
    if( ret != 0 )
    {
        WriteLog( ERR_LVL, "ERR: 通用客户查询及账号查询检查服务失败!" );
        app_err_no = 99999;
        GetPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
        strcpy( err_code, "310015" );
        PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, err_code, 0 );
        PutPoolDataByName( "BUSIIB", "thsdesc",  0, 0, err_msg,  0 );
        PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, &app_err_no,  0 );
        return( -1 );
    }

    GetPoolDataByName( "PAGTBUF", "data1", 0, 0, CdmAccStat, 0 );
    GetPoolDataByName( "PAGTBUF", "data2", 0, 0, SdmAccStat, 0 );
    GetPoolDataByName( "PAGTBUF", "data3", 0, 0, FixAccStat, 0 );
    GetPoolDataByName( "PAGTBUF", "data4", 0, 0, CardAccStat, 0 );
    rtrim( CdmAccStat );
    rtrim( SdmAccStat );
    rtrim( FixAccStat );
    rtrim( CardAccStat );
    
    WriteLog( ERR_LVL,"###[%s][%s][%s][%s]",CdmAccStat,SdmAccStat,FixAccStat,CardAccStat );
    
    if( strlen(CdmAccStat) > 0 )
    {

        if( CdmAccStat[0] != '0' )
        {
            app_err_no = 20005;
            strcpy( stat, "销户");
        } 
        else if ( CdmAccStat[1] != '0' && CdmAccStat[1] != '3' )
        {
        	app_err_no = 20010;
        	strcpy( stat, "冻结");
        } else if( CdmAccStat[2] != '0' ) {
        	app_err_no = 20004;
        	strcpy( stat, "挂失");
        } else
        {
         	strcpy( stat, "正常");
        }
    }
    else if( strlen(SdmAccStat) > 0 )
    {
         if( SdmAccStat[0] != '0' )
         {
            app_err_no = 20005;
            strcpy( stat, "销户");
         } 
        else if ( SdmAccStat[1] != '0' && SdmAccStat[1] != '3' )
        {
            app_err_no = 20010;
            strcpy( stat, "冻结");
        }
        else if( SdmAccStat[2] != '0' )
        {
            app_err_no = 20004;
            strcpy( stat, "挂失");
        }
        else
        {
            strcpy( stat, "正常");
        }
    }
    else if( strlen(FixAccStat) > 0 )
    {
        if( FixAccStat[0] != '0' )
        {
            app_err_no = 20005;
            strcpy( stat, "销户");
        }
        else if ( FixAccStat[1] != '0' && FixAccStat[1] != '3' )
        {
            app_err_no = 20010;
            strcpy( stat, "冻结");
        }
        else if( FixAccStat[2] != '0' )
        {
            app_err_no = 20004;
            strcpy( stat, "挂失");
        }
        else
        {
            strcpy( stat, "正常");
        }
    }
    else if( strlen(CardAccStat) > 0 )
    {
        if( CardAccStat[0] != '0' )
        {
            app_err_no = 20005;
            strcpy( stat, "销户");
        }
        else if( CardAccStat[1] != '0' )
        {
            app_err_no = 20010;
            strcpy( stat, "冻结");
        }
        else if( CardAccStat[2] != '0' )
        {
            app_err_no = 20004;
            strcpy( stat, "挂失");
        }
        else
        {
            strcpy( stat, "正常");
        }
    }

    if( app_err_no == 20004 || app_err_no == 20005 || app_err_no == 20010 )
    {
        WriteLog( ERR_LVL, "ERR: 转出账户状态校验错误[%s]!", stat );
        sprintf( err_code, "3%ld", app_err_no );
        sprintf( err_msg, "转出卡或账号%s", stat );
        PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, err_code, 0 );
        PutPoolDataByName( "BUSIIB", "thsdesc",  0, 0, err_msg,  0 );
        PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, &app_err_no,  0 );
        PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg,  0 );
        return( -1 );
    }

    GetPoolDataByName( "BUSIIB", "transferChnl", 0, 0, PKGCBS120.transferChnl, 0 );
    GetPoolDataByName( "BUSIIB", "fastFlg",      0, 0, PKGCBS120.fastFlg,      0 );
    GetPoolDataByName( "BUSIIB", "manualFlg",    0, 0, PKGCBS120.manualFlg,    0 );
    GetPoolDataByName( "BUSIIB", "rcvAcct",      0, 0, PKGCBS120.rcvAcct,      0 );
    if( strlen(PKGCBS120.rcvAcct) == 0 )
    {
        WriteLog( ERR_LVL, "ERR: rcvAcct不允许为空值!" );
        app_err_no = 20007;
        strcpy( err_code, "320007" );
        strcpy( err_msg, "转入卡或账号不存在" );
        PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, err_code, 0 );
        PutPoolDataByName( "BUSIIB", "thsdesc",  0, 0, err_msg,  0 );
        PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, &app_err_no,  0 );
        PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg,  0 );
        return( -1 );
    }

    GetPoolDataByName( "BUSIIB", "rcvCustNm", 0, 0, PKGCBS120.rcvCustNm, 0 );
    if( strlen(PKGCBS120.rcvCustNm) == 0 )
    {
        WriteLog( ERR_LVL, "ERR: rcvCustNm不允许为空值!" );
        app_err_no = 40002;
        strcpy( err_code, "340002" );
        strcpy( err_msg, "转入户名为空" );
        PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, err_code, 0 );
        PutPoolDataByName( "BUSIIB", "thsdesc",  0, 0, err_msg,  0 );
        PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, &app_err_no,  0 );
        PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg,  0 );
        return( -1 );
    }

    GetPoolDataByName( "BUSIIB", "transAmt", 0, 0, PKGCBS120.transAmt, 0 );
    if( atof(PKGCBS120.transAmt) == 0.00 || atof(PKGCBS120.transAmt) < 0.00 )
    {
        WriteLog( ERR_LVL, "ERR: transAmt金额取值范围错误!" );
        app_err_no = 99999;
        strcpy( err_code, "399999" );
        strcpy( err_msg, "金额取值范围错误" );
        PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, err_code, 0 );
        PutPoolDataByName( "BUSIIB", "thsdesc",  0, 0, err_msg,  0 );
        PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, &app_err_no,  0 );
        PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg,  0 );
        return( -1 );
    }
    rtrim( PKGCBS120.transAmt );
    

    /*取中间业务代收费管理表信息*/
    EXEC SQL SELECT * INTO :agt_buss
        FROM t_agt_mgmt
        WHERE agt_code = "CBS1000620";
    if( sqlca.sqlcode)
    {
        WriteLog( ERR_LVL, "检索代收费管理表失败[%d]", sqlca.sqlcode);
        app_err_no = 99999;
        sprintf( err_msg, "数据库查询失败[%d]", sqlca.sqlcode );
        strcpy( err_code, "999999" );
        PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, err_code, 0 );
        PutPoolDataByName( "BUSIIB", "thsdesc",  0, 0, err_msg,  0 );
        PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&app_err_no, 0 );
        PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
        return ( -1);
    }

    if( agt_buss.fee_flag[0]=='0' )
    {
        fee=atof(PKGCBS120.transAmt)*agt_buss.fee_rate/10000;
    }
    else if( agt_buss.fee_flag[0]=='1' )
    {
        fee=agt_buss.fee_amt;
    }
    else
    {
        WriteLog( ERR_LVL, "数据库配置错fee_flag[%s]", agt_buss.fee_flag);
        app_err_no = 99999;
        strcpy( err_msg, "数据库配置错" );
        strcpy( err_code, "999999" );
        PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, err_code, 0 );
        PutPoolDataByName( "BUSIIB", "thsdesc",  0, 0, err_msg,  0 );
        PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&app_err_no, 0 );
        PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
        return ( -1);
    }

    if( fee<agt_buss.fee_min )
    {
        fee=agt_buss.fee_min;
    }
    else if( fee>agt_buss.fee_max )
    {
        fee=agt_buss.fee_max;
    }

    sprintf( PKGCBS121.needTotalFee, "%-.2lf", fee );
    sprintf( PKGCBS121.needManFee, "%-.2lf", fee );

    PutPoolDataByName( "BUSIIB", "needTotalFee", 0, 0, PKGCBS121.needTotalFee, 0 );
    PutPoolDataByName( "BUSIIB", "needPostFee",  0, 0, PKGCBS121.needPostFee,  0 );
    PutPoolDataByName( "BUSIIB", "needManFee",   0, 0, PKGCBS121.needManFee,   0 );
    
    return( 0 );
}




/***********************************************************************
 * Trans       : 南充燃气费代收
 * Function    : 核心交易流水查证
 * Input       : 
 * Output      : 
 * Return      : 0 - 成功; -1 - 失败
 * Description :
 * ------------------------------------------------------------------------
 * Author   Action  Date                Content
 * MSJ      create  2012-10-11
 **************************************************************************/
int Qry_Busi()
{
    
    
}


