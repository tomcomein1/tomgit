#include <stdio.h>
#include <stdlib.h>
#include <sys/types.h>
#include <errno.h>
#include <string.h>
#include <unistd.h>
#include <time.h>

#include "pbconstval.h"
#include "pbstructdef.h"
#ifdef ORACLE_DATABASE
EXEC SQL include "pbranchdb.h";
#else
#include "pbranchdb.h"
#endif
#include "pbappdb.h"
#include "pberrlog.h"
#include "pbglbvardef.h"
#include "pbbasefunc.h"
#include "pbvarmacro.h"

#include "pbdb.h"
#include "fml32.h"
#include "atmi.h"
#include "pbsrv.h"

struct payBrchNm_s
{
    int no;
    char comnt_name[100];
}payBrchNm_s1[22] = { 0 };

long WXJJ_Com(char *para)
{
    EXEC SQL BEGIN DECLARE SECTION;
        char BatchName[61];
        char BatchNo[21];
    EXEC SQL END DECLARE SECTION;
    char transchnl[32];
    char acc[25];
    char aval_bal[15];
    char bal[15];
    double b_bal=0.00;
    int ret = 0,j;
    long num=0,cur_num=0;
    long lerrno = 0;
    char err_msg[128];
    char body[9],code[10],errcode[10],seq[20],amt[16];
    char trancode[40],pkpara[20],ndpara[20],bzw[128],name[100],name1[100];
    char custName[61];
    char msgvalue[128],msgvalue1[400];
    char reqsn[32];
    char TraceCode_bb[100];
    char MsgFlag_bb[10];
    int     datasize_bb = 0;

    char payBrchNm_tmp[100] = { 0 };
    int i_tmp = 0;

    ATOM_PARA  Para;

    memset( code, 0, sizeof(code));
    memset( errcode, 0, sizeof(errcode));
    memset( body, 0, sizeof(body));
    memset( trancode, 0, sizeof(trancode));
    memset( &Para, 0, sizeof(Para));
    memset( pkpara, 0, sizeof(pkpara));
    memset( bzw, 0, sizeof(bzw));
    memset( msgvalue1, 0, sizeof(msgvalue1));
    memset( msgvalue, 0, sizeof(msgvalue));
    memset( seq, 0, sizeof(seq));
    memset( transchnl, 0, sizeof(transchnl));
    memset(acc,0x00,sizeof(acc));
    memset(aval_bal,0x00,sizeof(aval_bal));
    memset(bal,0x00,sizeof(bal));
    memset(reqsn, 0x00, sizeof(reqsn));
    memset( err_msg, 0, sizeof(err_msg));
    memset( TraceCode_bb, 0x00, sizeof( TraceCode_bb));
    memset( MsgFlag_bb, 0x00, sizeof( MsgFlag_bb));

    WriteLog(ERR_LVL, "处理开始................\n "  );
    /*fengjx 备份原跟踪码*/
    MsgFlagHandleNew( "700" , 'G' , MsgFlag_bb  ) ;
    rtrim( FrontBuff.TraceCode );
    strcpy( TraceCode_bb, FrontBuff.TraceCode);
    datasize_bb = cstmlen2size ( FrontBuff.TraceCode , 4 ) ;
    WriteLog(DEBUG_LVL,"渠道跟踪号1:[%s][%d]code[%s]flag[%s]",FrontBuff.ChnlNo,datasize_bb,TraceCode_bb, MsgFlag_bb);

WriteLog( ERR_LVL, "WXJJ para = [%s]", para );
    rtrim(para);
    ParseAtomPara( &Para, para);
    if( Para.ParaNum != 3 && Para.ParaNum != 5 )
    {
        WriteLog(ERR_LVL,"参数个数错误FAIL[%d]",Para.ParaNum);
        lerrno =  99999;
        sprintf(err_msg, "参数个数错误FAIL[%d]", Para.ParaNum );
        PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&lerrno, 0 );
        PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
        PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, "-1", 0 );
        return -1;
    }
    if( Para.ParaNum == 5)
    {
        sprintf(pkpara,"%s|%s",Para.Para[3],Para.Para[4]);    
    }
    strncpy(ndpara,para,13);
    PutPoolDataByName( "PAGTBUF", "pagt_inst_no", 0, 0, "INST", 0);
    PutPoolDataByName( "PAGTBUF", "tlr_no", 0, 0, "TELLER", 0);
    GetPoolDataByName( "BUSIIB", "midTransNb", 0, 0, trancode, 0);
    rtrim(trancode);
    PutPoolDataByName( "APSYS", "BusiType1", 0, 0, "700", 0);

    /* 维修基金调用 缴费查询接口(0001) */
    PutPoolDataByName( "PAGTBUF", "out_trancode", 0, 0, "0001", 0);

    GetPoolDataByName( "RCBIB", "thmseqNb", 0, 0, reqsn, 0);
    trim(reqsn);
    if( strlen(reqsn) == 0 )
        PutPoolDataByName( "APSYS", "RltSysSeqNum", 0, 0, "WXJJ000001", 0);
    else
        PutPoolDataByName( "APSYS", "RltSysSeqNum", 0, 0, reqsn, 0);

    /* 报文编号 */
    trim( Para.Para[2] );
    if( strncmp(Para.Para[2], "CBS0003610", 10) == 0 )
        PutPoolDataByName( "RCBIB", "bookNb", 0, 0, "410000000C", 0);
    else if( strncmp(Para.Para[2], "CBS0003620", 10) == 0 )
        PutPoolDataByName( "RCBIB", "bookNb", 0, 0, "410000000D", 0);
    else if( strncmp(Para.Para[2], "CBS0003630", 10) == 0 )
        PutPoolDataByName( "RCBIB", "bookNb", 0, 0, "410000000E", 0);
    else if( strncmp(Para.Para[2], "CBS0003640", 10) == 0 )
        PutPoolDataByName( "RCBIB", "bookNb", 0, 0, "410000000F", 0);
    else if( strncmp(Para.Para[2], "CBS0003650", 10) == 0 )
        PutPoolDataByName( "RCBIB", "bookNb", 0, 0, "410000000H", 0);
    else if( strncmp(Para.Para[2], "CBS0003660", 10) == 0 )
        PutPoolDataByName( "RCBIB", "bookNb", 0, 0, "410000000G", 0);
    else if( strncmp(Para.Para[2], "CBS0003670", 10) == 0 )
        PutPoolDataByName( "RCBIB", "bookNb", 0, 0, "410000000H", 0);
    else
        PutPoolDataByName( "RCBIB", "bookNb", 0, 0, Para.Para[2], 0);

    /* 开始笔数 */
    /* 结束笔数 */
    /* 开始笔数与结束笔数由网银处理时直接放在了变量池RCBIB的succQnt、 errQnt域中 */


    WriteLog( ERR_LVL, "pkpara[%s]", pkpara );
    ret = Data_LoanXMLPack(pkpara);
    if( ret )
    {
        WriteLog(ERR_LVL,"打包失败");
        lerrno = 99999;
        sprintf( err_msg, "打包失败" );
        PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)lerrno, 0 );
        PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
        PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, "-1", 0 );
        return ( -1 );
    }
    MsgFlagHandleNew("700", 'S', "3");
    Data_GetTraceCode("700");
    WriteLog( ERR_LVL, "ndpara=[%s]",ndpara );

    ret = Comm_AcCall( ndpara );
    /*fjx 新一代还原跟踪码*/
    memset (FrontBuff.TraceCode, 0x00, sizeof(FrontBuff.TraceCode));
    MsgFlagHandleNew("700", 'S', MsgFlag_bb);
    strcpy( FrontBuff.TraceCode, TraceCode_bb);
    datasize_bb = cstmlen2size ( FrontBuff.TraceCode , 4 ) ;
    WriteLog(DEBUG_LVL,"渠道跟踪号3:[%s][%d]code[%s]flag[%s]",FrontBuff.ChnlNo,datasize_bb,TraceCode_bb, MsgFlag_bb);

    if( ret )
    {
        WriteLog( ERR_LVL, "Comm_AcCall Err");
        strcpy(errcode,"PB002");
        PutPoolDataByName("PAGTBUF","sys_err_no",0,0,errcode,0);
        PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, "-1", 0 );
        return (-1);
    }
    WriteLog( ERR_LVL, "pkpara[%s]", pkpara );

    ret = Data_LoanXMLUnpack(pkpara);
    if( ret )
    {
        WriteLog(ERR_LVL,"解包失败");
        lerrno = 99999;
        sprintf( err_msg, "解包失败" );
        PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)lerrno, 0 );
        PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
        PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, "-1", 0 );
        return ( -1 );
    }

    /*GetPoolDataByName( "RCBIB", "totalQnt", 0, 0,amt, 0 );*/
    /*GetPoolDataByName( "BUSIIB", "turnPageTotalQnt", 0, 0,amt, 0 );*/
    /*GetPoolDataByName( "ABSHEAD", "charge_no", 0, 0,amt, 0 );*/
    GetPoolDataByName( "ABSHEAD", "charge_no", 0, 0,&cur_num, 0 );
    memset ( amt, 0, sizeof(amt) );
    sprintf ( amt, "%d", cur_num );
    WriteLog( ERR_LVL, "cur_num[%s]", amt);

    PutPoolDataByName( "BUSIIB", "turnPageTotalQnt", 0, 0, amt, 0);
    PutPoolDataByName( "RCBIB", "v", 0, 0, amt, 0);
    PutPoolDataByName( "BUSIIB", "v", 0, 0, amt, 0);
/*
    PutPoolDataByName( "BUSIIB", "v", 0, 0, amt, 0);
    PutPoolDataByName( "RCBIB", "list", 0, 0, "1", 0);
    PutPoolDataByName( "RCBIB", "EcnomicSubjectCode_2", 0, 0, "1", 0);
*/

    GetPoolDataByName( "BUSIIB", "thsretCd", 0, 0, errcode, 0 );
    if ( strlen(errcode ) == 0 )
    {
        memset(code,0x00,sizeof(code));
        strcpy(code,"-1");
        PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0,code, 0 );
    }

    if( strncmp(errcode,"00000",5) !=0)
    {
        lerrno = 99999;
        GetPoolDataByName( "PAGTBUF", "data1", 0, 0,err_msg, 0 );
        PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)lerrno, 0 );
        PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
        PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, "-1", 0 );
        return ( -1 );
    }

    GetPoolDataByName( "ABSHEAD", "charge_no", 0, 0,&cur_num, 0 );
    WriteLog( ERR_LVL, "cur_num[%d]", cur_num);

#if 0
    if( strncmp( Para.Para[2], "CBS0720210", 10) == 0 )
    {
        for( j = 0; j < atoi( amt ); j++ )
        {
            memset( errcode, 0x00, sizeof(errcode) );
            GetPoolDataByName( "RCBIB", "merchNb", j, 0, errcode, 0 );
            WriteLog( ERR_LVL, "acct[%s]", errcode);
            GetPoolDataByName( "RCBIB", "merchNm", j, 0, errcode, 0 );
            WriteLog( ERR_LVL, "acct[%s]", errcode);
/*
            PutPoolDataByName( "BUSIIB", "btchStat", j, 0, "0", 0);
*/
        }
    }
#endif

    /* 为了解决模糊查询(查询小区信息) 增加对payBrchNm做初始化处理 
    Data_SetPoolNullValue("BUSIIB|135|0");*/
    for ( i_tmp=0; i_tmp<22; i_tmp++ )
    { 
        memset ( payBrchNm_tmp, 0, sizeof(payBrchNm_tmp) );
        GetPoolDataByName( "BUSIIB", "payBrchNm", 0, i_tmp, payBrchNm_tmp, 0);
        payBrchNm_s1[i_tmp].no = i_tmp;
        memcpy ( payBrchNm_s1[i_tmp].comnt_name, payBrchNm_tmp, sizeof(payBrchNm_tmp) ); 
        WriteLog ( ERR_LVL, "i_tmp=%d, payBrchNm_tmp=%s\n", i_tmp, payBrchNm_s1[i_tmp].comnt_name );
        PutPoolDataByName( "RCBIB", "payBrchNm", 0, i_tmp, payBrchNm_s1[i_tmp].comnt_name, 0 );
    }

    return 0;
}
