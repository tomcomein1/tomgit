#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <sys/types.h>
#include <time.h>
#include "pbconstval.h"
#include <iconv.h>
#include "pbstructdef.h"
#ifdef ORACLE_DATABASE
EXEC SQL include "pbranchdb.h";
#else
#include "pbranchdb.h"
#endif
#include "pberrlog.h"
#include "pbglbvardef.h"
#include "pbbasefunc.h"

#include "pbvarmacro.h"
#include "pbdb.h"
#include "fml32.h"
#include "atmi.h"
#include "pbsrv.h"
#include "PAGT.h"

#define OP_DB_ERR "操作数据库出错" 

long AccQryPub5711();
int  pbbusi700beforetran();
int NetBankLogReg( char *param);
int npbbusi700afterdeal( char * para );
int NoCard_Defray(char *);
int NoCard_Chk(struct s_pagt_signinfo,int);
int NoCard_Ins(struct s_pagt_signinfo);
int NoCard_Del(struct s_pagt_signinfo);
int NoCard_Mod(struct s_pagt_signinfo);
int Qry_NoCard_info();

$struct s_multi_reserve
{
        char trandate[8+1];
        char seqno[40+1];
        char reserve1[60+1];
        char reserve2[60+1];
        char reserve3[60+1];
        char reserve4[60+1];
        char reserve5[60+1];
};


char * sca_iconv(char* from_charset, char* to_charset, char *inbuf) 
{
    size_t inlen;
	size_t outlen;

	
	char * in;
	char * out;
	char * outbuf;
	iconv_t cd;

	inlen = strlen(inbuf);
	if(inbuf == NULL || inlen == 0)
	{
		WriteLog(ERR_LVL,"要转码的字符串为空或长度为0");
		return NULL;
	}
	
	cd = iconv_open(to_charset, from_charset);
	if(cd ==(iconv_t) -1)
	{
		WriteLog(ERR_LVL,"打开字符集(%s  %s)失败：%s", to_charset, from_charset, strerror(errno));
		return NULL;
	}
	
	outlen = 2 * inlen - 1;	
    outbuf = (char *)malloc(outlen);
	memset(outbuf, 0x00, outlen);
	
	in = inbuf;
	out = outbuf;
	
    if( iconv(cd, &in, &inlen, &out, &outlen) != 0)	
	{
		iconv_close(cd);
		free(outbuf);
		WriteLog(ERR_LVL,"字符集转换失败：%s", strerror(errno));
		return NULL; 
	}
	
	iconv_close(cd);
	return outbuf;		
}		

long
Dqd_Com(char *para)
{
    EXEC SQL BEGIN DECLARE SECTION;
        char BatchName[61];
        char BatchNo[21];
        char trancode[40];
        char outcode[11];
        struct s_multi_reserve multi_reserve;
    EXEC SQL END DECLARE SECTION;
    char transchnl[32];
    char acc[25];
    char aval_bal[15];
    char bal[15];
    double b_bal=0.00;
    int ret = 0,j;
    int i_pb_date=0;
    long num=0,cur_num=0;
    char body[9],code[10],err_code[10],seq[63],amt[16];
    char pkpara[20],ndpara[20],bzw[128],name[121],name1[121];
    char custName[121];
    char msgvalue[128],msgvalue1[400];
    ATOM_PARA  Para;
    char cardAcctFlg[3], pwd[129], chkPwdFlg[3], pwdtmp[129], cardAcctNb[33],acct[33] ,accnm[121];
    char pwdbuf[129];
    long lerrno = 0;
    char errcode[10];
    char err_msg[128];
    char TraceCode_bb[100];
    char MsgFlag_bb[10];
    int     datasize_bb = 0;

    memset( err_msg, 0, sizeof(err_msg));
    memset( pwdbuf, 0, sizeof(pwdbuf));
    memset( cardAcctNb, 0, sizeof(cardAcctNb));
    memset( cardAcctFlg, 0, sizeof(cardAcctFlg));
    memset( pwd, 0, sizeof(pwd));
    memset( &multi_reserve, 0, sizeof(struct s_multi_reserve));
    memset( pwdtmp, 0, sizeof(pwdtmp));
    memset( chkPwdFlg, 0, sizeof(chkPwdFlg));
    memset( code, 0, sizeof(code));
    memset( body, 0, sizeof(body));
    memset( trancode, 0, sizeof(trancode));
    memset( &Para, 0, sizeof(Para));
    memset( pkpara, 0, sizeof(pkpara));
    memset( bzw, 0, sizeof(bzw));
    memset( msgvalue1, 0, sizeof(msgvalue1));
    memset( msgvalue, 0, sizeof(msgvalue));
    memset( seq, 0, sizeof(seq));
    memset( transchnl, 0, sizeof(transchnl));
    memset(acc,0x00,sizeof(acc));
    memset( errcode, 0x00, sizeof(errcode));
    memset(aval_bal,0x00,sizeof(aval_bal));
    memset(bal,0x00,sizeof(bal));
    memset(outcode,0x00,sizeof(outcode));
    memset(custName, 0x00, sizeof(custName));
    memset(accnm, 0x00, sizeof(accnm));
    memset( TraceCode_bb, 0x00, sizeof( TraceCode_bb));
    memset( MsgFlag_bb, 0x00, sizeof( MsgFlag_bb));
    WriteLog(ERR_LVL, "处理开始................\n "  );

WriteLog( ERR_LVL, "oooopkpara[%s]", para );

    /*fengjx 备份原跟踪码 20150302*/
    MsgFlagHandleNew( "700" , 'G' , MsgFlag_bb  ) ;
    rtrim( (char *)FrontBuff.TraceCode );
    strcpy( TraceCode_bb, (char *)FrontBuff.TraceCode);
    datasize_bb = cstmlen2size ( FrontBuff.TraceCode , 4 ) ;
    WriteLog(DEBUG_LVL,"渠道跟踪号1:[%s][%d]code[%s]flag[%s]",FrontBuff.ChnlNo,datasize_bb,TraceCode_bb, MsgFlag_bb);

    rtrim(para);
    ParseAtomPara( &Para, para);
    if( Para.ParaNum != 3 && Para.ParaNum != 5 )
    {
        WriteLog(ERR_LVL,"参数个数错误FAIL[%d]",Para.ParaNum);
        lerrno =  99999;
        sprintf(err_msg, "参数个数错误FAIL[%d]", Para.ParaNum );
        PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&lerrno, 0 );
        PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
        PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, "-1", 0 );
        return -1;
    }
    if( Para.ParaNum == 5)
    {
        sprintf(pkpara,"%s|%s",Para.Para[3],Para.Para[4]);    
    }
    strncpy(ndpara,para,13);
    PutPoolDataByName( "PAGTBUF", "pagt_inst_no", 0, 0, "INST", 0);
    PutPoolDataByName( "PAGTBUF", "tlr_no", 0, 0, "TELLER", 0);
    GetPoolDataByName( "BUSIIB", "midTransNb", 0, 0, trancode, 0);
    rtrim(trancode);
    PutPoolDataByName( "APSYS", "BusiType1", 0, 0, "700", 0);
    if(strncmp(Para.Para[2],"CBS1000690",10)==0)
    {
        PutPoolDataByName( "BUSIIB", "backup5", 0, 0, "110", 0);
	PutPoolDataByName( "PAGTBUF", "out_trancode", 0, 0, "0006", 0);
    }
    else if(strncmp(Para.Para[2],"CBS0000300",10)==0)
    {
        GetPoolDataByName( "BUSIIB", "backup3", 0, 0, bzw, 0);
        if(bzw[0] == '0' )
        {
            EXEC SQL SELECT outcode INTO :outcode
                FROM t_pb_net_tran_conv WHERE trancode=:trancode;
            if( SQLCODE != 0 && SQLCODE != 100 )
            {
                WriteLog( ERR_LVL, "查询网银交易码对照表失败!SQLCODE[%d]trancode[%s]", SQLCODE,trancode);
                lerrno = 99999;
                sprintf(err_msg, "系统错,请联系系统管理员[%s]", trancode );
                PutPoolDataByName("BUSIIB","transfilename", 0, 0,"1", 0 );
                PutPoolDataByName("BUSIIB","backup5", 0, 0,"1", 0 );
                PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char * )&lerrno, 0 );
                PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
                PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, "-1", 0 );
                return -1;
            }
            else if( SQLCODE==100 )
            {
                WriteLog(ERR_LVL, "平台交易码错[%s]", trancode );
                lerrno = 99999;
                sprintf(err_msg, "暂不支持的缴费类型" );
                PutPoolDataByName("BUSIIB","transfilename", 0, 0,"1", 0 );
                PutPoolDataByName("BUSIIB","backup5", 0, 0,"1", 0 );
                PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char * )&lerrno, 0 );
                PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
                PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, "-1", 0 );
                return -1;
            }
            rtrim(outcode);
            WriteLog(APP_LVL, "outcode[%s]", outcode );
            PutPoolDataByName( "BUSIIB", "backup5", 0, 0, outcode, 0);
            PutPoolDataByName( "PAGTBUF", "out_trancode", 0, 0, "0005", 0);
            strcpy(pkpara,"700|700305");
        }
        else
        {
            PutPoolDataByName( "PAGTBUF", "out_trancode", 0, 0, "0001", 0);
            PutPoolDataByName( "BUSIIB", "manualFlg", 0, 0, "0", 0);
            strcpy(pkpara,"700|700300");
        }
    }
    else if( strncmp(Para.Para[2],"CBS0000310",10)==0)
    {
        GetPoolDataByName( "BUSIIB", "chnlSeqNb", 0, 0, multi_reserve.seqno, 0);
        GetPoolDataByName( "PBSYS", "PbDate", 0, 0, multi_reserve.trandate, 0 );
        rtrim( multi_reserve.seqno );
        rtrim( multi_reserve.trandate );
        EXEC SQL SELECT * INTO :multi_reserve
            from t_multi_reserve where trandate=:multi_reserve.trandate 
            and seqno=:multi_reserve.seqno;
        if( SQLCODE != 0 && SQLCODE != 100 )
        {
            WriteLog( ERR_LVL, "查询多渠道备注错!SQLCODE[%d]trancode[%s][%s]\n",SQLCODE,multi_reserve.seqno,multi_reserve.trandate);
            lerrno = 99999;
            strcpy(err_msg, "系统错,请联系系统管理员" );
            PutPoolDataByName("BUSIIB","transfilename", 0, 0,"1", 0 );
            PutPoolDataByName("BUSIIB","backup5", 0, 0,"1", 0 );
            PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char * )&lerrno, 0 );
            PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
            PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, "-1", 0 );
            return -1;
        }
        else if(  SQLCODE == 100 )
        {
            rdefmtdate( &i_pb_date, "yyyymmdd", multi_reserve.trandate );
            i_pb_date --;
            rfmtdate( i_pb_date, "yyyymmdd", multi_reserve.trandate );
            EXEC SQL SELECT * INTO :multi_reserve
                from t_multi_reserve where trandate=:multi_reserve.trandate 
                and seqno=:multi_reserve.seqno;
            if( SQLCODE != 0 && SQLCODE != 100 )
            {
                WriteLog( ERR_LVL, "查询多渠道备注错!SQLCODE[%d]trancode[%s][%s]\n",SQLCODE,multi_reserve.seqno,multi_reserve.trandate);
                lerrno = 99999;
                strcpy(err_msg, "系统错,请联系系统管理员" );
                PutPoolDataByName("BUSIIB","transfilename", 0, 0,"1", 0 );
                PutPoolDataByName("BUSIIB","backup5", 0, 0,"1", 0 );
                PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char * )&lerrno, 0 );
                PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
                PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, "-1", 0 );
                return -1;
            }
            else if( SQLCODE == 100 )
            {
                WriteLog( ERR_LVL, "查询多渠道备注错!SQLCODE[%d]trancode[%s][%s]\n",SQLCODE,multi_reserve.seqno,multi_reserve.trandate);
                lerrno = 99999;
                strcpy(err_msg, "未找到原查询欠费信息" );
                PutPoolDataByName("BUSIIB","transfilename", 0, 0,"1", 0 );
                PutPoolDataByName("BUSIIB","backup5", 0, 0,"1", 0 );
                PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char * )&lerrno, 0 );
                PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
                PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, "-1", 0 );
                return -1;
            }
            else
            ;
        }
        else
        ;
        rtrim( multi_reserve.reserve1 );
        rtrim( multi_reserve.reserve2 );
        rtrim( multi_reserve.reserve3 );
        rtrim( multi_reserve.reserve4 );
        rtrim( multi_reserve.reserve5 );
        PutPoolDataByName( "PAGTBUF", "data1", 0, 0, multi_reserve.reserve1, 0);
        PutPoolDataByName( "PAGTBUF", "data2", 0, 0, multi_reserve.reserve2, 0);
        PutPoolDataByName( "PAGTBUF", "data3", 0, 0, multi_reserve.reserve3, 0);
        PutPoolDataByName( "PAGTBUF", "data4", 0, 0, multi_reserve.reserve4, 0);
        PutPoolDataByName( "PAGTBUF", "data5", 0, 0, multi_reserve.reserve5, 0);
        GetPoolDataByName( "BUSIIB", "chkPwdFlg", 0, 0, chkPwdFlg, 0);
        GetPoolDataByName( "BUSIIB", "cardAcctFlg", 0, 0, cardAcctFlg, 0);
        GetPoolDataByName( "BUSIIB", "pwd", 0, 0, pwd, 0);
        GetPoolDataByName( "BUSIIB", "cardAcctNb", 0, 0, cardAcctNb, 0);
        GetPoolDataByName( "BUSIIB", "chkPwdFlg", 0, 0, chkPwdFlg, 0);
        /*
        if(chkPwdFlg[0] == '1' && cardAcctFlg[0] == '1' )
        {
            if( UnionDecryptPin( (char *)pwd, (char *)cardAcctNb, (char *)pwdtmp ) != 0 )
            {
                   WriteLog(ERR_LVL, "解密错[%s]", trancode );
                lerrno = 99999;
                sprintf(err_msg, "解密错[%s]", trancode );
                PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&lerrno, 0 );
                PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
                PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, "-1", 0 );
                return -1;
            }
            if( SC6000_3Des(1, (char *)pwdtmp, (char *)pwdbuf ) )
            {
                   WriteLog(ERR_LVL,"加密错[%s]",trancode);
                lerrno = 99999;
                sprintf(err_msg, "加密错[%s]", trancode );
                PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)lerrno, 0 );
                PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
                PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, "-1", 0 );
                return -1;
            }
            PutPoolDataByName( "BUSIIB", "pwd", 0, 0, pwdbuf, 0);
        }
        */
        PutPoolDataByName( "BUSIIB", "backup5", 0, 0, "0", 0);
        PutPoolDataByName( "PAGTBUF", "out_trancode", 0, 0, "0002", 0);
        strcpy(pkpara,"700|700310");
    }
    else
    {
           WriteLog(ERR_LVL,"平台交易码错[%s]",trancode);
        lerrno = 99999;
        sprintf(err_msg, "平台交易码错[%s]", trancode );
        PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)lerrno, 0 );
        PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
        PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, "-1", 0 );
        return -1;
    }
    PutPoolDataByName( "PAGTBUF", "area_use_flag", 0, 0, "0", 0);

    WriteLog( ERR_LVL, "pkpara[%s]", pkpara );
    ret = Data_LoanXMLPack(pkpara);
    if( ret )
    {
        WriteLog( ERR_LVL, "打包失败" );
        lerrno = 99999;
        sprintf( err_msg, "打包失败" );
        PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)lerrno, 0 );
        PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
        PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, "-1", 0 );
        return ( -1 );
    }
    MsgFlagHandleNew("700", 'S', "3");
    Data_GetTraceCode("700");
    WriteLog( ERR_LVL, "ndpara=[%s]",ndpara );

    ret = Comm_AcCall( ndpara );

    /*fjx 新一代还原跟踪码 20150302*/
    memset (FrontBuff.TraceCode, 0x00, sizeof(FrontBuff.TraceCode));
    MsgFlagHandleNew("700", 'S', MsgFlag_bb);
    strcpy( (char *)FrontBuff.TraceCode, TraceCode_bb);
    datasize_bb = cstmlen2size ( FrontBuff.TraceCode , 4 ) ;
    WriteLog(DEBUG_LVL,"渠道跟踪号3:[%s][%d]code[%s]flag[%s]",FrontBuff.ChnlNo,datasize_bb,TraceCode_bb, MsgFlag_bb);

    if( ret )
    {
        WriteLog( ERR_LVL, "Comm_AcCall Err");
        strcpy(err_code,"PB002");
        PutPoolDataByName("PAGTBUF","sys_err_no",0,0,err_code,0);
        PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, "-1", 0 );
        return (-1);
    }
    WriteLog( ERR_LVL, "pkpara[%s]", pkpara );
    ret = Data_LoanXMLUnpack(pkpara);
    if( ret )
    {
        WriteLog(ERR_LVL,"解包失败");
        lerrno = 99999;
        sprintf( err_msg, "解包失败" );
        PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)lerrno, 0 );
        PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
        PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, "-1", 0 );
        return ( -1 );
    }

    GetPoolDataByName( "BUSIIB", "thsretCd", 0, 0, errcode, 0 );
    if ( strlen(errcode ) == 0 )
    {
        memset(code,0x00,sizeof(code));
		PutPoolDataByName("BUSIIB","transfilename", 0, 0,"1", 0 );
		PutPoolDataByName("BUSIIB","backup5", 0, 0,"1", 0 );
        strcpy(code,"-1");
        PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0,code, 0 );
    }
    if( strncmp(errcode,"PB403",5) == 0)
    {
        lerrno=403;
	PutPoolDataByName("BUSIIB","backup5", 0, 0,"1", 0 );
        PutPoolDataByName("BUSIIB","transfilename", 0, 0,"1", 0 );
        PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&lerrno, 0 );
        PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, "-1", 0 );
        return -1;
    }
	if( strncmp(errcode,"00000",5) !=0)
	{
		if(((char*)strstr((char *)errcode,"PB")) != NULL)
		{
			lerrno=atol(errcode+2);
		}
		else
		{
			lerrno=atol(errcode);
		}
            WriteLog(ERR_LVL,"gggggggg,[%ld]",lerrno);
		PutPoolDataByName("BUSIIB","backup5", 0, 0,"1", 0 );
		PutPoolDataByName("BUSIIB","transfilename", 0, 0,"1", 0 );
		PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&lerrno, 0 );
		PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, "-1", 0 );
		return -1;
	}

            WriteLog(ERR_LVL,"gggggggg,[%s]",amt);
    if(strncmp(Para.Para[2],"CBS1000690",10)==0)
    {
        num=0;
        GetPoolDataByName( "ABSHEAD", "charge_no", 0, 0,&num, 0 );
        memset(amt,0x00,sizeof(amt));
        /*GetPoolDataByName( "BUSIIB", "turnPageTotalQnt", 0, 0,amt, 0 );del by wangxiaorui20140430*/
        sprintf(amt,"%ld",num);
        PutPoolDataByName( "BUSIIB", "v", 0, 0, amt, 0);
		for(j=0;j<num;j++)
		{
			if(j>30)
			{
				break;
			}
			memset(transchnl,0,sizeof(transchnl));
			memset(acct,0,sizeof(acct));
			memset(accnm,0,sizeof(accnm));
			GetPoolDataByName( "BUSIIB", "transChnl", j, 0,transchnl, 0 );
			GetPoolDataByName( "BUSIIB", "acct", j, 0,acct, 0 );
			if( AccQryPub5711( acct ) )
			{
				WriteLog(ERR_LVL,"调用5711查询账户名称错,[%s]",amt);
			}
			
			GetPoolDataByName( "CBS", "CustName", 0, 0, accnm, 0);
			rtrim(accnm);
			PutPoolDataByName( "BUSIIB", "payCustNm", j, 0, accnm, 0);
			if ( strcmp(transchnl,"001" ) == 0 )
    	        strcpy(transchnl,"01");
        	if ( strcmp(transchnl,"700" ) == 0 )
          	  strcpy(transchnl,"02");
       		 if ( strcmp(transchnl,"122" ) == 0 )
	            strcpy(transchnl,"06");
   		     if ( strcmp(transchnl,"120" ) == 0 )
	            strcpy(transchnl,"03");
   		     PutPoolDataByName( "BUSIIB", "transChnl", 0, 0,transchnl, 0 );

	        PutPoolDataByName( "BUSIIB", "btchStat", j, 0, "0", 0);
		}
            WriteLog(ERR_LVL,"ggggggg,[%s]",amt);
    }
    if(strncmp(Para.Para[2],"CBS0000300",10)==0)
    {
        msgvalue[0]='1';
        if(bzw[0] == '0' )
        {
            GetPoolDataByName( "ABSHEAD", "charge_no", 0, 0,&num, 0 );
            WriteLog(ERR_LVL,"循环个数,[%ld]",num);
            for(j = 0 ; j < num ;j++ )
            {
                memset(BatchNo,0,sizeof(BatchNo));
                memset(BatchName,0,sizeof(BatchName));
                GetPoolDataByName( "BUSIIB", "backup1", j, 0,BatchNo, 0 );
                GetPoolDataByName( "BUSIIB", "backup2", j, 0,BatchName, 0 );
                rtrim(BatchNo);
                rtrim(BatchName);
                memset(name1,0x00,sizeof(name1));
                sprintf(name1,"%s#%s|",BatchNo,BatchName);
                rtrim(name1);
                if ( strlen(msgvalue+1) + strlen(name1) < 126 )
                    strcat(msgvalue+1,name1);
                else
                {
                    if ( strlen(msgvalue1) + strlen(name1) < 386 )
                        strcat(msgvalue1,name1);
                    else
                        break;
                }
            }
            rtrim(msgvalue);
            rtrim(msgvalue1);
            if ( strlen(msgvalue) == 0 )
            {
                strcpy(msgvalue,"=查询不存在=");
                lerrno=403;
                PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&lerrno, 0 );
            }
            WriteLog(ERR_LVL,"msgvalue=[%s][%s]",msgvalue,msgvalue1);
            PutPoolDataByName( "BUSIIB", "backup5", 0, 0,msgvalue, 0 );
            PutPoolDataByName("BUSIIB","transfilename", 0, 0,msgvalue1, 0 );
            GetPoolDataByName( "ABSHEAD", "charge_no", 0, 0, &num, 0);
            /*sprintf(body,"%ld",num);*/
            /*PutPoolDataByName( "BUSIIB", "body", 0, 0, body, 0);*/
            PutPoolDataByName( "BUSIIB", "backup4", 0, 0,"feeltem", 0 );
        }
        else if(bzw[0] == '1')
        {
            PutPoolDataByName( "BUSIIB", "backup4", 0, 0,"corpName|custName|corpNo", 0 );
            GetPoolDataByName( "BUSIIB", "backup5", 0, 0,BatchNo, 0 );
            rtrim(BatchNo);
            memset(BatchName,0,sizeof(BatchName));
            EXEC SQL select batchname into :BatchName from t_multi_batchno where batchno = :BatchNo;
            if (SQLCODE && SQLCODE != 100)
            {
                WriteLog(ERR_LVL,"查询项目编号错,SQLCODE=[%ld]",SQLCODE);
                lerrno = 99999;
                sprintf( err_msg, "查询项目编号错" );
                PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)lerrno, 0 );
                PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
                lerrno = 90001;
                PutPoolDataByName( "ABSHEAD", "app_err_no",0,0,(char *)&lerrno,0);
                PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0,"-1", 0 );
                return( -1);
            }
            rtrim(BatchName);
            GetPoolDataByName( "PAGTBUF", "cstm_name", 0, 0,custName, 0 );
            rtrim(custName);
            sprintf(msgvalue,"1%s|%s|%s",BatchName,custName,BatchNo);
            PutPoolDataByName( "BUSIIB", "backup5", 0, 0,msgvalue, 0 );
        }
        else if(bzw[0] == '2')
        {
            PutPoolDataByName( "BUSIIB", "backup4", 0, 0,"flowNo", 0 );
            seq[0]='1';
            GetPoolDataByName( "APSYS", "RltSysSeqNum", 0, 0,seq+1, 0 );
            rtrim(seq);
            strcpy(multi_reserve.seqno,seq+1);
            strcat(seq,"1");
            PutPoolDataByName( "BUSIIB", "backup5", 0, 0,seq, 0 );
            GetPoolDataByName( "PAGTBUF", "data1", 0, 0,multi_reserve.reserve1, 0 );
            GetPoolDataByName( "PAGTBUF", "data2", 0, 0,multi_reserve.reserve2, 0 );
            GetPoolDataByName( "PAGTBUF", "data3", 0, 0,multi_reserve.reserve3, 0 );
            GetPoolDataByName( "PAGTBUF", "data4", 0, 0,multi_reserve.reserve4, 0 );
            GetPoolDataByName( "PAGTBUF", "data5", 0, 0,multi_reserve.reserve5, 0 );
            GetPoolDataByName( "PBSYS", "PbDate", 0, 0, multi_reserve.trandate, 0 );
            rtrim( multi_reserve.reserve1 );
            rtrim( multi_reserve.reserve2 );
            rtrim( multi_reserve.reserve3 );
            rtrim( multi_reserve.reserve4 );
            rtrim( multi_reserve.reserve5 );
            EXEC SQL INSERT INTO t_multi_reserve VALUES ( :multi_reserve );
            if( SQLCODE  )
            {
                WriteLog( ERR_LVL,"插入网银多渠道备注表错![%d] [%s]",SQLCODE ,sqlca.sqlerrm );
                PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, "系统错,请稍后再试", 0 );
                return -1;
            }
        }
        else
        {
            WriteLog(ERR_LVL,"标志位错误bz[%c]",bzw[0]);
            PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, "-1", 0 );
            return -1;
        }
    }
    if(strncmp(Para.Para[2],"CBS0000310",10)==0)
    {
        GetPoolDataByName( "PAGTBUF", "accno", 0, 0, acc, 0);
        rtrim(acc);
        ret = AccQryPub5711( acc );
        if( ret )
        {
            WriteLog( ERR_LVL, "调用5711查询转出账号[%s]信息失败", acc );
            lerrno = 200090;
            PutPoolDataByName("ABSHEAD","app_err_no",0,0, (char *)&lerrno,0);
            PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, "-1", 0 );
            return ( -1 );
        }
        /* 可用余额 */
        GetPoolDataByName ( "CBS", "TxFlag", 0, 0,aval_bal, 0);
        b_bal = atof(aval_bal)/100.00;
        memset(aval_bal,0x00,sizeof(aval_bal));
        sprintf(bal,"%.2f",b_bal);
        PutPoolDataByName( "BUSIIB", "bal", 0, 0,bal, 0);
        GetPoolDataByName( "BUSIIB", "payAmt", 0, 0, bal, 0);
        PutPoolDataByName( "BUSIIB", "realFee", 0, 0, bal, 0);
        memset(bal,0x00,sizeof(bal));
        strcpy(bal,"0.00");
        PutPoolDataByName( "BUSIIB", "realManFee", 0, 0, bal, 0);
    }
    return 0;
}
long
Data_wyqy(char *para)
{
    EXEC SQL BEGIN DECLARE SECTION;
        char    chno[20];
        char    trancode[40+1];
    EXEC SQL END DECLARE SECTION;
    char param[100+1];
    char err_msg[40+1];
    int ret = 0;
    long errcode = 0;
    char *p;

    memset( chno, 0, sizeof( chno ) );
    memset( param, 0, sizeof( param ) );
    memset( trancode, 0, sizeof( trancode ) );

    GetPoolDataByName( "PBSYS", "RTranCode", 0, 0, trancode, 0 );
    rtrim( trancode );
    GetPoolDataByName( "PBSYS", "RChnlNo", 0, 0, chno, 0 );
    rtrim( chno );
    sprintf(param, "700|%s", trancode );
    PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, "-1", 0 );
    PutPoolDataByName( "PBSYS", "SChnlNo", 0, 0, chno, 0 );

    WriteLog( ERR_LVL, "Step1[700700_1]:网银交易前处理" );
    if( pbbusi700beforetran() != 0 )
    {
        WriteLog(ERR_LVL, "网银交易前处理[%s]", param);
        errcode = 99999;
        strcpy( err_msg, "网银交易前处理错" );
        PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode, 0 );
        PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
        goto end;
    }
   
    p=sca_iconv("UTF-8","GB18030",(char *)PkgBuff.DataBuff);
    memset(PkgBuff.DataBuff,0,sizeof(PkgBuff.DataBuff));
    memcpy(PkgBuff.DataBuff,p,strlen(p));
    free(p);
    WriteLog(ERR_LVL, "转换后报文[%s]", PkgBuff.DataBuff);
    WriteLog( ERR_LVL, "Step2[700700_2]:外部渠道接入交易[%s]解包", trancode );
    
    if( Data_LoanXMLUnpack( param ) != 0 )
    {
        WriteLog(ERR_LVL, "外部渠道接入交易解包出错[%s]", param);
        errcode = 99999;
        strcpy( err_msg, "解包出错" );
        PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode, 0 );
        PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
        goto end;
    }
    
    WriteLog( ERR_LVL, "Step3[700700_3]:登记网银日志6522" );
    memset( param, 0, sizeof( param ) );
    strcpy( param, "0000" );
    if( NetBankLogReg( param ) != 0 )
    {
        WriteLog(ERR_LVL, "登记网银日志错[%s]", param);
        errcode = 99999;
        strcpy( err_msg, "登记网银日志错" );
        PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode, 0 );
        PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
        goto end;
    }
    
    ret = NetParaConv( "certTyp" );
    if( ret)
    {
        WriteLog( ERR_LVL, "网银参数转换错");
        strcpy( err_msg, "网银参数转换错");
        errcode = 99999;
        PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode, 0 );
        PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
        goto end;
    }
    
    /* Added by MSJ 20131016 - Start */
    if( strcmp(trancode, "CBS1000380") == 0 )
    {
        WriteLog( ERR_LVL, "Step4[700700_4]:调用查询交易" );
        ret = Qry_NoCard_info(trancode);
        if(ret !=0 )
        {
            WriteLog( ERR_LVL, "调用Qry_NoCard_info()错" );
        }
        goto end;
    }
    /** 新增柜面查询交易 **/
    else if (strcmp(trancode, "CBS1000390") == 0) 
    {
       ret =  QuerySignInfoMain( );
       return bat_qry_prn_after();
    }
    else
    {
        WriteLog( ERR_LVL, "Step4[700700_4]:调用签约/撤约/修改交易" );
        ret = NoCard_Defray(trancode);
        if(ret !=0 )
        {
            WriteLog( ERR_LVL, "调用NoCard_Defray()错" );
        }
        goto end;
    }
    /* Added by MSJ 20131016 - End */
    
end:
    memset( param, 0, sizeof( param ) );
    if(strncmp(trancode, "CBS1000360", 10) == 0 )
    {
        strcpy( param, "CBS1000361|111|0" );
    }
    else if(strncmp( trancode, "CBS1000370", 10 ) == 0 )
    {
        strcpy( param, "CBS1000371|111|0" );
    }
    else if(strncmp(trancode, "CBS1000380", 10) == 0)
    {
        strcpy( param, "CBS1000381|111|0" );
    }
    else
    {
        WriteLog(ERR_LVL, "交易码错[%s]", trancode);
        return( -1 );
    }
    
    WriteLog( ERR_LVL, "Step5[700700_5]:通用后处理" );
    if( pbbusi700afterdeal( param ) !=0 )
    {
        WriteLog(ERR_LVL, "后处理失败[%s]", param);
        return( -1 );
    }
    return 0;
}


/*****************************************
 *    Function    :    pbbusi700afterdeal
 *    DESC        :    网银后处理
 *    INPUT       :    返回交易码|返回交易属性|是否账务类交易(0-否 1-是)
                例:    CBS0000010|111|1|111|
                    交易属性：
                        第一位:1-实时 2-批量
                        第二位:1-发送 2-接收
                        第三位:1-报文 2-文件
 *    Return:   0 -- 成功  -1 -- 失败
 *    ------------------------------------
*****************************************/
int  npbbusi700afterdeal( char * para )
{
    EXEC SQL BEGIN DECLARE SECTION;
        char packstr[20+1];
        char FTranCode[20+1];
        char trancode[6+1];
        char errcode[20+1];
        char errmsg[100+1];
        char cntoutf[1+1];
        char transtatus[20+1];
        char trandate[8+1];
        char chnl_no[3+1];
        char seqno[10+1];
        /*定义XML报文变量*/
        char seqnb[15+1];
        char seqNb[15+1];
        char snddt[8+1];
        char sndmbrcd[4+1];
        char msgcd[10+1];
        char sndtm[6+1];
        char rcvmbrcd[4+1];
        char sndappcd[3+1];
        char calltyp[4+1];

        char s_ret_code[20+1];
        /* Modified by MSJ - 20130227 */
        /**char ret_msg[40+1];**/
        char ret_msg[80+1];

        long app_err_no = 0;
    EXEC SQL END   DECLARE SECTION;

    ATOM_PARA Para ;        /*  配置参数    */
    char s_msgtype[8+1];
    long l_msgtype;
    long ret;

    memset( &Para, 0x00, sizeof(ATOM_PARA) );
    ParseAtomPara( &Para , para );
    WriteLog( ERR_LVL, "交易码Para.Para[0]=[%s]交易属性Para.Para[1][%s]",
        Para.Para[0], Para.Para[1] );

    memset( errcode, 0x00, sizeof(errcode) );
    memset( errmsg, 0x00, sizeof(errmsg) );
    memset( chnl_no, 0x00, sizeof(chnl_no) );
    memset( s_ret_code, 0x00, sizeof(s_ret_code) );
    memset( ret_msg, 0x00, sizeof(ret_msg) );
    memset( trancode, 0x00, sizeof(trancode) );
    memset( cntoutf,0x00,sizeof(cntoutf));
    /*add by dly 20120330 begin*/
    memset( calltyp, 0x00, sizeof(calltyp));
    /*add by dly 20120330 end*/

    GetPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&app_err_no, 0 );
    GetPoolDataByName( "ABSHEAD", "_error_code", 0, 0, ret_msg, 0 );
    GetPoolDataByName( "PBSYS", "RChnlNo", 0, 0, chnl_no, 0);
    GetPoolDataByName( "BUSIIB", "thsretCd", 0, 0, errcode, 0 );
    GetPoolDataByName( "BUSIIB", "thsdesc", 0, 0, errmsg, 0 );
    GetPoolDataByName( "BUSIIB", "thcn2utf8", 0, 0, cntoutf, 0 );

    memset( trandate, 0x00, sizeof(trandate) );
    memset( seqno, 0x00, sizeof(seqno) );
    memset( transtatus, 0x00, sizeof(transtatus) );

    GetPoolDataByName( "PBSYS", "PbDate", 0, 0, trandate, 0 );
    GetPoolDataByName( "PBSYS", "SrcJourNo", 0, 0, seqno, 0 );
    GetPoolDataByName( "PBSYS", "TranCode", 0, 0, trancode, 0 );
    trim(cntoutf);
    if ( strlen( cntoutf ) == 0 )
    {
        cntoutf[0]='1';
        PutPoolDataByName( "BUSIIB", "thcn2utf8", 0, 0, cntoutf, 0);
    }

    if( errcode[0] == '0' )
    {
        transtatus[0] = '0';
        PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, "000000", 0);
        WriteLog( ERR_LVL, "交易成功" );
    }
    else
    {
        transtatus[0] = '1';
        WriteLog( ERR_LVL, "交易失败" );
        sprintf( s_ret_code, "%d", app_err_no );
        WriteLog( ERR_LVL, "s_ret_code[%s]\n", s_ret_code );
        ret = NetBankRetConv( s_ret_code, ret_msg, chnl_no, trancode );    
        rtrim( s_ret_code );
        rtrim( ret_msg );
        WriteLog( APP_LVL, "s_ret_code[%s], ret_msg[%s]\n", s_ret_code, ret_msg );
        PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, s_ret_code, 0);
        PutPoolDataByName( "BUSIIB", "thsdesc", 0, 0, ret_msg, 0);
        
    }

    /* del by ch 20110222 EXEC SQL UPDATE T_PB_NET_LOG SET transtats[1,1]=:transtatus[0]
        WHERE trandate=:trandate AND seqno=:seqno;
    if( SQLCODE != 0 )
    {
        WriteLog( ERR_LVL, "更新网银日志表失败[%s][%s][%d]",
            trandate, seqno, SQLCODE );
        return -1;
    }
    else if( sqlca.sqlerrd[2] == 0 )
    {
        WriteLog( ERR_LVL, "更新网银日志表失败[%s][%s]更新条数为[%d]",
            trandate, seqno, sqlca.sqlerrd[2] );
        return -1;
    }
    del end*/
    EXEC SQL UPDATE T_PB_NET_LOG SET transtats[1,1]=:transtatus[0],
    /*add by ch 20110222*/
        result = :ret_msg
    /*add end*/
        WHERE trandate=:trandate AND seqno=:seqno;
    if( SQLCODE != 0 )
    {
        WriteLog( ERR_LVL, "更新网银日志表失败[%s][%s][%d]",
            trandate, seqno, SQLCODE );
        return -1;
    }
    else if( sqlca.sqlerrd[2] == 0 )
    {
        WriteLog( ERR_LVL, "更新网银日志表失败[%s][%s]更新条数为[%d]",
            trandate, seqno, sqlca.sqlerrd[2] );
        return -1;
    }
    /*    账务类交易,需更新网银流水表    */    
    if( Para.Para[2][0] == '1' )
    {
        EXEC SQL UPDATE T_PB_NET_DTL SET transtats[1,1]=:transtatus[0],
        /*add by ch 20110222*/
            result = :ret_msg
        /*add end*/
            WHERE trandate=:trandate AND seqno=:seqno;
        if( SQLCODE != 0 )
        {
            WriteLog( ERR_LVL, "更新网银流水表失败[%s][%s][%d]",
                trandate, seqno, SQLCODE );
            return -1;
        }
        else if( sqlca.sqlerrd[2] == 0 )
        {
            WriteLog( ERR_LVL, "更新网银流水表失败[%s][%s]更新条数为[%d]",
                trandate, seqno, sqlca.sqlerrd[2] );
            return -1;
        }
    }
    /*    赋值返回包头    */
    GetPoolDataByName( "BUSIIB", "thmseqNb", 0, 0, seqnb, 0);    
    GetPoolDataByName( "BUSIIB", "thmsndDt", 0, 0, snddt, 0);
    GetPoolDataByName( "BUSIIB", "thmsndMbrCd", 0, 0, sndmbrcd, 0);
    GetPoolDataByName( "BUSIIB", "thmmsgCd", 0, 0, msgcd, 0);
    GetPoolDataByName( "BUSIIB", "thmcallTyp", 0, 0, calltyp, 0);
    GetPoolDataByName( "BUSIIB", "thmsndAppCd", 0, 0, sndappcd, 0);

    PutPoolDataByName( "BUSIIB", "thmrefSeqNb", 0, 0, seqnb, 0);    
    PutPoolDataByName( "BUSIIB", "thmrefSndDt", 0, 0, snddt, 0);
    PutPoolDataByName( "BUSIIB", "thmrefSndMbrCd", 0, 0, sndmbrcd, 0);
    PutPoolDataByName( "BUSIIB", "thmrefMsgCd", 0, 0, msgcd, 0);
    PutPoolDataByName( "BUSIIB", "thmrefCallTyp", 0, 0, calltyp, 0);
    PutPoolDataByName( "BUSIIB", "thmrefSndAppCd", 0, 0, sndappcd, 0);

    PutPoolDataByName( "BUSIIB", "thpsndMbrCd", 0, 0, "6500", 0);
    PutPoolDataByName( "BUSIIB", "thpsndAppCd", 0, 0, "CBS", 0);
    PutPoolDataByName( "BUSIIB", "thprcvMbrCd", 0, 0, "0000", 0);
    PutPoolDataByName( "BUSIIB", "thprcvAppCd", 0, 0, "ESB", 0);

    PutPoolDataByName( "BUSIIB", "thmsndMbrCd", 0, 0, "6500", 0);
    PutPoolDataByName( "BUSIIB", "thmsndAppCd", 0, 0, "CBS", 0);
    PutPoolDataByName( "BUSIIB", "thmrcvMbrCd", 0, 0, "0000", 0);
    PutPoolDataByName( "BUSIIB", "thmrcvAppCd", 0, 0, "ESB", 0);

    PutPoolDataByName( "BUSIIB", "thsmbrCd", 0, 0, "6500", 0);
    PutPoolDataByName( "BUSIIB", "thsappCd", 0, 0, "NNS", 0);

    memset( seqNb, 0x00, sizeof(seqNb) );
    memcpy( seqNb, trandate, 8 );
    memcpy( seqNb+8, seqno+3, 7 );
    PutPoolDataByName( "BUSIIB", "thmseqNb", 0, 0, seqNb, 0);    

    /*    赋值跟踪码    */
    MsgFlagHandleNew( "700" , 'S' , "3"  ) ;
    memset( s_msgtype, 0, sizeof(s_msgtype) );
    memcpy( s_msgtype, seqno + 2, 8 );
    l_msgtype = atol( s_msgtype );
    TraceCodeHandleNew ( "700" , 'S' ,  &l_msgtype ) ;

    /*    赋值交易属性    */
    PutPoolData30(V_SrcID, 0 , 0 , Para.Para[1], VAR_SrcID.cb);

    /*    赋值交易码    */
    PutPoolDataByName( "BUSIIB", "thmmsgCd", 0, 0, Para.Para[0], 0 );

    /*    取外部交易码    */
    memset( FTranCode, 0x00, sizeof(FTranCode) );
    GetPoolDataByName( "PBSYS", "RTranCode", 0, 0, FTranCode, 0 );

    /*    报文打包    */
    memset( packstr, 0x00, sizeof(packstr) );
    sprintf( packstr, "700|%s", FTranCode );
    ret = Data_LoanXMLPack( packstr );
    if( ret < 0 )
    {
        WriteLog( ERR_LVL, "打包失败[%s]", packstr );
        return 0;
    }
    WriteLog( ERR_LVL, "DataBuff[%s][%d]", PkgBuff.DataBuff, PkgBuff.DataLen );

    /*    增加MAC    */

    /*    发送    */
    ret = Comm_AcCall("700001|928000");
    if( ret < 0 )
    {
        WriteLog( ERR_LVL, "发送失败" );
        return 0;
    }

    return 0;
}
int
Qry_NoCard_info()
{
    EXEC SQL BEGIN DECLARE SECTION;
        struct s_pagt_signinfo t_nocard;
        char content[251];
    EXEC SQL END   DECLARE SECTION;

    char err_msg[50],certTyp[2],certNb[20];
    long errcode = 0;
    int ret = 0;
    char amt[18];
    char   *pointer = "|";
    char    Tol_Amt[16+1];
    char   one_amt[16+1];

    memset (&t_nocard, 0x00, sizeof( struct s_pagt_signinfo ) );
    memset( content, 0x00, sizeof( content ) );
    memset( err_msg, 0x00, sizeof( err_msg ) );
    memset( certTyp, 0x00, sizeof( certTyp ) );
    memset( certNb, 0x00, sizeof( certNb ) );
    memset( amt, 0x00, sizeof( amt ) );
    memset( Tol_Amt, 0x00, sizeof( Tol_Amt ) );
    memset( one_amt, 0x00, sizeof( one_amt ) );

    GetPoolDataByName( "BUSIIB", "cardNb", 0, 0, t_nocard.prsn_no, 0 );
    GetPoolDataByName( "PAGTBUF", "papertype", 0, 0, certTyp, 0 );
    GetPoolDataByName( "BUSIIB", "certNb", 0, 0, certNb, 0 );
    rtrim( t_nocard.prsn_no );
    rtrim( certTyp );
    rtrim( certNb );
    WriteLog( APP_LVL, "t_nocard.prsn_no[%s]certTyp[%s]certNb[%s]", t_nocard.prsn_no, certTyp, certNb );
    
    EXEC SQL SELECT * into :t_nocard FROM t_pagt_signinfo
        WHERE batchno = '6680000000' AND prsn_no = :t_nocard.prsn_no;
    if ( SQLCODE && SQLCODE != SQLNOTFOUND)
    {
        sprintf( err_msg, "数据库错%ld", SQLCODE );
        WriteLog( ERR_LVL, "数据库错%ld", SQLCODE );
        PutPoolDataByName("ABSHEAD", "_error_code", 0, 0,err_msg, 0);
        PutPoolDataByName("ABSHEAD", "_error_code", 0, 0, "无卡支付签约业务失败", 0);
        PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, "-1", 0 );
        errcode = 99999;
        PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode, 0 );
        return -1;
    }    
    if( SQLCODE == SQLNOTFOUND )
    {
        WriteLog( ERR_LVL, "无该客户签约信息" );
        sprintf( err_msg, "无该客户签约信息[%s]", t_nocard.prsn_no );
        PutPoolDataByName("ABSHEAD", "_error_code", 0, 0,err_msg, 0);
        PutPoolDataByName("ABSHEAD", "_error_code", 0, 0, "无该客户签约信息", 0);
        PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, "1", 0 );
        errcode = 99999;
        PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode, 0 );
        return -1;
    }
    
    if(t_nocard.signinfo1[0]=='2')
    {
        WriteLog( ERR_LVL, "该卡已解约" );
        sprintf( err_msg, "该卡已解约" );
        PutPoolDataByName("ABSHEAD", "_error_code", 0, 0,err_msg, 0);
        PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, "-1", 0 );
        errcode = 99999;
        PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode, 0 );
        return -1;
    }
    
    if(t_nocard.cert_type[0] != certTyp[0])
    {
        WriteLog( ERR_LVL, "证件类型错误" );
        sprintf( err_msg, "证件类型错误" );
        PutPoolDataByName("ABSHEAD", "_error_code", 0, 0,err_msg, 0);
        PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, "-1", 0 );
        errcode = 99999;
        PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode, 0 );
        return -1;
    }
    rtrim( t_nocard.cert_no );
    rtrim(certNb);
    if( strcmp( t_nocard.cert_no, certNb ) != 0 )
    {
        WriteLog( ERR_LVL, "证件号错误" );
        sprintf( err_msg, "证件号错误" );
        PutPoolDataByName("ABSHEAD", "_error_code", 0, 0,err_msg, 0);
        PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, "-1", 0 );
        errcode = 99999;
        PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode, 0 );
        return -1;
    }
    
    trim(t_nocard.contractno);
    PutPoolDataByName( "BUSIIB", "payNb", 0, 0, t_nocard.contractno, 0 );
    WriteLog( APP_LVL, "t_nocard.contractno[%s]", t_nocard.contractno );

    WriteLog( APP_LVL, "t_nocard.signinfo1[%s]", t_nocard.signinfo1 );
    /** Modified by MSJ for the flag 20150309 - Start **/
    if(t_nocard.signinfo1[0] == '0')
    {
        PutPoolDataByName( "BUSIIB", "stlFlg", 0, 0, "1", 0 );
    }
    else
    {
        PutPoolDataByName( "BUSIIB", "stlFlg", 0, 0, "0", 0 );
    }
    /** Modified by MSJ for the flag 20150309 - End **/

    WriteLog( APP_LVL, "t_nocard.signinfo6[%s]", t_nocard.signinfo6 );
    PutPoolDataByName( "BUSIIB", "merchNb", 0, 0, t_nocard.signinfo6, 0 );    

    EXEC SQL SELECT content INTO :content
        FROM t_pay_sys_para
        WHERE inst_no = "CARD"
        AND data_code = "NOCARDCONSUME";
    if(sqlca.sqlcode != 0)
    {
        WriteLog(ERR_LVL,"查询t_pay_sys_para出错！[%d]!", sqlca.sqlcode );
        PutPoolDataByName("ABSHEAD", "_error_code", 0, 0, "查询t_pay_sys_para出错", 0);
        PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, "-1", 0 );
        errcode = 99999;
        PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode, 0 );
        return ( -1 );
    }
    rtrim(content);

    sprintf( Tol_Amt, "%s" , strtok( content,pointer ) );
    sprintf( one_amt, "%s", strtok( NULL, pointer ) );
    PutPoolDataByName( "BUSIIB", "amt", 0, 0, one_amt, 0 );
    PutPoolDataByName( "BUSIIB", "totalAmt", 0, 0, Tol_Amt, 0 );


    PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0,"000000", 0 );
    PutPoolDataByName( "BUSIIB", "thsdesc", 0, 0, "交易成功", 0 );
    return 0;
}


/*****************************************************
**函数描述     : 手机银行签撤约 
**函数用途     : 
**输入         ：  
**输出         :  
**创建日期     ：2013/10/16
**最后修改日期 ：
**Create by    : MSJ
*****************************************************/
int NoCard_Defray( char *trancode )
{
    EXEC SQL BEGIN DECLARE SECTION;
        struct s_pagt_signinfo t_NoCard;
    EXEC SQL END   DECLARE SECTION;
    char dealDtTm[20+1];
    char custID[14+1];
    char tran_time[20+1];
    char tran_code[10+1];
    char stat[1+1];
    char err_msg[128+1];
    long errcode = 0;
    int ret = 0;
    
    memset( &t_NoCard, 0x00, sizeof(struct s_pagt_signinfo) );
    memset( dealDtTm, 0x00, sizeof( dealDtTm ) );
    memset( custID, 0x00, sizeof( custID ) );
    memset( tran_time, 0x00, sizeof( tran_time ) );
    memset( tran_code, 0x00, sizeof( tran_code ) );
    memset( stat, 0x00, sizeof( stat ) );
    memset( err_msg, 0x00, sizeof( err_msg ) );
    
    strcpy( tran_code, trancode );
    WriteLog( APP_LVL, "外部交易码[%s]", tran_code );
    
    /*第三方签约项目编号默认为6680000000*/
    strcpy( t_NoCard.batchno,"6680000000" );
    trim( t_NoCard.batchno );
    WriteLog( APP_LVL, "项目编号[%s]", t_NoCard.batchno );
    
    /*项目名称默认第三方签约*/
    strcpy(t_NoCard.batchname,"第三方签约");
    trim( t_NoCard.batchname );
    WriteLog( APP_LVL, "项目编号[%s]", t_NoCard.batchname );
    
    /*签约状态*/
    /** Modified by MSJ for the flag 20150309 - Start **/
    GetPoolDataByName( "BUSIIB", "chargeTyp", 0, 0, t_NoCard.signinfo1, 0 );
    trim(t_NoCard.signinfo1);
    WriteLog(APP_LVL,"signinfo1[%s]",t_NoCard.signinfo1);
    if( t_NoCard.signinfo1[0]=='0' )
        t_NoCard.signinfo1[0]='1';
    else if( t_NoCard.signinfo1[0]=='1' )
        t_NoCard.signinfo1[0]='0';
    WriteLog(APP_LVL,"signinfo1[%s]",t_NoCard.signinfo1);
    /** Modified by MSJ for the flag 20150309 - End **/

    /*账号*/
    GetPoolDataByName( "BUSIIB", "cardNb", 0, 0, t_NoCard.acc, 0 );
    trim(t_NoCard.acc);
    WriteLog(APP_LVL,"acc[%s]\n",t_NoCard.acc);
     
    /*缴费编号*/
    strcpy( t_NoCard.prsn_no,t_NoCard.acc );
    trim(t_NoCard.prsn_no);
    WriteLog(APP_LVL,"prsn_no[%s]\n",t_NoCard.prsn_no);
    
    /*户名*/
    GetPoolDataByName( "BUSIIB", "custNm", 0, 0, t_NoCard.name, 0 );
    trim(t_NoCard.name);
    WriteLog(APP_LVL,"name[%s]\n",t_NoCard.name);
    
    /*证件类型*/
    GetPoolDataByName( "PAGTBUF", "papertype", 0, 0, t_NoCard.cert_type, 0 );
    trim(t_NoCard.cert_type);
    WriteLog(APP_LVL,"cert_type[%s]\n",t_NoCard.cert_type);
    
    /*证件号码*/
    GetPoolDataByName( "BUSIIB", "certNb", 0, 0, t_NoCard.cert_no, 0 );
    trim(t_NoCard.cert_no);
    WriteLog(APP_LVL,"paper_no [%s]",t_NoCard.cert_no);

    /*签约手机号*/
    GetPoolDataByName( "BUSIIB", "payNb", 0, 0, t_NoCard.contractno, 0 );
    trim(t_NoCard.contractno);
    WriteLog(APP_LVL,"contractno=[%s]\n",t_NoCard.contractno);
    
    /*客户号
    sprintf(t_NoCard.outcontractno, "MBS%s", t_NoCard.contractno);
    WriteLog(APP_LVL,"contractno=[%s]\n",t_NoCard.outcontractno);*/

    /*取系统日期*/
    PayGetCoreDate( t_NoCard.signdate );
    trim(t_NoCard.signdate);
    WriteLog( APP_LVL,"系统日期[%s]",t_NoCard.signdate);

    /*获取时间*/
    dtcurrent( &t_NoCard.signtime );
    dtcurrent( &t_NoCard.modtime );
    
    /*操作机构默认为9996*/
    strcpy(t_NoCard.instno,"9996");
    WriteLog( APP_LVL, "instno[%s]", t_NoCard.instno );
    
    /*操作柜员默认为888886*/
    strcpy(t_NoCard.tlrno,"888886");
    WriteLog( APP_LVL, "tlrno[%s]", t_NoCard.tlrno );
    
    /* 外部交易码记入signinfo5 */
    strcpy( t_NoCard.signinfo5, tran_code );
    WriteLog( APP_LVL, "signinfo5[%s]", t_NoCard.signinfo5 );
    
    /* 运营商记入signinfo6 */
    GetPoolDataByName( "BUSIIB", "merchNb", 0, 0, t_NoCard.signinfo6, 0 );
    trim(t_NoCard.signinfo6);
    WriteLog( APP_LVL, "signinfo6[%s]", t_NoCard.signinfo6 );
    
    /* 签/撤约渠道记入signinfo3 */
    GetPoolDataByName( "BUSIIB", "transChnl", 0, 0, t_NoCard.signinfo3, 0 );
    trim(t_NoCard.signinfo3);
    WriteLog( APP_LVL, "signinfo3[%s]", t_NoCard.signinfo3 );
    
    /* 系统标识记入signinfo4 */
    GetPoolDataByName( "BUSIIB", "thmsndAppCd", 0, 0, t_NoCard.signinfo4, 0 );
    trim(t_NoCard.signinfo4);
    WriteLog( APP_LVL, "signinfo4[%s]", t_NoCard.signinfo4 );
    
    /* 单笔限额入signinfo5 
    strcpy( t_NoCard.signinfo1, tran_code );
    WriteLog( APP_LVL, "signinfo1[%s]", signinfo5 );
    
     单日限额记入signinfo6 
    strcpy( t_NoCard.signinfo1, tran_code );
    WriteLog( APP_LVL, "signinfo1[%s]", signinfo6 );
    */
    
    dttoasc( &t_NoCard.signtime, tran_time );
    strncpy( dealDtTm, tran_time, 4 );
    strncat( dealDtTm, tran_time+5, 2 );
    strncat( dealDtTm, tran_time+8, 2 );
    strncat( dealDtTm, tran_time+11, 2 );
    strncat( dealDtTm, tran_time+14, 2 );
    strncat( dealDtTm, tran_time+17, 2 );
    WriteLog( APP_LVL, "tran_time[%s] dealDtTm[%s]", tran_time, dealDtTm );
    
    /** Modified by MSJ for the flag 20150309 - Start **/
    if( strcmp(tran_code,"CBS1000360")== 0
           && t_NoCard.signinfo1[0]=='0'
      )
    {
        ret = NoCard_Del(t_NoCard);
        if( ret )
        {
            WriteLog(ERR_LVL,"撤约失败.错误码[%d]\n",ret);
            strcpy( stat, "1" );
            errcode = 99999;
            PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode, 0 );
            PutPoolDataByName( "BUSIIB", "flag", 0, 0, stat, 0 );
            PutPoolDataByName( "BUSIIB", "dealDtTm", 0, 0, dealDtTm, 0 );
            return -1;
        }
    }
    else if( strcmp(tran_code,"CBS1000360")==0
           && t_NoCard.signinfo1[0]=='1'
      )
    {
        ret = NoCard_Ins(t_NoCard);
        if( ret )
        {
            WriteLog(ERR_LVL,"签约失败.错误码[%d]\n",ret);
            strcpy( stat, "1" );
            errcode = 99999;
            PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode, 0 );
            PutPoolDataByName( "BUSIIB", "flag", 0, 0, stat, 0 );
            PutPoolDataByName( "BUSIIB", "dealDtTm", 0, 0, dealDtTm, 0 );
            return -1;
        }
    }
    /** Modified by MSJ for the flag 20150309 - End **/
    
    if( strcmp(tran_code,"CBS1000370")== 0 )
    {
        ret = NoCard_Mod(t_NoCard);
        if( ret )
        {
            WriteLog(ERR_LVL,"签约失败.错误码[%d]\n",ret);
            strcpy( stat, "1" );
            errcode = 99999;
            PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode, 0 );
            PutPoolDataByName( "BUSIIB", "flag", 0, 0, stat, 0 );
            PutPoolDataByName( "BUSIIB", "dealDtTm", 0, 0, dealDtTm, 0 );
            return -1;
        }
    }
    
    strcpy( stat, "0" );
    PutPoolDataByName( "BUSIIB", "flag", 0, 0, stat, 0 );
    PutPoolDataByName( "BUSIIB", "dealDtTm", 0, 0, dealDtTm, 0 );
    
    if( strcmp(stat,"0")==0 )
    {
        PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, "000000", 0 );
        PutPoolDataByName( "BUSIIB", "thsdesc", 0, 0, "交易成功", 0 );
    }
    WriteLog( ERR_LVL, "------Call Function NoCArd_Defray() Success---------" );
    
    return 0;
}



int NoCard_Ins(t_nocard1)
struct s_pagt_signinfo t_nocard1;
{
    EXEC SQL BEGIN DECLARE SECTION;
        struct s_pagt_signinfo t_nocard;
        struct s_pagt_signinfo l_nocard;
        char old_mphone[11+1];
        int  i_count = 0;
    EXEC SQL END DECLARE SECTION;
    char err_msg[128+1];
    char str_flag[60+1];
    char cardNb[25+1];
    char custNm[121];
    char core_custNm[121];
    char CdmAccStat[60+1];
    char SdmAccStat[60+1];
    char CardAccStat[60+1];
    char acc_stats[10+1];
    char card_stats[10+1];
    int flag ;
    int tran_flag = 0;
    long errcode;
    int ret;


    memset(&t_nocard,0,sizeof(struct s_pagt_signinfo));
    memset(&l_nocard,0,sizeof(struct s_pagt_signinfo));
    memset(err_msg,0,sizeof(err_msg));
    memset(str_flag,0,sizeof(str_flag));
    memset(old_mphone,0x00,sizeof(old_mphone));
    memset(cardNb,0x00,sizeof(cardNb));
    memset(custNm,0x00,sizeof(custNm));
    memset(core_custNm,0x00,sizeof(core_custNm));
    memset( CdmAccStat, 0x00, sizeof(CdmAccStat) );
    memset( SdmAccStat, 0x00, sizeof(SdmAccStat) );
    memset( CardAccStat, 0x00, sizeof(CardAccStat) );
    memset( acc_stats, 0x00, sizeof(acc_stats) );
    memset( card_stats, 0x00, sizeof(card_stats) );
    
    GetPoolDataByName( "BUSIIB", "custNm", 0, 0, custNm, 0 );
    rtrim( custNm );
    WriteLog( APP_LVL, "custNm[%s]", custNm );
    
    GetPoolDataByName( "BUSIIB", "cardNb", 0, 0, cardNb, 0 );
    trim( cardNb );
    WriteLog( APP_LVL, "cardNb[%s]", cardNb );
    
    ret = IsCardNo(cardNb);
    if( ret!=0 )
    {
        WriteLog( ERR_LVL, "acc[%s]为账号", cardNb );
        errcode=99999;
        strcpy( err_msg, "抱歉，仅卡号才可做该交易！" );
        PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode, 0 );
        PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
        return (-1);
    }
    PutPoolDataByName( "BUSIIB", "payCardAcctNb", 0, 0, cardNb, 0 );
    PutPoolDataByName("BUSIIB","loanCreditFlg", 0, 0, "000112",0);
    PutPoolDataByName( "BUSIIB", "qryCls", 0, 0, "1", 0 );
    
    ret = CommClient( "CoQryCSvr" );
    if( ret != 0 )
    {
        WriteLog( ERR_LVL, "ERR: 通用客户查询及账号查询检查服务失败!" );
        errcode=99999;
        GetPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
        if( strlen(err_msg)==0 )
            strcpy( err_msg, "调用核心服务失败！" );
        PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
        PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, "1", 0 );
        PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode,  0 );
        return( -1 );
    }
    
    GetPoolDataByName( "PAGTBUF", "data1", 0, 0, CdmAccStat, 0 );
    GetPoolDataByName( "PAGTBUF", "data2", 0, 0, SdmAccStat, 0 );
    GetPoolDataByName( "PAGTBUF", "data3", 0, 0, CardAccStat, 0 );
    rtrim( CdmAccStat );
    rtrim( SdmAccStat );
    rtrim( CardAccStat );
    WriteLog( ERR_LVL, "#############[%s][%s][%s]", CdmAccStat, SdmAccStat, CardAccStat );
    
    if( strlen(CdmAccStat) > 0 ) 
    {
        if( CdmAccStat[0] != '0' ) 
        {
            strcpy( acc_stats, "销户");
            WriteLog( ERR_LVL, "账号状态为[%s]", acc_stats );
        } 
        else if ( CdmAccStat[1] != '0' && CdmAccStat[1] != '3' )
        {
            strcpy( acc_stats, "冻结");
            WriteLog( ERR_LVL, "账号状态为[%s]", acc_stats );
        } 
        else if( CdmAccStat[2] != '0' ) 
        {
            strcpy( acc_stats, "挂失");
            WriteLog( ERR_LVL, "账号状态为[%s]", acc_stats );
        } 
        /* Added by MSJ for 止付 - 20140530 */
        else if( CdmAccStat[3]!='0' && CdmAccStat[3]!='3' ) 
        {
            strcpy( acc_stats, "止付");
            WriteLog( ERR_LVL, "账号状态为[%s]", acc_stats );
        } 
        else 
        {
            strcpy( acc_stats, "正常");
            WriteLog( ERR_LVL, "账号状态为[%s]", acc_stats );
        }
    }
    else if( strlen(SdmAccStat) > 0 ) 
    {
        if( SdmAccStat[0] != '0' ) 
        {
            strcpy( acc_stats, "销户");
            WriteLog( ERR_LVL, "账号状态为[%s]", acc_stats );
        } 
        else if ( SdmAccStat[1] != '0' && SdmAccStat[1] != '3' )
        {
            strcpy( acc_stats, "冻结");
            WriteLog( ERR_LVL, "账号状态为[%s]", acc_stats );
        } 
        else if( SdmAccStat[2] != '0' ) 
        {
            strcpy( acc_stats, "挂失");
            WriteLog( ERR_LVL, "账号状态为[%s]", acc_stats );
        }
        /* Added by MSJ for 止付 - 20140530 */
        else if( SdmAccStat[3]!='0' && SdmAccStat[3]!='3' ) 
        {
            strcpy( acc_stats, "止付");
            WriteLog( ERR_LVL, "账号状态为[%s]", acc_stats );
        } 
        else 
        {
            strcpy( acc_stats, "正常");
            WriteLog( ERR_LVL, "账号状态为[%s]", acc_stats );
        }
    }
    
    if( strlen(CardAccStat) > 0 ) 
    {
        if( CardAccStat[0] != '0' ) 
        {
            strcpy( card_stats, "销户");
            WriteLog( ERR_LVL, "卡号状态为[%s]", card_stats );
        } 
        else if( CardAccStat[1] != '0' ) 
        {
            strcpy( card_stats, "冻结");
            WriteLog( ERR_LVL, "卡号状态为[%s]", card_stats );
        } 
        else if( CardAccStat[2] != '0' ) {
            strcpy( card_stats, "挂失");
            WriteLog( ERR_LVL, "卡号状态为[%s]", card_stats );
        }
        else if( CardAccStat[3] != '0' ) {
            strcpy( card_stats, "锁定");
            WriteLog( ERR_LVL, "卡号状态为[%s]", card_stats );
        }
        else 
        {
            strcpy( card_stats, "正常");
            WriteLog( ERR_LVL, "卡号状态为[%s]", card_stats );
        }
    }
    else
    {
        WriteLog( ERR_LVL, "卡账号状态未返回 ERR:[%s]", CardAccStat );
        errcode=99999;
        sprintf( err_msg, "核心查询有误" );
        PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
        PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, "1", 0 );
        PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode,  0 );
        return( -1 );
    }

    trim( acc_stats );
    if( strcmp(acc_stats,"正常")!=0 )
    {
        WriteLog( ERR_LVL, "账号状态异常ERR: [%s]", acc_stats );
        errcode=99999;
        sprintf( err_msg, "账号已%s", acc_stats );
        PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
        PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, "1", 0 );
        PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode,  0 );
        return( -1 );
    }
    
    trim( card_stats );
    if( strcmp(card_stats,"正常")!=0 )
    {
        WriteLog( ERR_LVL, "卡号状态异常ERR: [%s]", card_stats );
        errcode=99999;
        sprintf( err_msg, "卡号已%s", card_stats );
        PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
        PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, "1", 0 );
        PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode,  0 );
        return( -1 );
    }
    
    GetPoolDataByName( "BUSIIB", "custNm", 0, 0, core_custNm, 0 );
    rtrim( core_custNm );
    WriteLog( APP_LVL, "core_custNm[%s]", core_custNm );
    if( strcmp(core_custNm,custNm)!=0 )
    {
        WriteLog( ERR_LVL, "户名检查不符[%s][%s]", core_custNm, custNm );
        errcode=99999;
        strcpy( err_msg, "户名检查不符" );
        PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
        PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, "1", 0 );
        PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode,  0 );
        return( -1 );
    }
    
    strcpy(str_flag,"0000000000000000000");
    flag = 0;
    memcpy(&t_nocard,&t_nocard1,sizeof(struct s_pagt_signinfo));

    GetPoolDataByName( "BUSIIB", "custID", 0, 0, t_nocard.outcontractno, 0 );
    rtrim( t_nocard.outcontractno );
    WriteLog( APP_LVL, "t_nocard.outcontractno[%s]", t_nocard.outcontractno );
    
    /** 暂不做该限制
    EXEC SQL SELECT count(*) INTO :i_count
      FROM t_pagt_signinfo
     WHERE BATCHNO = '6680000000'
       AND outcontractno = :t_nocard.outcontractno
       AND signinfo1[1,2]="01";
    if ( SQLCODE  )
    {
         WriteLog(ERR_LVL, "数据库操作出错!SQLCODE = [%d] outcontractno[%s]", SQLCODE,t_nocard.outcontractno);
         strcpy(err_msg,OP_DB_ERR);
         PutPoolDataByName("ABSHEAD", "_error_code", 0, 0,err_msg, 0);
         return -1;
    }
    if( i_count>1 )
    {
         WriteLog(ERR_LVL, "每个客户仅可有一张卡开通签约业务");
         strcpy(err_msg,"每个客户仅可有一张卡开通签约业务");
         PutPoolDataByName("ABSHEAD", "_error_code", 0, 0,err_msg, 0);
         return -1;
    }
    **/
    
    EXEC SQL SELECT * INTO :l_nocard
      FROM t_pagt_signinfo
     WHERE BATCHNO = '6680000000'
       AND prsn_no = :t_nocard.prsn_no;
    if ( SQLCODE && SQLCODE != SQLNOTFOUND )
    {
         WriteLog(ERR_LVL, "数据库操作出错!SQLCODE = [%d] 卡号[%s]", SQLCODE,t_nocard.prsn_no);
         strcpy(err_msg,OP_DB_ERR);
         PutPoolDataByName("ABSHEAD", "_error_code", 0, 0,err_msg, 0);
         return -1;
    }
    else if ( SQLCODE == SQLNOTFOUND )
    {
        WriteLog(ERR_LVL,"卡号未签约，交易继续进行");
        tran_flag = 2;
    }
    /* 若已有签约信息 */
    else if( l_nocard.signinfo1[0]=='1' )
    {
        WriteLog(ERR_LVL,"卡号已签约");
        strcpy(err_msg,"卡号已签约");
        trim(err_msg);
        PutPoolDataByName("ABSHEAD", "_error_code", 0, 0,err_msg, 0);
        return -1;
    }
    /* 若已有签约信息，但已解约 */
    /** else if( l_nocard.signinfo1[0]=='2' ) Modified by MSJ for the flag - 20150309 **/
    else
    {
        WriteLog(ERR_LVL,"卡号已有签约信息，但已解约，交易继续进行");
        tran_flag = 1;
    }

    if( tran_flag==0 )
    {
        WriteLog(ERR_LVL,"处理标志错误]");
        strcpy(err_msg,"处理标志错误");
        trim(err_msg);
        PutPoolDataByName("ABSHEAD", "_error_code", 0, 0,err_msg, 0);
        return -1;
    }

    trim(l_nocard.signinfo1);
    WriteLog( APP_LVL, "l_nocard.signinfo1[%s]", l_nocard.signinfo1 );
    
    if ( strlen(str_flag ) == 0 )
        strcpy(str_flag,"00000000000000000");

    WriteLog( ERR_LVL, "客户号[%s] 手机号[%s]", t_nocard.outcontractno,t_nocard.contractno );
    ret = CRM_RegisterMobileNo(t_nocard.outcontractno,t_nocard.contractno);
    if( ret )
    {
        WriteLog(ERR_LVL,"客户手机号注册失败");
        errcode=99999;
        strcpy( err_msg, "客户手机号注册失败" );
        PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
        PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, "1", 0 );
        PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode,  0 );
        return(-1);
    }

    /** flag = atoi(t_nocard.signflag); **/
    str_flag[0] = '1';
    strcpy(t_nocard.signinfo1,str_flag);

    WriteLog(ERR_LVL,"tran_flag[%d]",tran_flag);
    /* 已有签约信息，但已解约 */
    if( tran_flag==1 )
    {
         trim(l_nocard.outcontractno);
         trim(t_nocard.outcontractno);
         WriteLog(APP_LVL,"old_outcontractno[%s] outcontractno[%s]",l_nocard.outcontractno,t_nocard.outcontractno);
         if( strcmp(l_nocard.outcontractno,t_nocard.outcontractno)!=0 )
         {
             ret = CRM_UnregisterMobileNo(t_nocard.outcontractno);
             if( ret )
             {
                 WriteLog(ERR_LVL,"注销无卡支付客户手机号失败");
                 errcode=99999;
                 strcpy(err_msg,"注销无卡支付客户手机号失败");
                 PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode,  0 );
                 PutPoolDataByName("ABSHEAD", "_error_code", 0, 0,err_msg, 0);
                 PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, "1", 0 );
                 return(-1);
             }
             WriteLog(APP_LVL,"客户号信息不一致");
             errcode=99999;
             strcpy(err_msg,"客户号信息不一致");
             PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
             PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, "1", 0 );
             PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode,  0 );
             return(-1);
         }
    
        WriteLog(ERR_LVL,"对已解约卡号再次签约");
        trim(t_nocard.signdate);
        trim(t_nocard.contractno);
        trim(t_nocard.instno);
        trim(t_nocard.tlrno);
        WriteLog( APP_LVL, "ret[%d]", ret );
        EXEC SQL UPDATE t_pagt_signinfo SET
              contractno= :t_nocard.contractno,
              moddate  = :t_nocard.signdate,
              modtime  = :t_nocard.signtime,
              cert_type= :t_nocard.cert_type,
              cert_no  = :t_nocard.cert_no,
              name     = :t_nocard.name,
              signinfo1= :t_nocard.signinfo1,
              signinfo2= :t_nocard.signdate,
              signinfo3= :t_nocard.signinfo3,
              signinfo4= :t_nocard.signinfo4,
              signinfo5= :t_nocard.signinfo5,
              signinfo6= :t_nocard.signinfo6,
              instno   = :t_nocard.instno,
              tlrno    = :t_nocard.tlrno
        WHERE batchno = '6680000000' AND
              prsn_no = :t_nocard.prsn_no;
        if ( SQLCODE || sqlca.sqlerrd[2] != 1 )
        {
             ret = CRM_UnregisterMobileNo(t_nocard.outcontractno);
             if( ret )
             {
                 WriteLog(ERR_LVL,"注销无卡支付客户手机号失败");
                 errcode=99999;
                 strcpy(err_msg,"注销无卡支付客户手机号失败");
                 PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode,  0 );
                 PutPoolDataByName("ABSHEAD", "_error_code", 0, 0,err_msg, 0);
                 PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, "1", 0 );
                 return(-1);
             }
             WriteLog(ERR_LVL, "数据库操作出错!SQLCODE = [%d] 卡号[%s]", SQLCODE,t_nocard.prsn_no);
             errcode=99999;
             strcpy(err_msg,OP_DB_ERR);
             PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode,  0 );
             PutPoolDataByName("ABSHEAD", "_error_code", 0, 0,err_msg, 0);
             PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, "1", 0 );
             return -1;
        }
    }

    /* 首次签约 */
    if( tran_flag==2 )
    {
        WriteLog( APP_LVL, "无预约，插入数据库" );
        WriteLog(ERR_LVL,"t_nocard.signinfo1[%s]",t_nocard.signinfo1);
        EXEC SQL INSERT INTO t_pagt_signinfo values (:t_nocard);
        if ( SQLCODE )
        {
            ret = CRM_UnregisterMobileNo(t_nocard.outcontractno);
            if( ret )
           {
                 WriteLog(ERR_LVL,"注销无卡支付客户手机号失败");
                 errcode=99999;
                 strcpy(err_msg,"注销无卡支付客户手机号失败");
                 PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode,  0 );
                 PutPoolDataByName("ABSHEAD", "_error_code", 0, 0,err_msg, 0);
                 PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, "1", 0 );
                 return -1;
           }
            WriteLog(ERR_LVL, "数据库操作出错!SQLCODE = [%d] 卡号[%s]", SQLCODE,t_nocard.prsn_no);
            errcode=99999;
            strcpy(err_msg,OP_DB_ERR);
            PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode,  0 );
            PutPoolDataByName("ABSHEAD", "_error_code", 0, 0,err_msg, 0);
            PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, "1", 0 );
           return -1;
        }
    }
   
   WriteLog( ERR_LVL, "------Call Function NoCArd_Ins() Success---------" );
   return 0;
}

int NoCard_Del(nocard_signinfo)
struct s_pagt_signinfo nocard_signinfo;
{
    EXEC SQL BEGIN DECLARE SECTION;
        struct s_pagt_signinfo nocard;
        struct s_pagt_signinfo l_nocard;
        char old_mphone[11+1];
    EXEC SQL END DECLARE SECTION;
    char err_msg[128+1];
    char str_flag[60+1];
    int ret = 0;
    
    memset(&nocard,0x00,sizeof(struct s_pagt_signinfo));
    memset(&l_nocard,0x00,sizeof(struct s_pagt_signinfo));
    memset(str_flag,0x00,sizeof(str_flag));
    memset(old_mphone,0x00,sizeof(old_mphone));
    memset(err_msg,0x00,sizeof(err_msg));
    
    memcpy(&nocard,&nocard_signinfo,sizeof(struct s_pagt_signinfo));
    
    EXEC SQL SELECT * INTO :l_nocard
     FROM t_pagt_signinfo
    WHERE BATCHNO = '6680000000' 
       AND prsn_no = :nocard.prsn_no;
    if ( SQLCODE && SQLCODE != SQLNOTFOUND )
    {
         WriteLog(ERR_LVL, "数据库操作出错!SQLCODE = [%d] 卡号[%s]", SQLCODE,nocard.prsn_no);
         strcpy(err_msg,OP_DB_ERR);
         PutPoolDataByName("ABSHEAD", "_error_code", 0, 0,err_msg, 0);
         return -1;
    }
    if ( SQLCODE == SQLNOTFOUND )
    {
        WriteLog(ERR_LVL,"卡号未签约");
        strcpy(err_msg,"卡号未签约");
        trim(err_msg);
        PutPoolDataByName("ABSHEAD", "_error_code", 0, 0,err_msg, 0);
        return -1;

    }

    if(l_nocard.signinfo1[0]=='2')
    {
        WriteLog(ERR_LVL,"该卡已解约");
        strcpy(err_msg,"该卡已解约");
        trim(err_msg);
        PutPoolDataByName("ABSHEAD", "_error_code", 0, 0,err_msg, 0);
        return -1;
    }

    EXEC SQL SELECT contractno into :old_mphone FROM t_pagt_signinfo
            WHERE batchno = '6680000000' AND prsn_no = :nocard.prsn_no;
    if ( SQLCODE )
    {
        WriteLog(ERR_LVL,"%s",OP_DB_ERR);
        strcpy(err_msg,OP_DB_ERR);
        PutPoolDataByName("ABSHEAD", "_error_code", 0, 0,err_msg, 0);
        return -1;
    }

    /** Added by MSJ for the flag 20150309 - Start **/
    trim(l_nocard.outcontractno);
    WriteLog(APP_LVL, "outcontractno[%s]", l_nocard.outcontractno);
    if( strlen(l_nocard.outcontractno)==0 )
    {
        trim(l_nocard.acc);
        PutPoolDataByName( "BUSIIB", "payCardAcctNb", 0, 0, l_nocard.acc, 0 );
        PutPoolDataByName("BUSIIB","loanCreditFlg", 0, 0, "0000000",0);
        PutPoolDataByName( "BUSIIB", "qryCls", 0, 0, "1", 0 );
        
        WriteLog(ERR_LVL, "原签约交易未记录客户号，需调用5001查询[%s]", l_nocard.acc);
        ret = CommClient( "CoQryCSvr" );
        if( ret != 0 )
        {
            WriteLog( ERR_LVL, "ERR: 通用客户查询及账号查询检查服务失败!" );
            GetPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
            if( strlen(err_msg)==0 )
                strcpy( err_msg, "调用核心服务失败！" );
            PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
            PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, "1", 0 );
            return( -1 );
        }
        
        GetPoolDataByName( "BUSIIB", "custID", 0, 0, l_nocard.outcontractno, 0 );
        trim(l_nocard.outcontractno);
        WriteLog(ERR_LVL, "取得客户号[%s]", l_nocard.outcontractno);
        /** Added by MSJ for the flag 20150309 - End **/
    }
    ret = CRM_UnregisterMobileNo(l_nocard.outcontractno);
    if( ret )
    {
        WriteLog(ERR_LVL,"客户手机号注册失败");
        strcpy( err_msg, "客户手机号注册失败" );
        PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
        return(-1);
    }

    strcpy(str_flag,"00000000000");
    str_flag[0] = '2';
    /** Added by MSJ for the flag 20150309 - Start **/
    nocard.signinfo1[0]='2';

    WriteLog(APP_LVL, "str_flag[%s]", str_flag);
    strcpy(nocard.signinfo1,str_flag);
    EXEC SQL UPDATE t_pagt_signinfo SET 
            moddate = :nocard.signdate,
            instno = :nocard.instno,
            tlrno = :nocard.tlrno,
            signinfo1 = :nocard.signinfo1,
            signinfo2 = :nocard.signdate,
            modtime = :nocard.modtime
    WHERE batchno = '6680000000' AND 
        prsn_no = :nocard.prsn_no;
    if( SQLCODE )
    {
        ret = CRM_RegisterMobileNo(nocard.outcontractno,old_mphone);
        if( ret )
        {
            WriteLog(ERR_LVL,"客户手机号注册失败");
            strcpy(err_msg,"客户手机号注册失败");
            PutPoolDataByName("ABSHEAD","_error_code",0,0,&err_msg,0);
            return(-1);
        }
        WriteLog(ERR_LVL,"数据库操作出错!SQLCODE=[%d] 卡号=[%s]\n",SQLCODE,nocard.acc);
        strcpy(err_msg,OP_DB_ERR);
        PutPoolDataByName("ABSHEAD","_error_code",0,0,&err_msg,0);
        return(-1);
    }

    WriteLog(APP_LVL, "Call function NoCard_Del() Success");
    return 0;
}

int NoCard_Chk(t_nocard2,flag)
struct s_pagt_signinfo t_nocard2;
int flag;
{
    EXEC SQL BEGIN DECLARE SECTION;
        struct s_pagt_signinfo t_nocard;
        struct s_pagt_signinfo g_nocard;
        int chk_no;
    EXEC SQL END DECLARE SECTION;
    int ret;
    int flag1;
    int j;
    char *p;
    char str_signinfo1[60+1];
    char err_msg[128+1];
    char str_flag[60+1];
    long errcode = 0;

    memset(&t_nocard,0,sizeof(struct s_pagt_signinfo));
    memset(&g_nocard,0,sizeof(struct s_pagt_signinfo));
    memset(str_flag,0,sizeof(str_flag));
    memset(err_msg,0,sizeof(err_msg));
    memset(str_signinfo1,0,sizeof(str_signinfo1));

    strcpy(str_flag,"0000000000000000000000");

    memcpy(&t_nocard,&t_nocard2,sizeof(t_nocard));
    trim(t_nocard.acc);
    if ( flag !=0 && flag !=1 && flag !=2 )
    {
        WriteLog(ERR_LVL,"ERROR: 参数错: %d\n",flag);
        return -2;
    }

    EXEC SQL SELECT * INTO :g_nocard
      FROM t_pagt_signinfo
     WHERE BATCHNO = '6680000000' 
       AND prsn_no = :t_nocard.prsn_no;
    if ( SQLCODE && SQLCODE != SQLNOTFOUND )
    {
         WriteLog(ERR_LVL, "数据库操作出错!SQLCODE = [%d] 卡号[%s]", SQLCODE,t_nocard.acc);
         strcpy(err_msg,OP_DB_ERR);
         errcode=99999;
         PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode, 0 );
         PutPoolDataByName("ABSHEAD", "_error_code", 0, 0,err_msg, 0);
         return -1;
    }
    if ( SQLCODE == SQLNOTFOUND )
    {
        if( flag != 0 )
        {
            strcpy(err_msg,"卡号未签约");
            trim(err_msg);
            PutPoolDataByName("ABSHEAD", "_error_code", 0, 0,err_msg, 0);
            return -1;
        }
    }
    if ( SQLCODE == 0 )
    {
        strcpy(str_flag,g_nocard.signinfo1); 
        /** j = atoi(g_nocard.signflag );  Commentted by MSJ for the flag - 20150309 **/
        p = (char *)strstr(g_nocard.signinfo1,"1");
        trim(str_flag);
        trim(g_nocard.signinfo1);
        /** trim(g_nocard.signflag);  Commentted by MSJ for the flag - 20150309 **/

        WriteLog( APP_LVL, "str_flag[%s] j[%d] signinfo1[%s]", str_flag, j, g_nocard.signinfo1 );
        if ( flag == 0  )
        {
            /* 已经签约 */
            if ( g_nocard.signinfo1[0] == '1'  )
            {
                strcpy(err_msg,"卡号已存在该类型的签约,请确认");
                trim(err_msg);
                PutPoolDataByName("ABSHEAD", "_error_code", 0, 0,err_msg, 0);
                return -1;
            }
            flag1 = 1;
            if ( p != NULL )
            {
                trim(g_nocard.contractno);
                trim(t_nocard.contractno);
                if ( strcmp(t_nocard.contractno,g_nocard.contractno ) != 0 )
                {
                    strcpy(err_msg,"手机号码不一致");
                    trim(err_msg);
                    PutPoolDataByName("ABSHEAD", "_error_code", 0, 0,err_msg, 0);
                    return -1;
                }
                trim(g_nocard.outcontractno);
                trim(t_nocard.outcontractno);
                if ( strcmp(t_nocard.outcontractno,g_nocard.outcontractno ) != 0 )
                {
                    strcpy(err_msg,"客户信息不一致");
                    trim(err_msg);
                    PutPoolDataByName("ABSHEAD", "_error_code", 0, 0,err_msg, 0);
                    return -1;
                }
                flag1 = 2;
            }
        }
        if ( flag != 0 )
        {
            EXEC SQL SELECT AUTH_NO INTO :chk_no
                FROM t_nocard_authjnl
                WHERE CARD_NO = : t_nocard.acc
                  AND auth_stat[1] = '0';
            if ( SQLCODE != SQLNOTFOUND )
            {
                WriteLog(ERR_LVL, "数据库操作出错!SQLCODE = [%d] 卡号[%s]", SQLCODE,t_nocard.acc);
                strcpy(err_msg,"有预授权记录，无法进行修改或解约操作");
                PutPoolDataByName("ABSHEAD", "_error_code", 0, 0,err_msg, 0);
                return -1;
            }

            WriteLog( APP_LVL, "j[%d] signinfo1[%s]", j, g_nocard.signinfo1 );
            if ( g_nocard.signinfo1[j] != '1' )
            {
                strcpy(err_msg,"该卡号未签约，请确认");
                trim(err_msg);
                PutPoolDataByName("ABSHEAD", "_error_code", 0, 0,err_msg, 0);
                return -1;
            }

            if ( flag == 1 )
            {
                strcpy(str_signinfo1,g_nocard.signinfo1);
                str_signinfo1[j] = '2';
                p = (char *)strstr(str_signinfo1,"1");
                if ( p != NULL  )
                    flag1 = 2;
            }
        }
    }

    if ( flag != 2 )
    {
        /* 多次签约 */
        if ( flag1 == 1 )
            return 1;
        /* 已解约需要重新签约 */
        if ( flag1 == 2 )
            return 2;
    }
    return 0;
}

int NoCard_Mod(nocard_signinfo)
struct s_pagt_signinfo nocard_signinfo;
{
    EXEC SQL BEGIN DECLARE SECTION;
        struct s_pagt_signinfo nocard;
        struct s_pagt_signinfo l_nocard;
        char old_mphone[11+1];
        char outcontractno[14+1];
    EXEC SQL END DECLARE SECTION;

    int flag;
    int ret = 0;
    char mphone[11+1];
    char err_msg[20];
    long errcode = 0;
    int temp_flag = 0 ;   /*区分是否上送有签约卡号 0-未上送* 1-上送*/

    memset(&nocard,0x00,sizeof(struct s_pagt_signinfo));
    memset(&l_nocard,0x00,sizeof(struct s_pagt_signinfo));
    memset(err_msg,0x00,sizeof(err_msg));
    memset(mphone,0x00,sizeof(mphone));
    memset(outcontractno,0x00,sizeof(outcontractno));
    memset(old_mphone,0x00,sizeof(old_mphone));

    memcpy(&nocard,&nocard_signinfo,sizeof(struct s_pagt_signinfo));

    /*判断是否有上送签约卡号 20150806 fengjx*/
    if ( strlen ( nocard.prsn_no ) != 0 )
        temp_flag = 1;
    else
    {
        if ( strlen(nocard.cert_type)==0 || strlen(nocard.cert_no)==0 || strlen(nocard.name)==0 )
        {
            WriteLog(ERR_LVL,"acc [%s]",nocard.acc);
            strcpy(err_msg,"证件号、证件类型、户名不能为空!!!");
            PutPoolDataByName("ABSHEAD","_error_code",0,0,err_msg,0);
            WriteLog(ERR_LVL, "证件号、证件类型、户名不能为空!!!");
            return -1;
        }

        memset(nocard.outcontractno, 0x00, sizeof(nocard.outcontractno));
        ret = get_crm_custno( nocard.outcontractno, nocard.cert_type, nocard.cert_no, nocard.name);
        if ( ret )
        {
            WriteLog(ERR_LVL,"acc [%s]",nocard.acc);
            strcpy(err_msg,"取客户号失败!!");
            PutPoolDataByName("ABSHEAD","_error_code",0,0,err_msg,0);
            WriteLog(ERR_LVL, "取客户号失败!!");
            return -1;
        }
        rtrim( nocard.outcontractno );
        WriteLog(ERR_LVL, "客户号[%s]", nocard.outcontractno);
        temp_flag = 0;
    }

    if ( temp_flag == 1 )
    {
        EXEC SQL SELECT * INTO :l_nocard
        FROM t_pagt_signinfo
           WHERE BATCHNO = '6680000000' 
           AND prsn_no = :nocard.prsn_no;
        if ( SQLCODE && SQLCODE != SQLNOTFOUND )
        {
             WriteLog(ERR_LVL, "数据库操作出错!SQLCODE = [%d] 卡号[%s]", SQLCODE,nocard.prsn_no);
             strcpy(err_msg,OP_DB_ERR);
             errcode=99999;
             PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode, 0 );
             PutPoolDataByName("ABSHEAD", "_error_code", 0, 0,err_msg, 0);
             return -1;
        }
        if ( SQLCODE == SQLNOTFOUND )
        {
            WriteLog(ERR_LVL,"卡号未签约");
            strcpy(err_msg,"卡号未签约");
            trim(err_msg);
            PutPoolDataByName("ABSHEAD", "_error_code", 0, 0,err_msg, 0);
            return -1;
        }
    }
    else
    {
        EXEC SQL SELECT first 1 * INTO :l_nocard
        FROM t_pagt_signinfo
           WHERE BATCHNO = '6680000000' 
           AND outcontractno = :nocard.outcontractno;
        if ( SQLCODE && SQLCODE != SQLNOTFOUND )
        {
             WriteLog(ERR_LVL, "数据库操作出错!SQLCODE = [%d]", SQLCODE);
             strcpy(err_msg,OP_DB_ERR);
             errcode=99999;
             PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode, 0 );
             PutPoolDataByName("ABSHEAD", "_error_code", 0, 0,err_msg, 0);
             return -1;
        }
        if ( SQLCODE == SQLNOTFOUND )
        {
            WriteLog(ERR_LVL,"客户未签约");
            strcpy(err_msg,"客户未签约");
            trim(err_msg);
            PutPoolDataByName("ABSHEAD", "_error_code", 0, 0,err_msg, 0);
            return -1;
        }
    }

    if(l_nocard.signinfo1[0]=='2')
    {
        WriteLog(ERR_LVL,"该卡已解约");
        strcpy(err_msg,"该卡已解约");
        trim(err_msg);
        PutPoolDataByName("ABSHEAD", "_error_code", 0, 0,err_msg, 0);
        return -1;
    }

    strcpy(nocard.moddate,nocard.signdate);
    trim( l_nocard.outcontractno );
    trim( nocard.contractno );

    ret = CRM_RegisterMobileNo(l_nocard.outcontractno,nocard.contractno);
    if( ret )
    {
        WriteLog(ERR_LVL,"修改客户手机号失败");
        strcpy(err_msg,"修改客户手机号失败");
        trim(err_msg);
        PutPoolDataByName("ABSHEAD", "_error_code", 0, 0,err_msg, 0);
        return(-1);
    }

    if ( temp_flag == 1 )
    {
        EXEC SQL UPDATE t_pagt_signinfo SET 
            moddate = :nocard.moddate,
            modtime = :nocard.modtime,
            instno = :nocard.instno,
            tlrno = :nocard.tlrno,
            signinfo2 = :nocard.moddate,
            signinfo3 = :nocard.signinfo3,
            signinfo4 = :nocard.signinfo4,
            signinfo5 = :nocard.signinfo5,
            signinfo6 = :nocard.signinfo6,
            contractno = :nocard.contractno
        WHERE batchno = '6680000000' AND 
            prsn_no = :nocard.prsn_no;
        if( SQLCODE )
        {
            ret = CRM_RegisterMobileNo(l_nocard.outcontractno,l_nocard.contractno);
            if( ret )
            {
                WriteLog(ERR_LVL,"修改客户手机号失败");
                strcpy(err_msg,"修改客户手机号失败");
                PutPoolDataByName("ABSHEAD", "_error_code", 0, 0,err_msg, 0);
                return(-1);
            }
            WriteLog(ERR_LVL,"acc [%s]",nocard.acc);
            strcpy(err_msg,OP_DB_ERR);
            WriteLog(ERR_LVL,"数据库错误。错误码[%d]",SQLCODE);
            PutPoolDataByName("ABSHEAD","_error_code",0,0,err_msg,0);
            return -1;
        }
    }
    else
    {
        EXEC SQL UPDATE t_pagt_signinfo SET 
            moddate = :nocard.moddate,
            modtime = :nocard.modtime,
            instno = :nocard.instno,
            tlrno = :nocard.tlrno,
            signinfo2 = :nocard.moddate,
            signinfo3 = :nocard.signinfo3,
            signinfo4 = :nocard.signinfo4,
            signinfo5 = :nocard.signinfo5,
            signinfo6 = :nocard.signinfo6,
            contractno = :nocard.contractno
           WHERE BATCHNO = '6680000000' 
           AND outcontractno = :nocard.outcontractno;
        if( SQLCODE )
        {
            ret = CRM_RegisterMobileNo(l_nocard.outcontractno,l_nocard.contractno);
            if( ret )
            {
                WriteLog(ERR_LVL,"修改客户手机号失败");
                strcpy(err_msg,"修改客户手机号失败");
                PutPoolDataByName("ABSHEAD", "_error_code", 0, 0,err_msg, 0);
                return(-1);
            }
            WriteLog(ERR_LVL,"acc [%s]",nocard.acc);
            strcpy(err_msg,OP_DB_ERR);
            WriteLog(ERR_LVL,"数据库错误。错误码[%d]",SQLCODE);
            PutPoolDataByName("ABSHEAD","_error_code",0,0,err_msg,0);
            return -1;
        }
    }

    return 0;
}

/** 新一代柜面银联在线支付签约查询 **/
int QuerySignInfoMain( )
{
    
    char DataBuff[PBFDATA_LEN + 1];
    int ret = 0;

    memset(DataBuff, 0x00, sizeof(DataBuff));
    
    ret = QuerySignInfo(DataBuff);
    if (ret == 0)
        PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, "0", 0 );
    else 
    {
        PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, "-1", 0 );
    }
  
    strcpy( (char *)PkgBuff.DataBuff, DataBuff );
    PkgBuff.DataLen = strlen( DataBuff ) + 1;

    return ret;
}

int QuerySignInfo(char *DataBuff )
{
EXEC SQL BEGIN DECLARE SECTION;
    char cardNo[32+1];
    char cell[20+1];
    char sql[1024];
    char content[251];
    struct s_pagt_signinfo pagt;
    char out_str1[30];
    char outcode[21];
EXEC SQL END DECLARE SECTION;
    
    char *pointer = "|";
    char Tol_Amt[20+1];
    char one_amt[20+1];
    char param[100+1];
    char seqno[21];
    char err_msg[61];
    int  rows = 0;
  
    memset(sql, 0, sizeof(sql) );
    memset(content, 0, sizeof(content));
    
    memset(cardNo, 0, sizeof(cardNo) );
    memset(cell, 0, sizeof(cell) );

    GetPoolDataByName( "BUSIIB", "cardNb", 0, 0, cardNo, 0 );
    GetPoolDataByName( "BUSIIB", "certNb", 0, 0, cell, 0 );

/*** 取变量池数据  **/

    memset (seqno, 0x00, sizeof(seqno) );
    GetPoolDataByName( "PBSYS", "SrcJourNo", 0, 0, seqno, 0 );
    trim( seqno );

    /*写报文头*/
    write_pub_header_other (DataBuff, seqno);

    EXEC SQL SELECT content INTO :content
        FROM t_pay_sys_para
        WHERE inst_no = "CARD"
        AND data_code = "NOCARDCONSUME";
    if(sqlca.sqlcode != 0)
    {
        WriteLog(ERR_LVL,"查询t_pay_sys_para出错！[%d]!", sqlca.sqlcode );
        strcpy(err_msg, "限额查询失败");
        PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
        return -1;
    }
    rtrim(content);

    sprintf( Tol_Amt, "%s" , strtok( content, pointer ) );
    sprintf( one_amt, "%s", strtok( NULL, pointer ) );

    if (strlen(rtrim(cardNo)) > 0)
    {
        sprintf(sql, "select * from t_pagt_signinfo \
                     where batchno = '6680000000' \
                      and prsn_no = '%s' ", cardNo );
    }
    else if (strlen(rtrim(cell)) > 0)
    {
        sprintf(sql, "select * from t_pagt_signinfo \
                     where batchno = '6680000000' \
                     and contractno = '%s' ", cell );
    }
    else
    {
        WriteLog(ERR_LVL,"输入项至少一个有值");
        strcpy(err_msg, "输入项至少一个有值");
        PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
        return -1;
    }
    
    WriteLog(ERR_LVL, "SQL:[%s]", sql);
    EXEC SQL prepare pagt_sign_pre from :sql;
    if (SQLCODE != 0)
    {
        WriteLog(ERR_LVL,"prepare ERROR[%ld]", SQLCODE);
        strcpy(err_msg, "prepare ERROR");
        PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
        return -1;
    }
    EXEC SQL declare pagt_sign_cur cursor for pagt_sign_pre;
    if (SQLCODE != 0)
    {
        WriteLog(ERR_LVL,"declare cur ERROR[%ld]", SQLCODE);
        strcpy(err_msg, "declare ERROR");
        PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
        return -1;
    }
    EXEC SQL open pagt_sign_cur;
    if(SQLCODE != 0)
    {
        WriteLog(ERR_LVL,"open cur ERROR[%ld]", SQLCODE);
        EXEC SQL free pagt_sign_pre;
        EXEC SQL free pagt_sign_cur;
        strcpy(err_msg, "open cur ERROR");
        PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
        return -1;
    }
    
    while(1)
    {
        memset(&pagt, 0, sizeof(pagt) );
        EXEC SQL FETCH pagt_sign_cur INTO :pagt;
        if (SQLCODE==100)
        {
            break;
        }
        else if (SQLCODE != 0)
        {
            WriteLog(ERR_LVL,"Fetch cur ERROR[%ld]", SQLCODE);
            EXEC SQL free pagt_sign_pre;
            EXEC SQL close pagt_sign_cur;
            EXEC SQL free pagt_sign_cur;
            strcpy(err_msg, "Fetch cur ERROR");
            PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
            return -1;
        }
        if (rows == 0)
        {
            write_pub_header_status(DataBuff, "000000", "SUCC");
            sprintf(DataBuff + strlen(DataBuff),
                    "  </header>\n"
                    "  <body>\n"
                    "    <response>\n"
                    "      <list>\n");
        }

        put_xml_tag(DataBuff, "v", 1, 2);
        /**签约状态**/
        if(pagt.signinfo1[0] == '0')
        {
            /** 撤约 **/
            put_xml_content(DataBuff, "state", "1" , 3, 2);
        }
        else
        {   
            /** 签约 **/
            put_xml_content(DataBuff, "state", "0" , 3, 2);
        }
        put_xml_content(DataBuff, "operator", "", 3, 2);
        rtrim(pagt.contractno);
        put_xml_content(DataBuff, "cell",  pagt.contractno, 3, 2);
        put_xml_content(DataBuff, "singleMax",  Tol_Amt, 3, 2);
        put_xml_content(DataBuff, "dayMax",  one_amt, 3, 2);

        rtrim(pagt.cert_type);
        memset(outcode, 0x00, sizeof(outcode) );
        EXEC SQL select first 1 outcode 
                          into :outcode 
                   from t_pb_net_para
                  where busitype = '700'
                    and paratype = 'certTyp'
                    and incode = :pagt.cert_type
                    and outcode[1,1] = '0' ;
        if (sqlca.sqlcode != 0 && sqlca.sqlcode != 100)
        {
	    EXEC SQL free pagt_sign_pre;
	    EXEC SQL close pagt_sign_cur;
	    EXEC SQL free pagt_sign_cur;
            strcpy(err_msg, "转换证件类型错");
            PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
            return -1;
        }

        rtrim(outcode);
        /** 未找到就用 原表中数据 **/
        if (outcode[0] == '\0') strcpy (outcode, pagt.cert_type);

        put_xml_content(DataBuff, "certType",  outcode, 3, 2);
        rtrim(pagt.cert_no);
        put_xml_content(DataBuff, "certNo",  pagt.cert_no, 3, 2);
        rtrim(pagt.name);
        put_xml_content(DataBuff, "name",  pagt.name, 3, 2);

        memset(out_str1, 0, sizeof(out_str1) );
        dttofmtasc(&pagt.signtime, out_str1, sizeof(out_str1), "%Y-%m-%d %H:%M:%S");
        put_xml_content(DataBuff, "signDate",  out_str1, 3, 2); 
        rtrim(pagt.prsn_no);
        put_xml_content(DataBuff, "acctNo",  pagt.prsn_no, 3, 2);
        put_xml_tag(DataBuff, "v", 0, 2);
        rows++;
        if (rows>100) break; /*限制最大记录数*/
    }

    EXEC SQL free pagt_sign_pre;
    EXEC SQL close pagt_sign_cur;
    EXEC SQL free pagt_sign_cur;

    if (rows == 0)
    {
        strcpy(err_msg, "未找到签约数据");
        PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
        return -1;
    }
    else
    {
        sprintf( DataBuff + strlen(DataBuff),
                 "      </list>\n"
                 "    </response>\n"
                 "  </body>\n"
                 "</transaction>\n" );
    }

    return 0;
}

int put_xml_tag(char *xml, char *tag, int ht_flag, int level)
{
     char space[80];
     memset(space, 0x00, sizeof(space) );

     while( (--level) > 0)
         sprintf (space+strlen(space), "    ");

     if (ht_flag == 1)
         sprintf (xml + strlen(xml), "%s<%s>\n", space, tag);
     else
         sprintf (xml + strlen(xml), "%s</%s>\n", space, tag);

     return strlen(xml);
}

/*根据标签写入变量值 层次 level, type=1 int type=2 double type=3 string  */
int put_xml_content(char *xml, char *tag, void *value, int type, int level)
{
     char space[80];
     int    *pi;
     double *pd;

     memset(space, 0x00, sizeof(space) );

     while( (--level) > 0)
         sprintf (space+strlen(space), "    ");

     switch(type)
     {
          /** int type **/
          case 1:
              pi = (int *) value;
              sprintf (xml + strlen(xml), "%s<%s>%d</%s>\n", space, tag, *pi, tag);
              break;

          /** double type **/
          case 2:
              pd = (double *) value;
              sprintf (xml + strlen(xml), "%s<%s>%.2f</%s>\n", space, tag, *pd, tag);
              break;

          /** string type **/
          default:
              sprintf (xml + strlen(xml), "%s<%s>%s</%s>\n", space, tag, (char *)value, tag);
              break;
     }

     return strlen(xml);
}

