#include <stdio.h>
#include <stdlib.h>
#include <sys/types.h>
#include <errno.h>
#include <string.h>
#include <unistd.h>
#include <time.h>

#include "pbconstval.h"
#include "pbstructdef.h"
#ifdef ORACLE_DATABASE
EXEC SQL include "pbranchdb.h";
#else
#include "pbranchdb.h"
#endif
#include "pbappdb.h"
#include "pberrlog.h"
#include "pbglbvardef.h"
#include "pbbasefunc.h"
#include "pbvarmacro.h"

#include "pbdb.h"
#include "fml32.h"
#include "atmi.h"
#include "pbsrv.h"

long WY_FixTCdm();
long NetBank_Pub_InsertPbTlrLog();
long AccQryPub5711();
long GetCardRelInfo();
long GetFixLedgerInfo();
struct FixLedInfoStr
{
	char inst_no[4+1];
	char acc_name[60+1];
	char cstm_no[14+1];
	char prd_no[4+1];
	double bal;
	double aval_bal;
};
/*************************************************
* Date		Action	User			Desc.
* 20130906	更新	Zhang.Chao		PB迁移,PQDS改造,删除由账号查询卡号部分.
*************************************************/

long 
WY_FixTCdm()
{
	EXEC SQL BEGIN DECLARE SECTION;
		struct s_pb_tlrlog pb_tlrlog;
		char pbdate[8+1];
		char prd_no[4+1];
		char curr_type[2+1];
		char acctype[4+1];
	EXEC SQL END DECLARE SECTION;
	struct FixLedInfoStr fix_ledger;
	struct FixLedInfoStr fix_ledger1;
	char tx_code[40+1];
	char old_tx_code[40+1];
	char summ_no[12+1];
	char summ_note[60+1];
	char in_acc[32+1];
	char out_acc[32+1];
	char subacc[32+1];
	char hostseqno[10+1];
	char err_msg[256+1];
	char s_amt[16+1];
	char in_card_no[32+1];
	char out_card_no[32+1];
	char inst_no[4+1];
	char operTyp[2+1];

	char curAcctBal[16+1];
	char curAcctAvlBal[16+1];
	char curAcctBal_pre[16+1];
	char curAcctAvlBal_pre[16+1];
	char fixBal[16+1];
	char fixAvlBal[16+1];
	char transIntrstAmt[16+1];
	char hostSeqNb[16+1];
	char custname[32+1];
	char out_cust_no[32+1];
	char in_cust_no[32+1];

	long app_err_no = 0;
	long errcode = 0;
	long hoststat = -1;
	long ret = 0;
	long l_accsign = 0;
	long acc_id = 0;/*add by Wenfeng 20130923 for SC6000Z-子帐号序号*/

	long summno = 0;
	double amt = 0.00;
	double f_transIntrstAmt = 0;
	double f_curAcctBal = 0;
	double f_curAcctAvlBal = 0;
	double f_curAcctBal_pre = 0;

	double f_cmp_amt = 0.00;
	double f_trans_amt = 0.00;

	memset( &pb_tlrlog, 0x00, sizeof( pb_tlrlog ) );
	memset( &fix_ledger, 0x00, sizeof( fix_ledger ) );
	memset( &fix_ledger1, 0x00, sizeof( fix_ledger1 ) );
	memset( pbdate, 0x00, sizeof( pbdate ) );
	memset( prd_no, 0x00, sizeof( prd_no ) );
	memset( tx_code, 0x00, sizeof( tx_code ) );
	memset( old_tx_code, 0x00, sizeof( old_tx_code ) );
	memset( curr_type, 0x00, sizeof( curr_type ) );
	memset( acctype, 0x00, sizeof( acctype ) );
	memset( summ_no, 0x00, sizeof( summ_no ) );
	memset( summ_note, 0x00, sizeof( summ_note ) );
	memset( in_acc, 0x00, sizeof( in_acc ) );
	memset( out_acc, 0x00, sizeof( out_acc ) );
	memset( subacc, 0x00, sizeof( subacc ) );
	memset( hostseqno, 0x00, sizeof( hostseqno ) );
	memset( err_msg, 0x00, sizeof( err_msg ) );
	memset( s_amt, 0x00, sizeof( s_amt ) );
	memset( in_card_no, 0x00, sizeof( in_card_no ) );
	memset( out_card_no, 0x00, sizeof( out_card_no ) );
	memset( inst_no, 0x00, sizeof( inst_no ) );
	memset( operTyp, 0x00, sizeof( operTyp ) );

	memset( curAcctBal, 0x00, sizeof( curAcctBal ) );
	memset( curAcctAvlBal, 0x00, sizeof( curAcctAvlBal ) );
	memset( curAcctBal_pre, 0x00, sizeof( curAcctBal_pre ) );
	memset( curAcctAvlBal_pre, 0x00, sizeof( curAcctAvlBal_pre ) );
	memset( fixBal, 0x00, sizeof( fixBal ) );
	memset( fixAvlBal, 0x00, sizeof( fixAvlBal ) );
	memset( transIntrstAmt, 0x00, sizeof( transIntrstAmt ) );
	memset( hostSeqNb, 0x00, sizeof( hostSeqNb ) );
	memset( custname, 0x00, sizeof( custname ) );
	memset( out_cust_no, 0x00, sizeof( out_cust_no ) );
	memset( in_cust_no, 0x00, sizeof( in_cust_no ) );

	WriteLog( APP_LVL, "===定转活===" );

	GetPoolDataByName( "BUSIIB", "fixAcct", 0, 0, out_acc, 0 );
	rtrim( out_acc );
	GetPoolDataByName( "BUSIIB", "subAcct", 0, 0, subacc, 0 );
	rtrim( subacc );
	/*chang from rtrim( out_acc ); by Wenfeng 20130923 for SC6000Z-子帐号序号*/
	GetPoolDataByName( "BUSIIB", "curAcct", 0, 0, in_acc, 0 );
	rtrim( in_acc );
	GetPoolDataByName( "BUSIIB", "operTyp", 0, 0, operTyp, 0 );
	rtrim( operTyp );
	GetPoolDataByName( "PAGTBUF", "currtype", 0, 0, curr_type, 0 );
	rtrim( curr_type );
	GetPoolDataByName( "BUSIIB", "transAmt", 0, 0, s_amt, 0 );
	rtrim( s_amt );
	WriteLog( APP_LVL, "out_acc[%s]", out_acc );
	WriteLog( APP_LVL, "subacc[%s]", subacc );
	WriteLog( APP_LVL, "in_acc[%s]", in_acc );
	WriteLog( APP_LVL, "operTyp[%s]", operTyp );
	WriteLog( APP_LVL, "curr_type[%s]", curr_type );
/*	
	if( strlen( subacc ) != 0 )
	{
		memset( out_acc, 0x00, sizeof(out_acc) );
		strcpy( out_acc, subacc );
		WriteLog( APP_LVL, "out_acc[%s]", out_acc );
	}
	if( out_acc[6] != '3' )
	{
		sprintf( err_msg, "转出账号[%s]不是定期账户", out_acc );
		WriteLog( ERR_LVL, "转出账号[%s]不是定期账户", out_acc );
		errcode = 99999;
		PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode, 0 );
		PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
		return ( -1 );
	}del by Wenfeng 20130923 for SC6000Z-子帐号序号*/
	GetPoolDataByName ( "BUSIIB2", "FixopenBrchID", 0, 0, inst_no, 0);
	GetPoolDataByName ( "BUSIIB2", "FixcustNm", 0, 0, custname, 0);
	GetPoolDataByName ( "BUSIIB2", "FixcustID", 0, 0, out_cust_no, 0);
	rtrim( inst_no );
	rtrim( custname );
	rtrim( out_cust_no );
	WriteLog( APP_LVL, "inst_no[%s]", inst_no );
	WriteLog( APP_LVL, "custname[%s]", custname );
	WriteLog( APP_LVL, "out_cust_no[%s]", out_cust_no );

	/**检查转入账户**/
	ret = IsCardNo( in_acc );
	if( ret == 0 )
	{
		WriteLog( ERR_LVL, "转入账号[%s]是卡号", in_acc );
		strcpy( in_card_no, in_acc );
	}
	else
	{
		WriteLog( ERR_LVL, "转入账号不是卡号" );
		errcode = 99999;
		strcpy( err_msg, "转入账号不是卡号" );
		PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode, 0 );
		PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
		return ( -1 );
	}
	
	/**调用5711查询转入账户信息**/
	ret = AccQryPub5711( in_acc );
	if( ret )
	{
		WriteLog( ERR_LVL, "调用5711查询转出账号[%s]信息失败", out_acc );
		errcode = 99999;
		strcpy( err_msg, "查询转出账号信息失败!" );
		PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode, 0 );
		PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
		return ( -1 );
	}
	memset( in_acc, 0x00, sizeof( in_acc ) );
	GetPoolDataByName ( "CBS", "Track2Data", 0, 0, in_acc, 0);
	GetPoolDataByName ( "CBS", "CustNo", 0, 0, in_cust_no, 0);
	GetPoolDataByName ( "CBS", "TranBranch", 0, 0, curAcctBal_pre, 0);
	GetPoolDataByName ( "CBS", "TxFlag", 0, 0, curAcctAvlBal_pre, 0);
	rtrim( in_cust_no );
	WriteLog( APP_LVL, "in_cust_no[%s]", in_cust_no );

	/**比较转出转入账户对应的客户号是否相同**/
	if( strcmp( out_cust_no, in_cust_no ) != 0 )
	{
		WriteLog( ERR_LVL, "转入转出账号对应的客户号不同" );
		errcode = 99999;
		strcpy( err_msg, "转入转出账号对应的客户号不同" );
		PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode, 0 );
		PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
		return ( -1 );
	}

	/**操作类型检查，金额检查**/
	/**取转出账号可用余额**/
	ret = GetFixLedgerInfo( out_acc, subacc, &fix_ledger );
	/*chang by Wenfeng 20130923 for SC6000Z-子帐号序号*/
	if( ret != 0 )
	{
		WriteLog( APP_LVL, "取转出账号余额失败!" );
		errcode = 99999;
		strcpy( err_msg, "取转出账号余额失败!" );
		PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode, 0 );
		PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
		return ( -1 );
	}
	rtrim( fix_ledger.prd_no );
	strcpy( prd_no, fix_ledger.prd_no );
	WriteLog( APP_LVL, "prd_no[%s]", fix_ledger.prd_no );
	/**检查账户类型**/
	EXEC SQL SELECT acctype INTO :acctype
		FROM t_pb_prdno_acctype
		WHERE prd_no = :prd_no
		AND currtype = :curr_type;
	if( sqlca.sqlcode )
	{
		WriteLog( APP_LVL, "查账户类型错!sqlcode[%ld]", sqlca.sqlcode );
		errcode = 99999;
		strcpy( err_msg, "查账户类型错!" );
		PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode, 0 );
		PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
		return ( -1 );
	}
	rtrim( acctype );
	WriteLog( APP_LVL, "acctype[%s]prd_no[%s]curr_type[%s]", acctype, prd_no, curr_type );
	if( strcmp( acctype, "001" ) != 0 && strcmp( acctype, "002" ) != 0 && strcmp( acctype, "003" ) != 0 && strcmp( acctype, "005" ) != 0 )
	{
		WriteLog( APP_LVL, "账户类型错!" );
		errcode = 99999;
		strcpy( err_msg, "账户类型错!" );
		PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode, 0 );
		PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
		return ( -1 );
	}
	WriteLog( APP_LVL, "bal[%.2f] aval_bal[%.2f]", fix_ledger.bal, fix_ledger.aval_bal );
	if( fix_ledger.bal != fix_ledger.aval_bal )
	{
		WriteLog( APP_LVL, "转出账户余额与可用余额不等!" );
		errcode = 99999;
		strcpy( err_msg, "转出账户余额与可用余额不等!" );
		PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode, 0 );
		PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
		return ( -1 );
	}
	if( strlen( s_amt ) == 0 )
	{
		if( operTyp[0] == '1' )
		{
			WriteLog( APP_LVL, "部分提取必须输入金额!" );
			errcode = 99999;
			strcpy( err_msg, "部分提取必须输入金额!" );
			PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode, 0 );
			PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
			return ( -1 );
		}
		memset( s_amt, 0x00, sizeof( s_amt ) );
		sprintf( s_amt, "%.2f", fix_ledger.aval_bal );
		rtrim( s_amt );
	}
	f_cmp_amt =  fix_ledger.aval_bal;
	f_trans_amt = atof( s_amt );
	WriteLog( APP_LVL, "f_cmp_amt[%.2f] f_trans_amt[%.2f]", f_cmp_amt, f_trans_amt );
	if( operTyp[0] == '1' )
	{
		l_accsign = 0;
		if( f_trans_amt >= f_cmp_amt || f_trans_amt <= 0.001 )
		{
			WriteLog( APP_LVL, "金额小于0或是金额大于等于账户可用余额!" );
			errcode = 99999;
			strcpy( err_msg, "金额小于0或是金额大于等于账户可用余额!" );
			PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode, 0 );
			PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
			return ( -1 );
		}
	}
	/**
	else if( operTyp[0] == '2' )
	{
		WriteLog( APP_LVL, "暂不支持全部提取不销户!" );
		errcode = 99999;
		strcpy( err_msg, "暂不支持全部提取不销户!" );
		PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode, 0 );
		PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
		return ( -1 );
	}
	**/
	else if( operTyp[0] == '2' )
	{
		l_accsign = 2;
		if( f_cmp_amt != f_trans_amt )
		{
			WriteLog( APP_LVL, "全部提取金额不等于账户可用余额!" );
			errcode = 99999;
			strcpy( err_msg, "全部提取金额不等于账户可用余额!" );
			PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode, 0 );
			PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
			return ( -1 );
		}
	}
	else
	{
		WriteLog( APP_LVL, "操作类型有误!" );
		errcode = 99999;
		strcpy( err_msg, "操作类型有误!" );
		PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode, 0 );
		PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
		return ( -1 );
	}
	WriteLog( APP_LVL, "l_accsign[%d]", l_accsign );

	WriteLog( APP_LVL, "开始登记PB日志表" );
	strcpy( pb_tlrlog.tran_inst, inst_no );
	ret = NetBank_Pub_InsertPbTlrLog( &pb_tlrlog );
	if( ret < 0 )
	{
		WriteLog( ERR_LVL, "登记PB日志表失败![%s] [%d]\n", __FILE__, __LINE__  );
		errcode = 99999;
		strcpy( err_msg, "登记PB日志表失败" );
		PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode, 0 );
		PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
		return ( -1 );
	}

	/**账务接口变量准备**/
	GetPoolDataByName( "PBSYS", "RTranCode", 0, 0, old_tx_code, 0 );
	rtrim( old_tx_code );
	strcpy( tx_code, "7171" );
	rtrim( tx_code );
	PutPoolDataByName( "ABSHEAD", "_tx_code", 0, 0, tx_code, 0 );
	PutPoolDataByName( "ABSHEAD", "organ_no", 0, 0, inst_no, 0 );
	/**入账标志**/
	if( l_accsign == 0 ) 
	{
		/**正常记账**/
		PutPoolDataByName( "CBS", "AccSign", 0, 0, "0", 0 );
	}
	else if( l_accsign == 2 )
	{
		PutPoolDataByName( "CBS", "AccSign", 0, 0, "2", 0 );
	}
	else
	{
		WriteLog( ERR_LVL, "入账标志错!" );
	}
	/**交易子码**/
        /* Modifed by Ma Shaojie 20140122 - Start */
	/**PutPoolDataByName( "CBS", "SubTranCode", 0, 0, "01", 0 );**/
        if( operTyp[0] == '1' )
	    PutPoolDataByName( "CBS", "SubTranCode", 0, 0, "02", 0 );
        else
	    PutPoolDataByName( "CBS", "SubTranCode", 0, 0, "01", 0 );
        /* Modifed by Ma Shaojie 20140122 - End */

	/**币种**/
	GetPoolDataByName( "PAGTBUF", "currtype", 0, 0, curr_type, 0 );
	rtrim( curr_type );
	PutPoolDataByName( "CBS", "CurrType", 0, 0, curr_type, 0 );
	/**摘要码**/
	summno = FIXTCDM;
	PutPoolDataByName( "CBS", "SummNo", 0, 0, (char *)&summno, 0 );
	strcpy( summ_note, "定期转活期" );
	PutPoolDataByName( "CBS", "Summary", 0, 0, summ_note, 0 );
	PutPoolDataByName( "CBS", "Summary", 0, 1, summ_note, 0 );

	/**转账：0维-转出账号 1维转入账号**/
	/**现转标志**/
	PutPoolDataByName( "CBS", "CshTsfFlag", 0, 0, "1", 0 );
	PutPoolDataByName( "CBS", "CshTsfFlag", 0, 1, "1", 0 );
	/**内部帐标志**/
	PutPoolDataByName( "CBS", "AccFlag", 0, 0, "0", 0 );
	PutPoolDataByName( "CBS", "AccFlag", 0, 1, "0", 0 );
	/**一本通标志**/
	PutPoolDataByName( "CBS", "OneBkFlag", 0, 0, "0", 0 );
	PutPoolDataByName( "CBS", "OneBkFlag", 0, 1, "0", 0 );
	/**金额**/
	amt = 1.00;
	PutPoolDataByName( "CBS", "Amt", 0, 1, &amt, 0 );
	GetPoolDataByName( "CBS", "Amt", 0, 1, &amt, 0 );
	WriteLog( APP_LVL, "amt[%f]", amt );
	GetPoolDataByName( "BUSIIB", "transAmt", 0, 0, s_amt, 0 );
	rtrim( s_amt );
	amt = atof( s_amt );
	WriteLog( APP_LVL, "amt[%s] [%f]", s_amt, amt );
	PutPoolDataByName( "CBS", "Amt", 0, 0, &amt, 0 );
	WriteLog( APP_LVL, "amt[%s] [%f]", s_amt, amt );
	/**客户名**/
	PutPoolDataByName( "CBS", "CustName", 0, 0, custname, 0 );
	PutPoolDataByName( "CBS", "CustName", 0, 1, custname, 0 );
	/**账号**/
	PutPoolDataByName( "CBS", "Account", 0, 0, out_acc, 0 );
	/*add by Wenfeng 20130923 for SC6000Z-子帐号序号 Begin*/
	acc_id = atol(subacc);
	PutPoolDataByName( "CBS", "AccId", 0, 0, &acc_id, 0 );
	/*add by Wenfeng End*/
	PutPoolDataByName( "CBS", "Account", 0, 1, in_acc, 0 );

	GetPoolDataByName( "ABSHEAD", "_seq_no", 0, 0, hostseqno, 0 );
	PutPoolDataByName("ABSHEAD","list_seqno",0,0, hostseqno,0);

	PutPoolDataByName( "ABSHEAD", "chnl_no", 0, 0, "W", 0);

	/**调用记账接口**/
	ret = PbRegAcc();
	GetPoolDataByName( "ABSHEAD", "_host_stat", 0, 0, &hoststat, 0 );
	if( ret != 0 )
	{
		WriteLog( ERR_LVL, "Call PbRegAcc Err!" );
		if( ret == -1 )
		{
			WriteLog( ERR_LVL, "PbRegAcc timeout!" );
			errcode = 99999;
			strcpy( err_msg, "交易超时，请在账户查询里查询余额及子账户!" );
			PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode, 0 );
			PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
			/**冲正**
			ret = UpdNetBank_PL_AccJnl( pb_tlrlog.tran_date, pb_tlrlog.tran_seqno );
			if( ret != 0 )
                        {
                                WriteLog( ERR_LVL, "更新ACCJNL状态失败!" );
                                strcpy( err_msg, "更新ACCJNL状态失败!" );
				PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode, 0 );
				PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
				return ( -1 );
                        }
			ret = NetBank_PL_InsRevJnl();
                        if( ret < 0 )
                        {
                                WriteLog( ERR_LVL, "插入冲正流水表失败!" );
                                strcpy( err_msg, "插入冲正流水表失败!" );
				PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode, 0 );
				PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
				return ( -1 );
                        }
			**/
		}
		else
		{
			WriteLog( ERR_LVL, "核心记账失败!hoststat[%d]", hoststat );
			errcode = 99999;
			memset( err_msg, 0x00, sizeof( err_msg ) );
			GetPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
			trim( err_msg );
			if( strlen( err_msg ) == 0 )
			{
				strcpy( err_msg, "核心记账失败" );
			}
			ret = DelNetBank_PL_AccJnl( pb_tlrlog.tran_date, pb_tlrlog.tran_seqno );
			if( ret < 0 )
                        {
                                WriteLog( ERR_LVL, "删除ACCJNL表失败!" );
                                strcpy( err_msg, "删除ACCJNL表失败!" );
				PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode, 0 );
				PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
				return ( -1 );
                        }
			PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode, 0 );
			PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
		}
		return ( -1 );
	}
	WriteLog( APP_LVL, "out_acc[%s]in_acc[%s]", out_acc, in_acc );
	memset( out_acc, 0x00, sizeof( out_acc ) );
	/**取定期账号(因可能是新开户，所以从5710返回报文中取定期账户)**/
	GetPoolDataByName( "CBS", "Account", 0, 0, out_acc, 0 );

	memset( fixBal, 0x00, sizeof( fixBal ) );
	memset( fixAvlBal, 0x00, sizeof( fixAvlBal ) );
	
	if( operTyp[0] != '3' )
	{
		ret = GetFixLedgerInfo( out_acc, subacc, &fix_ledger1 );
		/*add by Wenfeng 20130923 for SC6000Z-子帐号序号 Begin*/
		if( ret != 0 )
		{
			WriteLog( APP_LVL, "取定期账号余额失败!" );
			errcode = 99999;
			strcpy( err_msg, "取定期账号余额失败!" );
			PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode, 0 );
			PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
			return ( -1 );
		}
		sprintf( fixAvlBal, "%.2f", fix_ledger1.aval_bal );
		sprintf( fixBal, "%.2f", fix_ledger1.bal );
	}
	/**全部提取销户后可用余额为0**/
	else
	{
		strcpy( fixAvlBal, "0.00" );
		strcpy( fixBal, "0.00" );
	}
	WriteLog( APP_LVL, "fixBal[%s]fixAvlBal[%s]", fixBal, fixAvlBal );

	PutPoolDataByName( "BUSIIB", "fixBal", 0, 0, fixBal, 0 );
	PutPoolDataByName( "BUSIIB", "fixAvlBal", 0, 0, fixAvlBal, 0 );

	ret = AccQryPub5711( in_acc );
	if( ret )
	{
		WriteLog( ERR_LVL, "查询活期账户余额失败!" );
		errcode = 99999;
		strcpy( err_msg, "查询活期账户余额失败!" );
		PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode, 0 );
		PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
		return ( -1 );
	}
	GetPoolDataByName( "CBS", "TranBranch", 0, 0, curAcctBal, 0 );
	GetPoolDataByName( "CBS", "TxFlag", 0, 0, curAcctAvlBal, 0 );

	f_curAcctBal = atof( curAcctBal );
	f_curAcctBal /= 100;
	f_curAcctAvlBal = atof( curAcctAvlBal );
	f_curAcctAvlBal /= 100;
	f_curAcctBal_pre = atof( curAcctBal_pre );
	f_curAcctBal_pre /= 100;
	memset( curAcctBal, 0x00, sizeof( curAcctBal ) );
	memset( curAcctAvlBal, 0x00, sizeof( curAcctAvlBal ) );
	sprintf( curAcctBal, "%.2f", f_curAcctBal );
	sprintf( curAcctAvlBal, "%.2f", f_curAcctAvlBal );
	PutPoolDataByName( "BUSIIB", "curAcctBal", 0, 0, curAcctBal, 0 );
	PutPoolDataByName( "BUSIIB", "curAcctAvlBal", 0, 0, curAcctAvlBal, 0 );


	f_transIntrstAmt = f_curAcctBal - amt - f_curAcctBal_pre;
	WriteLog( APP_LVL, "转存利息[%.2f]转账后活期余额[%.2f]交易金额[%.2f]转账前活期余额[%.2f]", f_transIntrstAmt, f_curAcctBal, amt, f_curAcctBal_pre );
	sprintf( transIntrstAmt, "%.2f", f_transIntrstAmt );

	PutPoolDataByName( "BUSIIB", "transIntrstAmt", 0, 0, transIntrstAmt, 0 );
	
	GetPoolDataByName( "ABSHEAD", "_seq_no", 0, 0, hostSeqNb, 0 );
	PutPoolDataByName( "BUSIIB", "hostSeqNb", 0, 0, hostSeqNb, 0 );
	
	return ( 0 );
}
long 
GetFixLedgerInfo( acc, sub_acc, fix_ledger )
char *acc;
char *sub_acc;
struct FixLedInfoStr *fix_ledger;
{
	struct FixLedInfoStr tmp_fix_ledger;	
	long ret = 0;
        char pqqry[1024+1];
	memset( &tmp_fix_ledger, 0x00, sizeof( struct FixLedInfoStr ) );
	memset( pqqry, 0x00, sizeof( pqqry ) );

	WriteLog( APP_LVL, "acc[%s]", acc );	
	sprintf( pqqry, "select inst_no, acc_name, cstm_no, prd_no, bal, aval_bal from t_fix_ledger where acc = \"%s\" and accid=\"%s\"", acc,sub_acc );
	WriteLog( APP_LVL, "pqqry[%s]", pqqry );	
	ret = PqQry( "9996", (char *)&tmp_fix_ledger, pqqry );
	if( ret != 0 )
	{
		WriteLog( ERR_LVL, "PqQry Err!" );
		return ( -1 );
	}
	strcpy( fix_ledger->inst_no, tmp_fix_ledger.inst_no );
	strcpy( fix_ledger->prd_no, tmp_fix_ledger.prd_no );
	strcpy( fix_ledger->acc_name, tmp_fix_ledger.acc_name );
	strcpy( fix_ledger->cstm_no, tmp_fix_ledger.cstm_no );
	fix_ledger->bal = tmp_fix_ledger.bal;
	fix_ledger->aval_bal = tmp_fix_ledger.aval_bal;
	WriteLog( APP_LVL, "inst_no[%s]", tmp_fix_ledger.inst_no );	
	WriteLog( APP_LVL, "prd_no[%s]", tmp_fix_ledger.prd_no );	
	WriteLog( APP_LVL, "acc_name[%s]", tmp_fix_ledger.acc_name );	
	WriteLog( APP_LVL, "cstm_no[%s]", tmp_fix_ledger.cstm_no );	
	WriteLog( APP_LVL, "bal[%.2f]", tmp_fix_ledger.bal );	
	WriteLog( APP_LVL, "aval_bal[%.2f]", tmp_fix_ledger.aval_bal );	

	return ( 0 );
}
