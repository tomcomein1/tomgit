/*****************************************************
**函数描述     : 保证金缴存基本账户资金检查
**函数用途     ：基本账户资金检查
**输入：
**输出:
**创建日期     ：2011/12/28
**最后修改日期 ：
**Create by    : XXJ
*****************************************************/
#include <stdio.h>
#include <stdlib.h>
#include <sys/types.h>
#include <time.h>
#include "pbconstval.h"
#include "pbstructdef.h"
#ifdef ORACLE_DATABASE
EXEC SQL include "pbranchdb.h";
#else
#include "pbranchdb.h"
#endif
#include "pberrlog.h"
#include "pbglbvardef.h"
#include "pbbasefunc.h"
#include "pbappdb.h"
EXEC SQL include "pbsccin.h";


/*
 * --------------------------------------------------------------------
 *                  P R O G R A M    H I S T O R Y
 * --------------------------------------------------------------------
 * PROGRAMMER   | DATE     | SPR NUM  | COMMENTS
 * --------------------------------------------------------------------
 * SHEN BING    | 20130122 |          | 修改查询索引
 * --------------------------------------------------------------------
 * XXJ			| 20130301 |	      | 1-摘要码改用6500111111
 * 										2-基本账户是行内不用判断资金来源
 * --------------------------------------------------------------------
 */


#define ERROUT(msg) WriteLog(ERR_LVL,msg );\
	PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, msg,0);

int Check_acc_Amount()
{
	int ret;
	EXEC SQL BEGIN DECLARE SECTION;
	struct payforquatantee  cancel_order;
	struct sccincstminfo cstm_info;
	double totalamt = 0.00;  /* 汇总金额  */
	double avalamt = 0.00;  /* 基本账户支出金额  */
	char payCardAcctNb[32+1];
	double cnap_amtA = 0.00;
	double beps_amtA = 0.00;
	double ncs_amtA = 0.00;
	double allamt = 0.00;
	double bal = 0.00; /*行内流水金额*/
	char cstm_acc[32+1];    /* 单位结算账户   */
	char corp_acc[32+1];    /* 单位基本账户  */
	char data_flag[1+1];    /* 数据状态      */ 
	char pb_date[8+1];
	char tran_date[8 + 1];
	int i_tran_date=0;
	char sql_cnap[1028 + 1];
	char sql_beps[1028 + 1];
	char sql_ncs[1028 + 1];
	char tmp_buf[200 + 1];
	char orderno[32+1];
	EXEC SQL END DECLARE SECTION;

	/* 投标金额  */
	double transAmt = 0.00;
	long errcode = 0;
	char remarkCd[16+1];
	char getAmt[17+1];
	char errmsg[128+1];
	char strmsg[128+1];
	char sqlstr[512+1];

    memset( &cstm_info,0x00,sizeof( struct sccincstminfo ) );
	memset( &cancel_order,0x00,sizeof( cancel_order ) );
	memset( remarkCd,0,sizeof( remarkCd ) );
	memset( payCardAcctNb,0,sizeof( payCardAcctNb ) );
	memset( cstm_acc,0,sizeof( cstm_acc ) );
	memset( corp_acc,0,sizeof( corp_acc ) );
	memset( getAmt,0,sizeof( getAmt ) );
	memset( errmsg ,0,sizeof( errmsg ) );
	memset( data_flag ,0,sizeof( data_flag ) );
	memset( pb_date, 0, sizeof( pb_date));
	memset( tran_date, 0, sizeof( tran_date));
	memset( sql_cnap, 0, sizeof( sql_cnap));
	memset( sql_beps, 0, sizeof( sql_beps));
	memset( sql_ncs, 0, sizeof( sql_ncs));
    memset( tmp_buf, 0, sizeof( tmp_buf));
    memset( orderno, 0, sizeof( orderno));
	memset(sqlstr, 0 ,sizeof(sqlstr));

	GetPoolDataByName( "RCBIB","transAmt",0,0,getAmt,0 );
	transAmt = atof(getAmt);
	GetPoolDataByName( "RCBIB","remarkCd",0,0,remarkCd,0 );
    
	WriteLog( ERR_LVL,"remarkCd=====[%s]",remarkCd);
	rtrim( remarkCd );
	WriteLog( ERR_LVL,"remarkCd=====[%s]",remarkCd);
	/* 表示为保证金缴存 */
	/*if( strcmp( remarkCd,"FW") != 0 && strlen(remarkCd) != 0)*/
	if( strcmp( remarkCd,"6500111111") == 0 )
	{
		/* 判断上送缴费账号是否是客户信息维护账号  */
		GetPoolDataByName( "RCBIB","payCardAcctNb",0,0,payCardAcctNb,0 );
		GetPoolDataByName( "RCBIB","remark",0,0,orderno,0 );
		rtrim( payCardAcctNb );
		trim( orderno );

		/*查询该订单是否已经作废*/
		EXEC SQL SELECT * INTO :cancel_order
		FROM t_pb_payforQuarantee
		WHERE orderno= :orderno;
		if( SQLCODE )
		{
			if( SQLCODE == SQLNOTFOUND )
			{
				WriteLog( ERR_LVL,"该订单未被作废可以支付!" );
			}
			else
			{
				WriteLog(ERR_LVL,"查询订单是否作废失败![%d]",SQLCODE );
				errcode = 99999;
				strcpy( errmsg, "查询该笔订单失败,请稍后再试!" );
				PutPoolDataByName("ABSHEAD","app_err_no", 0, 0, (char *)&errcode,0 );
				PutPoolDataByName("ABSHEAD","_error_code", 0, 0, errmsg,0);
				return ( -1 );
			}
		}
		else
		if( cancel_order.Reservers3[0] == '0')
		{ 
			WriteLog( ERR_LVL,"该订单已经作废!" );
			errcode = 99999;
			strcpy( errmsg, "该订单已经作废,请重新制单!" );
			PutPoolDataByName("ABSHEAD","app_err_no", 0, 0, (char *)&errcode,0 );
			PutPoolDataByName("ABSHEAD","_error_code", 0, 0, errmsg,0);
			return ( -1 );
		}
		else
		if(cancel_order.Pay_flag[0] == '1')
		{
			WriteLog( ERR_LVL,"该订单已缴存" );
			errcode = 99999;
			strcpy( errmsg, "该订单已缴存,请重新制单缴费!" );
			PutPoolDataByName("ABSHEAD","app_err_no", 0, 0, (char *)&errcode,0 );
			PutPoolDataByName("ABSHEAD","_error_code", 0, 0, errmsg,0);
			return ( -1 );
		}

		/*查询该订单是否已经作废END*/
		EXEC SQL SELECT * into :cstm_info
		FROM t_pb_sccin_cstm_info
		WHERE cstm_acc= :payCardAcctNb;
		if( SQLCODE )
		{
			if( SQLCODE == SQLNOTFOUND )
			{
				WriteLog( ERR_LVL,"无该账号信息!" );
				errcode = 99999;
				strcpy( errmsg, "缴款失败，请带上基本账户相关资料到四川农信网点办理基本账户信息维护后，方可办理缴款业务!" );
				PutPoolDataByName("ABSHEAD","app_err_no", 0, 0, (char *)&errcode,0 );
				PutPoolDataByName("ABSHEAD","_error_code", 0, 0, errmsg,0);
				return ( -1 );
			}
			else
			{
				WriteLog(ERR_LVL,"查询客户信息表失败![%d]",SQLCODE );
				return ( -1 );
			}
		}

		/* 判断基本账户行内行外  */
		if( strcmp( rtrim( cstm_info.comm_flag ),"1") == 0  )
		{   
			strcpy( cstm_acc,cstm_info.cstm_acc );/* 单位结算账户   */
			Trim( cstm_acc );
			strcpy( corp_acc,cstm_info.peer_acc );/* 单位基本账户  */
			Trim( corp_acc );
			/*获取当前日期*/
			ret = PayGetPbDate(pb_date);
			if( ret < 0)
			{
				WriteLog( ERR_LVL, "取当前会计日期错");
				return ( -1);
			}

			rdefmtdate( &i_tran_date, "yyyymmdd", pb_date);
			i_tran_date--;
			rfmtdate( i_tran_date, "yyyymmdd", tran_date);

			WriteLog(ERR_LVL, "当前会计日期 = [%s]", pb_date);
			WriteLog(ERR_LVL, "当前会计日期前日 = [%s]", tran_date);

			/*设置脏读*/
			EXEC SQL SET ISOLATION TO DIRTY READ;
		   
			/*查询结算账户金额*/
			EXEC SQL SELECT amt into:totalamt
			FROM t_pb_sccin_accdata
			WHERE cstm_acc =:cstm_acc;
			if( SQLCODE )
			{
				WriteLog(ERR_LVL,"查询金额失败[%d]",SQLCODE );
				return ( -1 );
			}
			/* 查询大额流水表中基本账户贷记来帐  */
			/* sprintf(sql_cnap, "SELECT {+INDEX (t_cnap_jnl idx_cnap_jnl5 )} nvl(sum(amt),0.00) FROM t_cnap_jnl WHERE in_out_flag = '1' AND flag[5] = '0' AND (proc_flag = '02' or proc_flag = '03') AND dr_cr_flag = '2' AND pay_acc ='%s' AND rec_acc ='%s' ", corp_acc, cstm_acc); */
			sprintf(sql_cnap, "SELECT {+INDEX (t_cnap_jnl idx_cnap_jnl3 )} \n"
                                      "       NVL(SUM(amt),0.00) \n"
                                      "FROM t_cnap_jnl \n"
                                      "WHERE tran_date = '%s' \n"
                                      "AND in_out_flag = '1' \n"
                                      "AND dr_cr_flag = '2' \n"
                                      "AND flag[5] = '0' \n"
                                      "AND (proc_flag = '02' or proc_flag = '03') \n"
                                      "AND pay_acc ='%s' \n"
                                      "AND rec_acc ='%s';\n", pb_date, corp_acc, cstm_acc);

			/* 查询小额流水表中基本账户贷记来帐  */
			/* sprintf(sql_beps, "SELECT {+INDEX (t_beps_buss_jnl i_beps_buss_jnl )} nvl(sum(amt),0.00) FROM t_beps_buss_jnl WHERE in_out_flag = '1' AND flag[5] = '0' AND (proc_flag = '61' or proc_flag = '62') AND dr_cr_flag = '2' AND payer_acc = '%s' AND payee_acc = '%s' ", corp_acc, cstm_acc); */
			sprintf(sql_beps, "SELECT {+INDEX (t_beps_buss_jnl i_beps_buss_jnl7 )} \n"
                                      "       NVL(SUM(amt),0.00) \n"
                                      "FROM t_beps_buss_jnl \n"
                                      "WHERE tran_date = '%s' \n"
                                      "AND in_out_flag = '1' \n"
                                      "AND dr_cr_flag = '2' \n"
                                      "AND flag[5] = '0' \n"
                                      "AND (proc_flag = '61' or proc_flag = '62') \n"
                                      "AND payer_acc = '%s' \n"
                                      "AND payee_acc = '%s' ;\n", pb_date, corp_acc, cstm_acc);

			/* 查询农信银流水表中基本账户贷记来帐  */
			/* sprintf(sql_ncs, "SELECT {+INDEX (t_ncs_acc nxyacc_idx )} nvl(sum(txnamt),0.00) FROM t_ncs_acc WHERE (dcflg = 'C' AND srflg = '1') AND transtat = '00' AND pyactno ='%s' AND reactno = '%s' and mifid='111111' ", corp_acc, cstm_acc);  */
			sprintf(sql_ncs, "SELECT {+INDEX (t_ncs_acc nxyacc_idx_0 )} \n"
                                      "NVL(SUM(txnamt),0.00) \n"
                                      "FROM t_ncs_acc \n"
                                      "WHERE mifid='111111' \n"
                                      "AND MIFTranDat = '%s' \n"
                                      "AND (dcflg = 'C' AND srflg = '1') \n"
                                      "AND transtat = '00' \n"
                                      "AND pyactno ='%s' \n"
                                      "AND reactno = '%s' ;\n", pb_date, corp_acc, cstm_acc);

			WriteLog(ERR_LVL, "sql_cnap = [%s]", sql_cnap);
			WriteLog(ERR_LVL, "sql_beps = [%s]", sql_beps);
			WriteLog(ERR_LVL, "sql_ncs = [%s]", sql_ncs);
		
			WriteLog(DEBUG_LVL1, "sql_str  PREPARE开始");

			/*sql_cnap  PREPARE*/
			EXEC SQL PREPARE select_sql_cnap FROM :sql_cnap;
			if(SQLCODE)
			{
				WriteLog(ERR_LVL,"准备游标失败sql_cnap![%d]",SQLCODE);
				return (-1);
			}

			/*sql_cnap  EXEC*/
			EXEC SQL EXECUTE select_sql_cnap INTO :cnap_amtA;
			if(SQLCODE)
			{
				WriteLog(ERR_LVL,"select_sql_cnap查询失败!SQLCODE[%d]\n",SQLCODE);
				if(ret < 0)
				{
					WriteLog(ERR_LVL,"select_sql_cnap查询失败处理失败![%d]\n",ret);
				}
				EXEC SQL FREE  select_sql_cnap;
				return ( -1 );
			}
			EXEC SQL FREE  select_sql_cnap;

			WriteLog(ERR_LVL,"cnap_amtA = [%f]", cnap_amtA);

			/*sql_beps  PREPARE*/
			EXEC SQL PREPARE select_sql_beps FROM :sql_beps;
			if(SQLCODE)
			{
				WriteLog(ERR_LVL,"准备游标失败sql_beps![%d]",SQLCODE);
				return (-1);
			}

			/*sql_beps  EXEC*/
			EXEC SQL EXECUTE select_sql_beps INTO :beps_amtA;
			if(SQLCODE)
			{
				WriteLog(ERR_LVL,"select_sql_beps查询失败!SQLCODE[%d]\n",SQLCODE);
				if(ret < 0)
				{
					WriteLog(ERR_LVL,"select_sql_beps查询失败处理失败![%d]\n",ret);
				}
				EXEC SQL FREE  select_sql_beps;
				return ( -1 );
			}
			EXEC SQL FREE  select_sql_beps;

			WriteLog(ERR_LVL,"beps_amtA = [%f]", beps_amtA);

			/*sql_ncs  PREPARE*/
			EXEC SQL PREPARE select_sql_ncs FROM :sql_ncs;
			if(SQLCODE)
			{
				WriteLog(ERR_LVL,"准备游标失败sql_ncs![%d]",SQLCODE);
				return (-1);
			}

			/*sql_ncs  EXEC*/
			EXEC SQL EXECUTE select_sql_ncs INTO :ncs_amtA;
			if(SQLCODE)
			{
				WriteLog(ERR_LVL,"select_sql_ncs查询失败!SQLCODE[%d]\n",SQLCODE);
				if(ret < 0)
				{
					WriteLog(ERR_LVL,"select_sql_ncs查询失败处理失败![%d]\n",ret);
				}
				EXEC SQL FREE  select_sql_ncs;
				return ( -1 );
			}
			EXEC SQL FREE  select_sql_ncs;
			WriteLog(ERR_LVL,"ncs_amtA = [%f]", ncs_amtA);

			/*恢复安全读*/ 
			EXEC SQL SET ISOLATION TO COMMITTED READ;

			allamt = totalamt+cnap_amtA + beps_amtA  + ncs_amtA ;

			if( allamt < transAmt )
			{
				WriteLog(ERR_LVL,"单位结算账户资金不满足保证金缴存!请核实!" );
				errcode = 99999;
				avalamt = transAmt - allamt;
				sprintf( strmsg,"有%.2f元不是来自基本账户!",avalamt);
				strcpy( errmsg, strmsg );
				PutPoolDataByName("ABSHEAD","app_err_no", 0, 0, (char *)&errcode,0 );
				PutPoolDataByName("ABSHEAD","_error_code", 0, 0, errmsg,0);
				return ( -1 ); 
			}
		}
		/*基本账户是行内的则查询sdm_dtl表*/
		/* modify by xxj 20130304 取消对行内基本账户的检查
		else
		{
			strcpy( cstm_acc,cstm_info.cstm_acc );
			Trim( cstm_acc );
			strcpy( corp_acc,cstm_info.peer_acc );
			Trim( corp_acc );

			ret = PayGetPbDate(pb_date);
			if( ret < 0)
			{
				WriteLog( ERR_LVL, "取当前会计日期错");
				return ( -1);
			}

			rdefmtdate( &i_tran_date, "yyyymmdd", pb_date);
			i_tran_date--;
			rfmtdate( i_tran_date, "yyyymmdd", tran_date);

			WriteLog(ERR_LVL, "当前会计日期 = [%s]", pb_date);
			WriteLog(ERR_LVL, "当前会计日期前日 = [%s]", tran_date);
		   
			if( strcmp(cstm_acc,corp_acc) == 0 )
			{

				sprintf( sqlstr, "select aval_bal from t_sdm_ledger where acc='%s'",corp_acc );
				WriteLog( ERR_LVL, "sql[%s]" , sqlstr );
				ret= PqQry( "9996", &allamt, sqlstr );
				if ( ret != 0 )
				{
					if ( ret == 100 )
					{
						WriteLog (ERR_LVL, "无该账号[%s]信息",corp_acc);
						return( -1 );
					}
					else
					{
						WriteLog ( ERR_LVL, "调用PQDS查询出错[%d]", ret);
						return( -1 );
					}
				}

			}
			else
			{
				EXEC SQL SELECT amt into:totalamt
				FROM t_pb_sccin_accdata
				WHERE cstm_acc =:cstm_acc;
				if( SQLCODE )
				{
					WriteLog(ERR_LVL,"查询金额失败[%d]",SQLCODE );
					return ( -1 );
				}
				sprintf(sql_cnap, "SELECT  nvl(sum(amt),0.00) FROM t_sdm_dtl WHERE tran_date = '%s' AND dr_cr_flag = '2' AND acc = '%s' AND peer_acc = '%s' AND csh_tsf_flag = '1'", tran_date, cstm_acc, corp_acc);

				WriteLog( ERR_LVL, "sql_cnap[%s]" , sql_cnap );
				ret= PqQry( "9996", &bal, sql_cnap );
				if ( ret != 0 )
				{
					if ( ret == 100 )
					{
						WriteLog (ERR_LVL, "无对应账号金额!");
					}
					else
					{
						WriteLog ( ERR_LVL, "调用PQDS查询出错[%d]", ret);
					}
				}

				WriteLog(ERR_LVL,"对应账号金额bal = [%f]", bal);
				allamt = totalamt + bal ;

			}

			if( allamt < transAmt )
			{

				WriteLog(ERR_LVL,"单位结算账户资金不满足保证金缴存!请核实!" );
				errcode = 99999;
				avalamt = transAmt - allamt;

				sprintf( strmsg,"您缴款的资金有%.2f元不是来源于基本账户，请保证所缴款项全部来自基本账户。",avalamt);
				strcpy( errmsg, strmsg );

				PutPoolDataByName("ABSHEAD","app_err_no", 0, 0, (char *)&errcode,0 );
				PutPoolDataByName("ABSHEAD","_error_code", 0, 0, errmsg,0);

				return ( -1 ); 
			}
		}
		 modify by xxj 20130304 取消对行内基本账户的检查 */

	}
	return ( 0 );
}

/* 保证金成功记账登记流水表  */
int RegQuarantee()
{
	int ret;
	EXEC SQL BEGIN DECLARE SECTION;
		struct payforquatantee  pay_for_quatantee;
		struct sccincstminfo  cstm_info;
		struct sccinbackMsg sccin_bakMsg;

		char cardaccno[30+1];
		char cstm_acc[32+1];    /* 单位结算账户   */
		char corp_acc[32+1];    /* 单位基本账户  */  

		double totalamt = 0.00;  /* 汇总金额  */
		double transamt = 0.00;
		double allamt = 0.00; /*汇总金额*/
		double coreamt = 0.00;
	EXEC SQL END DECLARE SECTION;

	char remarkCd[16+1];
	char hoststat[1+1];
	int i_pb_date;
	char trantime[10+1];
	char middamt[16+1];
	char systime[8+1];

	char inamt[30+1];
	char outamt[60+1];
	char inacc[50+1];
	char outacc[100+1];
	char pbseqno_A[10+1];
	char err_msg[100+1];
	long stat = 1;
	long app_err_no = 0;

	memset( inamt,0,sizeof( inamt ) );
	memset( hoststat,0,sizeof( hoststat ) );
	memset( outamt,0,sizeof( outamt ) );
	memset( inacc,0,sizeof( inacc ) );
	memset( outacc,0,sizeof( outacc ) );
	memset( middamt,0,sizeof( middamt ) );
	memset( systime, 0, sizeof(systime) );
	memset( cardaccno, 0, sizeof(cardaccno) );

	memset( remarkCd,0,sizeof( remarkCd ) );
	memset( &pay_for_quatantee,0x00,sizeof( pay_for_quatantee ) );
	memset( &cstm_info,0x00,sizeof( struct sccincstminfo ) );
	memset( &sccin_bakMsg,0x00,sizeof( sccin_bakMsg ) );
	memset( trantime,0,sizeof( trantime ) );
	memset( pbseqno_A ,0,sizeof( pbseqno_A ) );
	memset( err_msg, 0, sizeof(err_msg));

	GetPoolDataByName( "RCBIB","remarkCd",0,0,remarkCd,0 );
	rtrim( remarkCd );

	/* 判断是否为保证金缴存  */
	/*if( strcmp( remarkCd,"FW") != 0 && strlen(remarkCd) != 0)*/
	if( strcmp( remarkCd,"6500111111") == 0 )
	{
		/* 网银上送缴费报文信息  */
		GetPoolDataByName( "RCBIB","chnlSeqNb",0,0,pay_for_quatantee.chnlSeqNb,0 );
		GetPoolDataByName( "RCBIB","cardAcctFlg",0,0,pay_for_quatantee.cardAcctFlg ,0 );

		/* 加密缴费账号 */
		GetPoolDataByName( "RCBIB","payCardAcctNb",0,0,inacc,0 );
		strcpy(cardaccno,inacc);
		DesLine(inacc, outacc, "1234554326781980", 0);
		trim(outacc);
		strcpy(pay_for_quatantee.payCardAcctNb,outacc);

		GetPoolDataByName( "RCBIB","payCurTyp",0,0,pay_for_quatantee.payCurTyp,0 );
		GetPoolDataByName( "RCBIB","payCashFlg",0,0,pay_for_quatantee.payCashFlg,0);
		GetPoolDataByName( "RCBIB","payCustNm",0,0,pay_for_quatantee.corp_name,0 );
		GetPoolDataByName( "RCBIB","payBrchID",0,0,pay_for_quatantee.payBrchID,0 );
		GetPoolDataByName( "RCBIB","payBrchNm",0,0,pay_for_quatantee.payBrchNm,0 );
		GetPoolDataByName( "RCBIB","rcvAcct",0,0,pay_for_quatantee.rcvAcct,0 );
		GetPoolDataByName( "RCBIB","rcvCustNm",0,0,pay_for_quatantee.rcvCustNm,0 );
		GetPoolDataByName( "RCBIB","rcvBrchID",0,0,pay_for_quatantee.rcvBrchID,0 );
		GetPoolDataByName( "RCBIB","rcvBrchNm",0,0,pay_for_quatantee.rcvBrchNm,0 );
		GetPoolDataByName( "RCBIB","transAmt",0,0,middamt,0 );

		transamt = atof(middamt);
		/* 加密缴费金额 */
		DesLine(middamt, outamt, "1234554326781980", 0);
		trim(outamt);
		strcpy(pay_for_quatantee.transAmt,outamt);

		GetPoolDataByName( "RCBIB","feeFlg",0,0,pay_for_quatantee.feeFlg,0 );
		GetPoolDataByName( "RCBIB","fee",0,0,&pay_for_quatantee.fee,0 );
		GetPoolDataByName( "RCBIB","use",0,0,pay_for_quatantee.use,0 );
		trim(pay_for_quatantee.use);
		GetPoolDataByName( "RCBIB","memo",0,0,pay_for_quatantee.memo,0 );
		GetPoolDataByName( "RCBIB","remark",0,0,pay_for_quatantee.orderNo,0 );
		trim(pay_for_quatantee.orderNo);
		/* 上送信息获取结束  */

		/* 根据缴费账号获取客户信息  */
		EXEC SQL SELECT * into :cstm_info
		FROM t_pb_sccin_cstm_info
		WHERE cstm_acc = :cardaccno;
		if( SQLCODE  )
		{
			WriteLog( ERR_LVL,"查询客户信息表失败![%d]",SQLCODE  );
			return( -1 );
		}

		strcpy( pay_for_quatantee.Pay_flag,"1"  );

		/* 判断该笔交易是否记账成功 */
		GetPoolDataByName("BUSIIB","thsretCd",0,0, hoststat,0);
		WriteLog( ERR_LVL,"记账是否成功![%s]",hoststat  );
		if( strcmp(hoststat,"0") == 0 )
		{
			/* 记账成功  */
			/* 置缴费状态为1-成功缴费  */

			strcpy( pay_for_quatantee.Pay_flag,"1"  );

			/*记账成功则更新汇总金额*/
			/*更新汇总表里面的金额 因为成功转走钱过后汇总金额应该减少*/
			if( strcmp(cstm_info.comm_flag,"1") == 0 )
			{
				WriteLog(ERR_LVL, "更新账户资金统计表");
				EXEC SQL UPDATE t_pb_sccin_accdata
				SET  amt = amt - :transamt
				WHERE  cstm_acc = :cardaccno;
				if( SQLCODE)
				{
					WriteLog( ERR_LVL, "账户资金统计表UPDATE失败[%d]", SQLCODE);
					return( -1);
				}
			}
		}
		else
		{
			/* 记账失败 */
			/* 置缴费状态为0-失败  */
			strcpy( pay_for_quatantee.Pay_flag,"0"  );
		}
		ret = PayGetPbDate(trantime);
		if(ret != 0)
		{
			WriteLog(ERR_LVL, "取PB日期错!");
			return(-1);
		}

		/*获取TT流水号查看是否是记账用的TT流水*/

		GetPoolDataByName( "ABSHEAD", "_seq_no", 0, 0, pbseqno_A, 0 );
		WriteLog( ERR_LVL,"变量池TT流水TTseqno====![%s]",pbseqno_A  );

		/*记账成功调用核心接口屏蔽该笔明细*/
		/* 调用核心接口  */

		PutPoolDataByName("ABSHEAD", "_tx_code", 0, 0,"5766" , 0);
		PutPoolDataByName( "ABSHEAD", "_tx_op_stat", 0, 0, "N" , 0 );
		PutPoolDataByName( "ABSHEAD", "chnl_no", 0, 0, "W", 0);
		PutPoolDataByName("ABSHEAD", "_tlr_no", 0, 0, "888886", 0);

		/*明细摸除参数*/
		/*账号*/
		PutPoolDataByName ( "LOAN", "StAcc", 0, 0, pay_for_quatantee.rcvAcct, 0);
		/*金额*/
		PutPoolDataByName ( "LOAN", "Bal", 0, 0, &transamt, 0);
		/*渠道流水号*/
		PutPoolDataByName ( "LOAN", "Date1", 0, 0, pbseqno_A, 0);
		/*开关标志 1--关闭查询 2---打开查询*/
		PutPoolDataByName ( "LOAN", "DataType", 0, 0, "1", 0);
		/*缴费时间*/
		trim(trantime);
		rdefmtdate( &i_pb_date, "yyyymmdd", trantime);
		PutPoolDataByName ( "CBS", "FpDate", 0, 0, trantime, 0);

		WriteLog(ERR_LVL, "=============FML打包===============");
		ret=Data_PackFml("110|5766|0");
		if(ret)
		{
			WriteLog(ERR_LVL,"ERROR: FML打包错: %d\n", ret);
			PutPoolDataByName("ATM_COMM", "ResCode", 0, 0, "96", 0);
			WriteLog(ERR_LVL,"ERROR: FML打包错,请手工处理该交易明细! ");
			WriteLog(ERR_LVL,"StAcc==========[%s]",inacc);
			WriteLog(ERR_LVL,"transamt=======[%f]",transamt);
			WriteLog(ERR_LVL,"pbseqno======[%s]",pbseqno_A);
		}

		WriteLog(ERR_LVL, "=============与核心通讯===============");
		ret = Comm_AcCallFmlAndUnpack("110|PB_SELSVC|5766|1");
		if(ret)
		{
			WriteLog(ERR_LVL,"ERROR: FML解包错: %d\n", ret);
			PutPoolDataByName("ATM_COMM", "ResCode", 0, 0, "96", 0);
			WriteLog(ERR_LVL,"ERROR: FML解包错,请手工处理该交易明细! ");
			WriteLog(ERR_LVL,"StAcc==========[%s]",inacc);
			WriteLog(ERR_LVL,"transamt=======[%f]",transamt);
			WriteLog(ERR_LVL,"pbseqno======[%s]",pbseqno_A);
		}

		GetPoolDataByName( "ABSHEAD", "_host_stat", 0, 0, &stat, 0 );
		if( stat == 0 )
		{
			WriteLog(ERR_LVL,"通讯成功!");
		}
		else
		{
			GetPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg,0 );
			GetPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, &app_err_no, 0);
			WriteLog ( ERR_LVL, "app_err_no[%d]", app_err_no);
			if( stat == -1 )
			{
				WriteLog( ERR_LVL, "通讯超时:[%s]", err_msg );
				PutPoolDataByName("ATM_COMM", "ResCode", 0, 0, "96", 0);
			}
			else
			{
				WriteLog( ERR_LVL, "查询失败:[%s]", err_msg );
			}

			WriteLog(ERR_LVL,"ERROR调用核心接口5766出错,请手工处理该交易明细! ");
			WriteLog(ERR_LVL,"StAcc==========[%s]",inacc);
			WriteLog(ERR_LVL,"transamt=======[%f]",transamt);
			WriteLog(ERR_LVL,"pbseqno======[%s]",pbseqno_A);
		}
		/* 交易日期 */
		/* 获取系统时间 */
		GetPoolDataByName( "PBSYS", "SysTime", 0, 0, systime,0 );
		strcpy( pay_for_quatantee.payDt,trantime );
		strcat( pay_for_quatantee.payDt,systime );
		rtrim( pay_for_quatantee.payDt );
		strcpy( pay_for_quatantee.comm_flag,cstm_info.comm_flag );
		strcpy( pay_for_quatantee.Ccstm_no,cstm_info.Ccstm_no);
		strcpy( pay_for_quatantee.Select_flag,"0" );
		/*add by xxj 20130129 to 抹除保证金投标明细*/
		strcpy( pay_for_quatantee.pcert_type,pbseqno_A );
		/*add end 20130129*/
		/* 退款起息日  */
		strcpy( pay_for_quatantee.intrstBgnDt,trantime );
		trim(pay_for_quatantee.intrstBgnDt);
		/* 置退款标志为0-未退款 */
		/* 置流水表摘要remark为1-保证金  */
		strcpy( pay_for_quatantee.remark,"1"  );
		strcpy(pay_for_quatantee.back_flag,"0" );
		WriteLog(ERR_LVL, "成功失败标志[%s]",pay_for_quatantee.Pay_flag);
		EXEC SQL INSERT INTO t_pb_payforQuarantee VALUES ( :pay_for_quatantee);
		if( SQLCODE  )
		{
			WriteLog( ERR_LVL,"插入建网缴费流水表失败![%d] [%s]",SQLCODE ,sqlca.sqlerrm );
			return ( -1 );
		}
		WriteLog( ERR_LVL,"成功插入缴费流水表!" );

		/* 插入发送信息表 */

		strcpy( sccin_bakMsg.stat,"1"  );
		strcpy( sccin_bakMsg.tran_no,pay_for_quatantee.orderNo  );
		rtrim(sccin_bakMsg.tran_no);
		strcpy( sccin_bakMsg.seqno,pay_for_quatantee.chnlSeqNb  );
		rtrim(sccin_bakMsg.seqno);
		strcpy( sccin_bakMsg.flag,"1"  );
		rtrim(trantime);
		/* mofify by xxj 20130130
		rdefmtdate( &i_pb_date, "yyyymmdd", trantime);
		*/
		i_pb_date++;
		rfmtdate( i_pb_date, "yyyymmdd", sccin_bakMsg.tran_time);
		strcat( sccin_bakMsg.tran_time,systime );
		rtrim(sccin_bakMsg.tran_time);

		EXEC SQL INSERT INTO t_pb_sccin_back VALUES ( :sccin_bakMsg);
		if( SQLCODE  )
		{
			WriteLog( ERR_LVL,"插入发送信息表失败![%d]",SQLCODE  );
			return ( -1 );
		}
		WriteLog( ERR_LVL,"成功插入发送信息表!" );
	}

	/* 判断是否是报名费  */
	if( strcmp( remarkCd,"FW") == 0 )
	{
      
		/* 网银上送缴费报文信息  */
		GetPoolDataByName( "RCBIB","chnlSeqNb",0,0,pay_for_quatantee.chnlSeqNb,0 );
		GetPoolDataByName( "RCBIB","cardAcctFlg",0,0,pay_for_quatantee.cardAcctFlg ,0 );

		/* 加密缴费账号 */
		GetPoolDataByName( "RCBIB","payCardAcctNb",0,0,inacc,0 );
		DesLine(inacc, outacc, "1234554326781980", 0);
		trim(outacc);
		strcpy(pay_for_quatantee.payCardAcctNb,outacc);

		GetPoolDataByName( "RCBIB","payCurTyp",0,0,pay_for_quatantee.payCurTyp,0 );
		GetPoolDataByName( "RCBIB","payCashFlg",0,0,pay_for_quatantee.payCashFlg,0);
		GetPoolDataByName( "RCBIB","payCustNm",0,0,pay_for_quatantee.corp_name,0 );
		GetPoolDataByName( "RCBIB","payBrchID",0,0,pay_for_quatantee.payBrchID,0 );
		GetPoolDataByName( "RCBIB","payBrchNm",0,0,pay_for_quatantee.payBrchNm,0 );
		GetPoolDataByName( "RCBIB","rcvAcct",0,0,pay_for_quatantee.rcvAcct,0 );
		GetPoolDataByName( "RCBIB","rcvCustNm",0,0,pay_for_quatantee.rcvCustNm,0 );
		GetPoolDataByName( "RCBIB","rcvBrchID",0,0,pay_for_quatantee.rcvBrchID,0 );
		GetPoolDataByName( "RCBIB","rcvBrchNm",0,0,pay_for_quatantee.rcvBrchNm,0 );

		GetPoolDataByName( "RCBIB","transAmt",0,0,middamt,0 );
		/* 加密缴费金额 */
		DesLine(middamt, outamt, "1234554326781980", 0);
		trim(outamt);
		strcpy(pay_for_quatantee.transAmt,outamt);

		GetPoolDataByName( "RCBIB","feeFlg",0,0,pay_for_quatantee.feeFlg,0 );
		GetPoolDataByName( "RCBIB","fee",0,0,&pay_for_quatantee.fee,0 );
		GetPoolDataByName( "RCBIB","use",0,0,pay_for_quatantee.use,0 );
		GetPoolDataByName( "RCBIB","memo",0,0,pay_for_quatantee.memo,0 );
		GetPoolDataByName( "RCBIB","remark",0,0,pay_for_quatantee.orderNo,0 );
		trim(pay_for_quatantee.orderNo);

		/* 上送信息获取结束  */

		/* 根据缴费账号获取客户信息  */
		/*
		EXEC SQL SELECT * into :cstm_info
		FROM t_pb_sccin_cstm_info
		WHERE cstm_acc = :pay_for_quatantee.payCardAcctNb;
		if( SQLCODE  )
		{
			WriteLog( ERR_LVL,"查询客户信息表失败![%d]",SQLCODE  );
			return( -1 );
		}
		*/

		strcpy( pay_for_quatantee.Pay_flag,"1"  );
		/* 判断该笔交易是否记账成功 */
		GetPoolDataByName("BUSIIB","thsretCd",0,0, hoststat,0);
		WriteLog( ERR_LVL,"是否记账成功![%s]",hoststat  );
		if( strcmp(hoststat,"0") == 0 )
		{
			/* 记账成功  */
			/* 置缴费状态为1-成功缴费  */
			strcpy( pay_for_quatantee.Pay_flag,"1"  );
		}
		else
		{
			/* 记账失败 */
			/* 置缴费状态为0-失败  */
			strcpy( pay_for_quatantee.Pay_flag,"0"  );
		}

		ret = PayGetPbDate(trantime);
		if(ret != 0)
		{
			WriteLog(ERR_LVL, "取PB日期错!");
			return(-1);
		}

		/* 获取系统时间 */
		GetPoolDataByName( "PBSYS", "SysTime", 0, 0, systime,0 );
		/* 交易日期--时间戳 */
		strcpy( pay_for_quatantee.payDt,trantime );
		strcat( pay_for_quatantee.payDt,systime );
		trim(pay_for_quatantee.payDt);
		/* 置流水表摘要remark为0-报名费  */
		strcpy( pay_for_quatantee.remark,"0"  );
		/*  插入发缴费流水表  */
		EXEC SQL INSERT INTO t_pb_payforQuarantee VALUES ( :pay_for_quatantee);
		if( SQLCODE  )
		{
			WriteLog( ERR_LVL,"插入建网缴费流水表失败![%d]",SQLCODE  );
			return ( -1 );
		}

		WriteLog( ERR_LVL,"成功插入缴费流水表!" );

		/* 插入发送信息表 */
		strcpy( sccin_bakMsg.stat,"1"  );
		strcpy( sccin_bakMsg.seqno,pay_for_quatantee.chnlSeqNb  );
		strcpy( sccin_bakMsg.tran_no,pay_for_quatantee.orderNo );
		strcpy( sccin_bakMsg.flag,"2"  );
		rtrim(trantime);
		rdefmtdate( &i_pb_date, "yyyymmdd", trantime);
		i_pb_date++;
		rfmtdate( i_pb_date, "yyyymmdd", sccin_bakMsg.tran_time);
		strcat( sccin_bakMsg.tran_time,systime );
		trim(sccin_bakMsg.tran_time);

		EXEC SQL INSERT INTO t_pb_sccin_back VALUES ( :sccin_bakMsg);
		if( SQLCODE  )
		{
			WriteLog( ERR_LVL,"插入发送信息表失败![%d]",SQLCODE  );
			return ( -1 );
		}
		WriteLog( ERR_LVL,"成功插入发送信息表!" );
	}
	return ( 0 );
}
