#include <stdio.h>
#include <stdlib.h>
#include <sys/types.h>
#include <time.h>
#include "pbconstval.h" 
#include "pbstructdef.h" 
#ifdef ORACLE_DATABASE
EXEC SQL include "pbranchdb.h";
#else
#include "pbranchdb.h"
#endif
#include "pberrlog.h"
#include "pbglbvardef.h"
#include "pbbasefunc.h"
EXEC SQL include "pbsrv.h";
EXEC SQL include "beps_pub.h";
EXEC SQL include "b_dbbuf.h";

int Aps2HOrBControl_700( char *bankno, char *flag);

#define ZERO_AMT 0.001

char *strstr();
char *strchr();

long
GetBussHead( head)
struct head *head;
{
	GetPoolDataByName( "ABSHEAD", "auth_code", 0, 0, (char*)&head->auth_code, 0);
	GetPoolDataByName( "ABSHEAD", "auth_pwd", 0, 0, head->auth_pwd, 0);
	GetPoolDataByName( "ABSHEAD", "list_seqno", 0, 0, head->list_seqno, 0);
	GetPoolDataByName( "ABSHEAD", "auth_tlr", 0, 0, head->auth_tlr, 0);
	GetPoolDataByName( "ABSHEAD", "check_code", 0, 0, head->check_code, 0);
	GetPoolDataByName( "ABSHEAD", "chkflg_set", 0, 0, head->chkflg_set, 0);
	GetPoolDataByName( "ABSHEAD", "chnl_no", 0, 0, head->chnl_no, 0);
	GetPoolDataByName( "ABSHEAD", "int_name", 0, 0, head->int_name, 0);
	GetPoolDataByName( "ABSHEAD", "mac", 0, 0, head->mac, 0);
	GetPoolDataByName( "ABSHEAD", "organ_no", 0, 0, head->organ_no, 0);
	GetPoolDataByName( "ABSHEAD", "query_inst", 0, 0, head->query_inst, 0);
	GetPoolDataByName( "ABSHEAD", "send_filename", 0, 0, head->send_filename, 0);
	GetPoolDataByName( "ABSHEAD", "tran_flag", 0, 0, head->tran_flag, 0);
	GetPoolDataByName( "ABSHEAD", "varidx", 0, 0, head->varidx, 0);
	GetPoolDataByName( "ABSHEAD", "_chk_no", 0, 0, head->_chk_no, 0);
	GetPoolDataByName( "ABSHEAD", "_seq_no", 0, 0, head->_seq_no, 0);
	GetPoolDataByName( "ABSHEAD", "_tlr_no", 0, 0, head->_tlr_no, 0);
	GetPoolDataByName( "ABSHEAD", "_tx_code", 0, 0, head->_tx_code, 0);
	GetPoolDataByName( "ABSHEAD", "busi_type", 0, 0, head->busi_type, 0);
	GetPoolDataByName( "ABSHEAD", "chn_no", 0, 0, head->chn_no, 0);
	GetPoolDataByName( "ABSHEAD", "self_data", 0, 0, head->self_data, 0);
	GetPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char*)&head->app_err_no, 0);
	GetPoolDataByName( "ABSHEAD", "charge_amt", 0, 0, (char*)&head->charge_amt, 0);
	GetPoolDataByName( "ABSHEAD", "charge_no", 0, 0, (char*)&head->charge_no, 0);
	GetPoolDataByName( "ABSHEAD", "cls_no", 0, 0, (char*)&head->cls_no, 0);
	GetPoolDataByName( "ABSHEAD", "cls_type", 0, 0, (char*)&head->cls_type, 0);
	GetPoolDataByName( "ABSHEAD", "hst_msg_ctrl", 0, 0, (char*)&head->hst_msg_ctrl, 0);
	GetPoolDataByName( "ABSHEAD", "recv_filename", 0, 0, head->recv_filename, 0);
	GetPoolDataByName( "ABSHEAD", "_error_code", 0, 0, head->_error_code, 0);
	GetPoolDataByName( "ABSHEAD", "_host_stat", 0, 0, (char*)&head->_host_stat, 0);
	GetPoolDataByName( "ABSHEAD", "_more_page", 0, 0, (char*)&head->_more_page, 0);
	GetPoolDataByName( "ABSHEAD", "_psbk_line_no", 0, 0, (char*)&head->_psbk_line_no, 0);
	return( 0);
}

long
PayBepsJnl( head, buss_jnl)
struct head head;
EXEC SQL BEGIN DECLARE SECTION;
struct s_beps_buss_jnl *buss_jnl;
EXEC SQL END DECLARE SECTION;
{
	char core_err[100+1];
	char tran_amt[20+1];
	char curr_type[6+1];
	long core_err_no[10+1];
	long ret;

	memset( core_err, 0, sizeof( core_err));
	memset( core_err_no, 0, sizeof( core_err_no));
	memset( tran_amt, 0, sizeof( tran_amt));
	memset( curr_type, 0, sizeof( curr_type));
	ret = 0;

	strcpy( buss_jnl->buss_type, "00100");
	GetPoolDataByName( "BUSIIB", "payCurTyp", 0, 0, curr_type, 0);
	/*币种转化*/
	strcpy( buss_jnl->curr_type, "01");
	strcpy( buss_jnl->tran_type, "00");
	GetPoolDataByName( "BUSIIB", "transAmt", 0, 0, tran_amt, 0);
	buss_jnl->amt = atof(tran_amt);
	GetPoolDataByName( "BUSIIB", "rcvAcctSvcr", 0, 0, buss_jnl->rec_bank_no, 0);
	GetPoolDataByName( "BUSIIB", "payCardAcctNb", 0, 0, buss_jnl->payer_acc, 0);
	GetPoolDataByName( "BUSIIB", "payCustNm", 0, 0, buss_jnl->payer_name, 0);
	GetPoolDataByName( "BUSIIB", "rcvAcct", 0, 0, buss_jnl->payee_acc, 0);
	GetPoolDataByName( "BUSIIB", "rcvCustNm", 0, 0, buss_jnl->payee_name, 0);
	GetPoolDataByName( "BUSIIB", "memo", 0, 0, buss_jnl->appertain, 0);

	strcpy( buss_jnl->csh_tsf_flag,"1");
	PayGetPbDate(buss_jnl->pb_date);
	strcpy( buss_jnl->inst_no, head.organ_no);
	ret = GetInstFn( head.organ_no, buss_jnl->inst_fn);
	if( ret)
	{
		WriteLog( ERR_LVL, "取机构全码错[%s]", head.organ_no);
		strcpy( core_err_no, "-1");
		strcpy( core_err, "取机构全码错");
		PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, core_err_no, 0);
		PutPoolDataByName( "BUSIIB", "thsdesc", 0, 0, core_err, 0);
		return ( -1 );
	}
	if ( BepsGetTranDate(buss_jnl->tran_date) )
	{
		WriteLog( ERR_LVL, "取小额交易日期错");
		strcpy( core_err_no, "-1");
		strcpy( core_err, "取小额交易日期错");
		PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, core_err_no, 0);
		PutPoolDataByName( "BUSIIB", "thsdesc", 0, 0, core_err, 0);
		return (-1);
	}
	if (PayGetBankno (buss_jnl->inst_no, buss_jnl->snd_bank_no) )
	{
		WriteLog( ERR_LVL, "取发起行行号错");
		strcpy( core_err_no, "-1");
		strcpy( core_err, "取发起行行号错");
		PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, core_err_no, 0);
		PutPoolDataByName( "BUSIIB", "thsdesc", 0, 0, core_err, 0);
		return (-1);
	}
	strcpy(buss_jnl->payee_bank_no,buss_jnl->rec_bank_no);
	strcpy(buss_jnl->payer_bank_no,buss_jnl->snd_bank_no);
	if (strcmp (buss_jnl->rec_bank_no, buss_jnl->snd_bank_no) == 0)
	{
		strcpy ( core_err, "接收行行号不能与发送行行号相同!" );
		WriteLog( ERR_LVL, "接收行行号不能与发送行行号相同!" );
		strcpy( core_err_no, "-1");
		PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, core_err_no, 0);
		PutPoolDataByName( "BUSIIB", "thsdesc", 0, 0, core_err, 0);
		return (-1);
	}
	/*** 取对方清算行行号 ***/
	if (BepsGetClrBank (buss_jnl->rec_bank_no,buss_jnl->opp_bank_no) )
	{
		strcpy(core_err,"取对方清算行行号错!");
		WriteLog( ERR_LVL, "取对方清算行行号错!");
		strcpy( core_err_no, "-1");
		PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, core_err_no, 0);
		PutPoolDataByName( "BUSIIB", "thsdesc", 0, 0, core_err, 0);
		return (-1);
	}
	/*** 取支付交易序号 ***/
	if (BepsGetPayNo (buss_jnl->pay_tran_no) )
	{
		strcpy(core_err,"取交易支付序号错!");
		WriteLog( ERR_LVL, "取交易支付序号错!");
		strcpy( core_err_no, "-1");
		PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, core_err_no, 0);
		PutPoolDataByName( "BUSIIB", "thsdesc", 0, 0, core_err, 0);
		return (-1);
	}
	if( strlen( buss_jnl->pay_tran_no ) != 8 )
			Add_Zero( buss_jnl->pay_tran_no, 8 );
	buss_jnl->real_flag[0] = '0';
	buss_jnl->in_out_flag[0] = '0';          /* 往帐 */
	buss_jnl->dr_cr_flag[0] = '2';           /* 贷方 */
	buss_jnl->pkg_no = 0;
	strcpy (buss_jnl->pkg_type, "001");      /* 普通贷记 */
	buss_jnl->prt_num = 0;
	strcpy (buss_jnl->flag, "00000000000000000000");
	buss_jnl->flag[17] = '2';
	strcpy( buss_jnl->proc_flag, "10");
	strcpy (buss_jnl->check_tlr, "888888");
	strcpy (buss_jnl->send_tlr, "888888");
	strcpy (buss_jnl->auth_tlr, "888888");
	buss_jnl->list_num = 1;
	strcpy( buss_jnl->pb_seqno, head._seq_no);
	if ( BepsAnnexToStd(buss_jnl->buss_type, "", buss_jnl->annex_data, &buss_jnl->annex_len) != 0 )
	{
		strcpy(core_err,"生成附言信息错");
		WriteLog( ERR_LVL, "生成附言信息错");
		strcpy( core_err_no, "-1");
		PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, core_err_no, 0);
		PutPoolDataByName( "BUSIIB", "thsdesc", 0, 0, core_err, 0);
		return (-1);
	}
	t_beps_buss_jnl_dac (&buss_jnl, buss_jnl->dac);
	return( 0);
}
/************************************
PayBepsAccProc 网银跨行转账小额记账
input:
output
*************************************/
long
PayBepsAccProc()
{
	EXEC SQL BEGIN DECLARE SECTION;
	struct s_beps_buss_jnl buss_jnl;
	EXEC SQL END DECLARE SECTION;
	struct head head;
	long ret;
	char summ_no[20+1];
	char chnltype[2+1];
	char core_err[100+1];
	char tran_amt[20+1];
	char curr_type[6+1];
	long core_err_no[10+1];
	double amt;

	memset( summ_no, 0, sizeof( summ_no));
	memset( chnltype, 0, sizeof( chnltype));
	memset( &buss_jnl, 0, sizeof( buss_jnl));
	memset( &head, 0, sizeof( head));
	memset( core_err, 0, sizeof( core_err));
	memset( core_err_no, 0, sizeof( core_err_no));
	memset( curr_type, 0, sizeof( curr_type));
	memset( tran_amt, 0, sizeof( tran_amt));
	ret = 0;
	amt = 0.00;
	/*初始化小额流水表*/
	BepsInitBussJnl( &buss_jnl);

	GetBussHead( &head);

	/*记账前处理*/
	/*柜员*/
	PutPoolDataByName( "ABSHEAD", "_tlr_no", 0, 0, "888888", 0);
	/*渠道*/
	PutPoolDataByName( "ABSHEAD", "chnl_no", 0, 0, "W", 0);
	/*核心记账属性*/
	PutPoolDataByName( "CBS", "AccSign", 0, 0, "0", 0);
	/*摘要*/
	PutPoolDataByName( "CBS", "Summary", 0, 0, "跨行转账", 0);
	/*摘要码*/
	strcpy( summ_no,"200");
	PutPoolDataByName( "CBS", "KeyData", 0, 0, summ_no, 0);

	/*交易子码小额*/
	PutPoolDataByName( "CBS", "SubTranCode", 0, 0, "02", 0);

	/*金额*/
	GetPoolDataByName( "BUSIIB", "transAmt", 0, 0, tran_amt, 0);
	amt = atof( tran_amt);
	PutPoolDataByName( "CBS", "Amt", 0, 0, (char*)&amt, 0);
	PutPoolDataByName( "CBS", "Amt", 0, 1, (char*)&amt, 0);
	/*币种*/
	GetPoolDataByName( "BUSIIB", "payCurTyp", 0, 0, curr_type, 0 );
	PutPoolDataByName( "BUSIIB", "currencyTyp", 0, 0, curr_type, 0 );
	ret = NetParaConv( "currencyTyp");
	if( ret)
	{
		WriteLog( ERR_LVL, "网银参数转换错");
		strcpy( core_err, "网银参数转换错");
		PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, "39999", 0 );
		PutPoolDataByName( "BUSIIB", "thsdesc", 0, 0, core_err, 0 );
		return( -1);
	}
	memset( curr_type, 0, sizeof( curr_type));
	GetPoolDataByName( "PAGTBUF", "currtype", 0, 0, curr_type, 0);
	PutPoolDataByName( "CBS", "CurrType", 0, 0, curr_type, 0);

	/*调用记账服务*/
	ret = CommClient( "CoPaySvr");
	if( ret)
	{
		WriteLog( ERR_LVL, "调用记账服务失败");
		strcpy( core_err_no, "-1");
		strcpy( core_err, "调用记账服务失败");
		PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, core_err_no, 0);
		PutPoolDataByName( "BUSIIB", "thsdesc", 0, 0, core_err, 0);
		return ( -1 );
	}

	EXEC SQL BEGIN WORK;
	if( sqlca.sqlcode != 0)
	{
		WriteLog( ERR_LVL, "启动事务失败sqlca.sqlcode=[%d]", sqlca.sqlcode );
		strcpy( core_err_no, "-1");
		strcpy( core_err, "启动事务失败");
		PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, core_err_no, 0);
		PutPoolDataByName( "BUSIIB", "thsdesc", 0, 0, core_err, 0);
		/*插入冲正流水表*/
		ret =  CoPayInsRevJnl( head );
		if( ret< 0)
		{
			WriteLog( ERR_LVL, "插入冲正流水表失败");
			strcpy( core_err, "插入冲正流水表失败");
			strcpy( core_err_no, "-1");
			PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, core_err_no, 0);
			PutPoolDataByName( "BUSIIB", "thsdesc", 0, 0, core_err, 0);
			return( -1);
		}
		return( -1);
	}
	/*小额流水表赋值*/
	ret = PayBepsJnl( head, &buss_jnl );
	if( ret)
	{
		WriteLog( ERR_LVL, "小额流水表赋值失败");
		strcpy( core_err_no, "-1");
		strcpy( core_err, "小额流水表赋值失败");
		PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, core_err_no, 0);
		PutPoolDataByName( "BUSIIB", "thsdesc", 0, 0, core_err, 0);
		EXEC SQL ROLLBACK WORK;
		/*插入冲正流水表*/
		ret =  CoPayInsRevJnl( head );
		if( ret< 0)
		{
			WriteLog( ERR_LVL, "插入冲正流水表失败");
			strcpy( core_err, "插入冲正流水表失败");
			strcpy( core_err_no, "-1");
			PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, core_err_no, 0);
			PutPoolDataByName( "BUSIIB", "thsdesc", 0, 0, core_err, 0);
			return( -1);
		}
		return( -1);
	}
	/*插入小额待转发表*/
	WriteLog( ERR_LVL, "插入待转发表");
	PrintBussJnl("", buss_jnl);
	ret = BepsInsertSend(&buss_jnl, 0, 3);
	if ( ret != 0)
	{
		sprintf( core_err,"insert into sqlca.sqlcode=[%d]", ret );
		strcpy( core_err_no, "-1");
		strcpy( core_err, "小额流水表赋值失败");
		PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, core_err_no, 0);
		PutPoolDataByName( "BUSIIB", "thsdesc", 0, 0, core_err, 0);
		EXEC SQL ROLLBACK WORK;
		/*插入冲正流水表*/
		ret =  CoPayInsRevJnl( head );
		if( ret< 0)
		{
			WriteLog( ERR_LVL, "插入冲正流水表失败");
			strcpy( core_err, "插入冲正流水表失败");
			strcpy( core_err_no, "-1");
			PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, core_err_no, 0);
			PutPoolDataByName( "BUSIIB", "thsdesc", 0, 0, core_err, 0);
			return( -1);
		}
		return( -1);
	}
	/*插入小额流水表*/
	WriteLog( ERR_LVL, "插入小额流水表");
	PrintBussJnl("", buss_jnl);
	EXEC SQL INSERT INTO t_beps_buss_jnl VALUES ( :buss_jnl);
	if ( sqlca.sqlcode)
	{
		WriteLog ( ERR_LVL, "插入小额支付业务流水失败[%d]",sqlca.sqlcode);
		strcpy( core_err_no, "-1");
		strcpy( core_err, "插入小额支付业务流水失败");
		PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, core_err_no, 0);
		PutPoolDataByName( "BUSIIB", "thsdesc", 0, 0, core_err, 0);
		EXEC SQL ROLLBACK WORK;
		/*插入冲正流水表*/
		ret =  CoPayInsRevJnl( head );
		if( ret< 0)
		{
			WriteLog( ERR_LVL, "插入冲正流水表失败");
			strcpy( core_err, "插入冲正流水表失败");
			strcpy( core_err_no, "-1");
			PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, core_err_no, 0);
			PutPoolDataByName( "BUSIIB", "thsdesc", 0, 0, core_err, 0);
			return( -1);
		}
		return( -1);
	}
	EXEC SQL COMMIT WORK;
	if( sqlca.sqlcode != 0 )
	{
		WriteLog( ERR_LVL,"提交事务失败sqlca.sqlcode=[%d]", sqlca.sqlcode );
		strcpy( core_err, "提交事务失败");
		strcpy( core_err_no, "-1");
		PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, core_err_no, 0);
		PutPoolDataByName( "BUSIIB", "thsdesc", 0, 0, core_err, 0);
		/*插入冲正流水表*/
		ret =  CoPayInsRevJnl( head );
		if( ret< 0)
		{
			WriteLog( ERR_LVL, "插入冲正流水表失败");
			strcpy( core_err, "插入冲正流水表失败");
			strcpy( core_err_no, "-1");
			PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, core_err_no, 0);
			PutPoolDataByName( "BUSIIB", "thsdesc", 0, 0, core_err, 0);
			return( -1);
		}
		return( -1);
	}


	return( 0);
}


long
PayCnapJnl( head, cnap_jnl)
struct head head;
EXEC SQL BEGIN DECLARE SECTION;
struct s_cnap_jnl *cnap_jnl;
EXEC SQL END DECLARE SECTION;
{
	EXEC SQL BEGIN DECLARE SECTION;
	char snd_bank_no[12+1];
	EXEC SQL END DECLARE SECTION;
	char core_err[100+1];
	char curr_type[6+1];
	long core_err_no;
	char tran_amt[20+1];
	double amt;

	memset( snd_bank_no, 0, sizeof( snd_bank_no));
	memset( tran_amt, 0, sizeof( tran_amt));
	memset( core_err, 0, sizeof( core_err));
	memset( curr_type, 0, sizeof( curr_type));
	core_err_no = 0;
	amt = 0.00;



	/*机构号*/
	strcpy( cnap_jnl->inst_no, head.organ_no);
	/*往来标志*/
	cnap_jnl->in_out_flag[0] = '0';
	/*批号*/
	cnap_jnl->batch_no = 0;
	/*支付交易序号*/
	if( PayPubGetNum( "CNAP", "pay_tran_no", cnap_jnl->pay_tran_no) != 0)
	{
		WriteLog (ERR_LVL, "取支付交易序号错");
		strcpy( core_err_no, "-1");
		strcpy( core_err, "取支付交易序号错");
		PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, core_err_no, 0);
		PutPoolDataByName( "BUSIIB", "thsdesc", 0, 0, core_err, 0);
		return ( -1 );
	}
	WriteLog ( ERR_LVL, "支付交易序号为[%s]", cnap_jnl->pay_tran_no);
	/*交易日期*/
	if( PayGetPbDate( cnap_jnl->pb_date) < 0)
	{
		WriteLog (ERR_LVL, "取PB交易日期错");
		strcpy( core_err_no, "-1");
		strcpy( core_err, "取PB交易日期错");
		PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, core_err_no, 0);
		PutPoolDataByName( "BUSIIB", "thsdesc", 0, 0, core_err, 0);
		return ( -1 );
	}
	/*PB流水号*/
	strcpy( cnap_jnl->pb_seqno, head._seq_no);
	/*报文标志号*/
	cnap_jnl->pack_no = 0;
	/*交易种类*/
	cnap_jnl->tran_type[0] = '1';
	/*支付类型*/
	strcpy( cnap_jnl->pay_type, "100");
	/*借贷标志*/
	strcpy( cnap_jnl->dr_cr_flag, "2");
	/*现转标志*/
	strcpy( cnap_jnl->csh_tsf_flag, "1");
	/*交易日期*/
	CnapGetTranDate ( cnap_jnl->tran_date);
	/*交易时间*/
	GetCurTimeStr ( cnap_jnl->tran_time);
	/*记帐日期*/
	strcpy ( cnap_jnl->acc_date, "18991231");
	/*收发日期*/
	strcpy ( cnap_jnl->snd_rec_date, "18991231");
	/*币种*/
	GetPoolDataByName( "BUSIIB", "payCurTyp", 0, 0, curr_type, 0);
	/*币种转化*/
	strcpy( cnap_jnl->curr_type, "01");
	/*冠字号*/
	/*凭证种类*/
	/*凭证号*/
	/*补充报单号*/
	strcpy ( cnap_jnl->form_no, "00000000");
	/*凭证日期*/
	/*优先标志*/
	GetPoolDataByName( "BUSIIB", "fastFlg", 0, 0, cnap_jnl->pri_flag, 0);
	/*支付种类*/
	strcpy( cnap_jnl->pay_tran_kind, "12");
	/*取发行行号*/
	if ( PayGetBankno ( cnap_jnl->inst_no, cnap_jnl->snd_bank_no) != 0)
	{
		WriteLog (ERR_LVL, "取发行行号失败");
		strcpy( core_err_no, "-1");
		strcpy( core_err, "取发行行号失败");
		PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, core_err_no, 0);
		PutPoolDataByName( "BUSIIB", "thsdesc", 0, 0, core_err, 0);
		return ( -1 );
	}
	strcpy( snd_bank_no, cnap_jnl->snd_bank_no);
	/*取发起行清算行号*/
	if ( GetClrBankNobyBank ( cnap_jnl->snd_bank_no, cnap_jnl->snd_clr_bank_no) != 0)
	{
		WriteLog ( ERR_LVL, "取发起行清算行号失败");
		strcpy( core_err_no, "-1");
		strcpy( core_err, "取发起行清算行号失败");
		PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, core_err_no, 0);
		PutPoolDataByName( "BUSIIB", "thsdesc", 0, 0, core_err, 0);
		return ( -1 );
	}
	/*取发报中心代码*/
	EXEC SQL SELECT node_no, inst_fn INTO :cnap_jnl->snd_node_no, :cnap_jnl->snd_inst_fn
		FROM t_pay_code_mgmt
		WHERE bank_no = :cnap_jnl->snd_bank_no;
	if ( sqlca.sqlcode)
	{
		WriteLog ( ERR_LVL, "取发起行节点失败,取发起行机构全码失败");
		strcpy( core_err_no, "-1");
		strcpy( core_err, "取发起行节点失败,取发起行机构全码失败");
		PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, core_err_no, 0);
		PutPoolDataByName( "BUSIIB", "thsdesc", 0, 0, core_err, 0);
		return ( -1 );
	}
	/*付款人帐号*/
	GetPoolDataByName( "BUSIIB", "payCardAcctNb", 0, 0, cnap_jnl->pay_acc, 0);
	/*付款人名称*/
	GetPoolDataByName( "BUSIIB", "payCustNm", 0, 0, cnap_jnl->pay_acc_name, 0);
	/*接收行行号*/
	GetPoolDataByName( "BUSIIB", "rcvAcctSvcr", 0, 0, cnap_jnl->rec_bank_no, 0);
	/*付款人开户行号*/
	strcpy ( cnap_jnl->pay_acc_bank_no, cnap_jnl->snd_bank_no);
	/*收款人开户行号*/
	strcpy ( cnap_jnl->rec_acc_bank_no, cnap_jnl->rec_bank_no);
	/*取接收行清算行号*/
	if ( GetClrBankNobyBank ( cnap_jnl->rec_bank_no, cnap_jnl->rec_clr_bank_no) != 0)
	{
		WriteLog ( ERR_LVL, "取接收行清算行号失败");
		strcpy( core_err_no, "-1");
		strcpy( core_err, "取接收行清算行号失败");
		PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, core_err_no, 0);
		PutPoolDataByName( "BUSIIB", "thsdesc", 0, 0, core_err, 0);
		return ( -1 );
	}
	/*取收报中心代码*/
	EXEC SQL SELECT node_no, inst_fn INTO :cnap_jnl->rec_node_no, :cnap_jnl->recv_inst_fn
		FROM t_pay_code_mgmt
		WHERE bank_no = :cnap_jnl->rec_bank_no;
	if ( sqlca.sqlcode)
	{
		WriteLog ( ERR_LVL, "取收报中心代码,收报机构全码失败[%d]",sqlca.sqlcode);
		strcpy( core_err_no, "-1");
		strcpy( core_err, "取收报中心代码,收报机构全码失败");
		PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, core_err_no, 0);
		PutPoolDataByName( "BUSIIB", "thsdesc", 0, 0, core_err, 0);
		return ( -1 );
	}
	/*收款人帐号*/
	GetPoolDataByName( "BUSIIB", "rcvAcct", 0, 0, cnap_jnl->rec_acc, 0);
	/*收款人名称*/
	GetPoolDataByName( "BUSIIB", "rcvCustNm", 0, 0, cnap_jnl->rec_acc_name, 0);
	/*金额*/
	GetPoolDataByName( "BUSIIB", "transAmt", 0, 0, tran_amt, 0);
	cnap_jnl->amt = atof( tran_amt);
	/*手续费金额*/
	cnap_jnl->fee_amt = 0.00;
	/*赔偿金额*/
	cnap_jnl->pay_amt = 0.00;
	/*拒付金额*/
	cnap_jnl->ref_amt = 0.00;
	/*拆借利率*/
	cnap_jnl->sp_dr_rate = 0.00;
	/*拆借期限*/
	cnap_jnl->sp_dr_term = 0;
	/*附言*/
	GetPoolDataByName( "BUSIIB", "memo", 0, 0,  cnap_jnl->appertain, 0);
	/*标志位*/
	strcpy ( cnap_jnl->flag, "00000000000000000000");
	/*往来标志*/
	strcpy ( cnap_jnl->proc_flag, "30");
	/*柜员流水号*/
	strcpy( cnap_jnl->clt_seqno, head._seq_no);
	/*操作员*/
	strcpy( cnap_jnl->check_tlr, "888888");
	strcpy ( cnap_jnl->teller, "888888");
	strcpy ( cnap_jnl->auth_tlr, "000000");
	strcpy ( cnap_jnl->send_tlr, cnap_jnl->check_tlr);
	t_cnap_jnl_dac(&cnap_jnl, cnap_jnl->dac);

	return( 0);
}
long
PayCnapAccProc()
{
	EXEC SQL BEGIN DECLARE SECTION;
	struct s_cnap_jnl cnap_jnl;
	EXEC SQL END DECLARE SECTION;
	struct head head;
	long ret;
	char summ_no[20+1];
	char chnltype[2+1];
	char core_err[100+1];
	char core_err_no[10+1];
	char tran_amt[20+1];
	char curr_type[6+1];
	double amt;

	memset( summ_no, 0, sizeof( summ_no));
	memset( chnltype, 0, sizeof( chnltype));
	memset( core_err, 0, sizeof( core_err));
	memset( core_err_no, 0, sizeof( core_err_no));
	memset( tran_amt, 0, sizeof( tran_amt));
	memset( &cnap_jnl, 0, sizeof( cnap_jnl));
	memset( curr_type, 0, sizeof( curr_type));
	ret = 0;
	amt = 0.00;

	GetBussHead( &head);

	/*记账前处理*/
	/*柜员*/
	PutPoolDataByName( "ABSHEAD", "_tlr_no", 0, 0, "888888", 0);
	/*渠道*/
	PutPoolDataByName( "ABSHEAD", "chnl_no", 0, 0, "W", 0);
	/*核心记账属性*/
	PutPoolDataByName( "CBS", "AccSign", 0, 0, "0", 0);
	/*摘要*/
	PutPoolDataByName( "CBS", "Summary", 0, 0, "跨行转账", 0);
	/*摘要码*/
	strcpy( summ_no,"200");
	PutPoolDataByName( "CBS", "KeyData", 0, 0, summ_no, 0);

	/*交易子码大额*/
	PutPoolDataByName( "CBS", "SubTranCode", 0, 0, "01", 0);

	/*金额*/
	GetPoolDataByName( "BUSIIB", "transAmt", 0, 0, tran_amt, 0);
	amt = atof( tran_amt);
	PutPoolDataByName( "CBS", "Amt", 0, 0, (char*)&amt, 0);
	PutPoolDataByName( "CBS", "Amt", 0, 1, (char*)&amt, 0);

	/*币种*/
	GetPoolDataByName( "BUSIIB", "payCurTyp", 0, 0, curr_type, 0 );
	PutPoolDataByName( "BUSIIB", "currencyTyp", 0, 0, curr_type, 0 );
	ret = NetParaConv( "currencyTyp|cashFlg|pwdTyp");
	if( ret)
	{
		WriteLog( ERR_LVL, "网银参数转换错");
		strcpy( core_err, "网银参数转换错");
		PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, "39999", 0 );
		PutPoolDataByName( "BUSIIB", "thsdesc", 0, 0, core_err, 0 );
		return( -1);
	}
	GetPoolDataByName( "PAGTBUF", "currtype", 0, 0, curr_type, 0);
	PutPoolDataByName( "CBS", "CurrType", 0, 0, curr_type, 0);

	/*调用记账服务*/
	ret = CommClient( "CoPaySvr");
	if( ret)
	{
		WriteLog( ERR_LVL, "调用记账服务失败");
		strcpy( core_err_no, "-1");
		strcpy( core_err, "调用记账服务失败");
		PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, core_err_no, 0);
		PutPoolDataByName( "BUSIIB", "thsdesc", 0, 0, core_err, 0);
		return ( -1 );
	}

	EXEC SQL BEGIN WORK;
	if( sqlca.sqlcode != 0)
	{
		WriteLog( ERR_LVL, "启动事务失败sqlca.sqlcode=[%d]", sqlca.sqlcode );
		strcpy( core_err_no, "-1");
		strcpy( core_err, "启动事务失败");
		PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, core_err_no, 0);
		PutPoolDataByName( "BUSIIB", "thsdesc", 0, 0, core_err, 0);
		/*插入冲正流水表*/
		ret =  CoPayInsRevJnl( head );
		if( ret< 0)
		{
			WriteLog( ERR_LVL, "插入冲正流水表失败");
			strcpy( core_err, "插入冲正流水表失败");
			strcpy( core_err_no, "-1");
			PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, core_err_no, 0);
			PutPoolDataByName( "BUSIIB", "thsdesc", 0, 0, core_err, 0);
			return( -1);
		}
		return( -1);
	}
	/*大额流水表赋值*/
	ret = PayCnapJnl(  head, &cnap_jnl );
	if( ret)
	{
		WriteLog( ERR_LVL, "大额流水表赋值失败");
		strcpy( core_err_no, "-1");
		strcpy( core_err, "大额流水表赋值失败");
		PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, core_err_no, 0);
		PutPoolDataByName( "BUSIIB", "thsdesc", 0, 0, core_err, 0);
		EXEC SQL ROLLBACK WORK;
		/*插入冲正流水表*/
		ret =  CoPayInsRevJnl( head );
		if( ret< 0)
		{
			WriteLog( ERR_LVL, "插入冲正流水表失败");
			strcpy( core_err, "插入冲正流水表失败");
			strcpy( core_err_no, "-1");
			PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, core_err_no, 0);
			PutPoolDataByName( "BUSIIB", "thsdesc", 0, 0, core_err, 0);
			return( -1);
		}
		return( -1);
	}
	/*插入大额待转发表*/
	ret = InsertCnapSend ( &cnap_jnl,0);
	if ( ret != 0)
	{
		WriteLog( ERR_LVL,"insert into sqlca.sqlcode=[%d]", ret );
		strcpy( core_err_no, "-1");
		strcpy( core_err, "大额流水表赋值失败");
		PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, core_err_no, 0);
		PutPoolDataByName( "BUSIIB", "thsdesc", 0, 0, core_err, 0);
		EXEC SQL ROLLBACK WORK;
		/*插入冲正流水表*/
		ret =  CoPayInsRevJnl( head );
		if( ret< 0)
		{
			WriteLog( ERR_LVL, "插入冲正流水表失败");
			strcpy( core_err, "插入冲正流水表失败");
			strcpy( core_err_no, "-1");
			PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, core_err_no, 0);
			PutPoolDataByName( "BUSIIB", "thsdesc", 0, 0, core_err, 0);
			return( -1);
		}
		return( -1);
	}
	/*插入大额流水表*/
	EXEC SQL INSERT INTO t_cnap_jnl VALUES ( :cnap_jnl);
	if ( sqlca.sqlcode)
	{
		WriteLog ( ERR_LVL, "插入大额支付业务流水失败[%d]",sqlca.sqlcode);
		PrintCnapStru( &cnap_jnl );
		strcpy( core_err_no, "-1");
		strcpy( core_err, "插入大额支付业务流水失败");
		PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, core_err_no, 0);
		PutPoolDataByName( "BUSIIB", "thsdesc", 0, 0, core_err, 0);
		EXEC SQL ROLLBACK WORK;
		/*插入冲正流水表*/
		ret =  CoPayInsRevJnl( head );
		if( ret< 0)
		{
			WriteLog( ERR_LVL, "插入冲正流水表失败");
			strcpy( core_err, "插入冲正流水表失败");
			strcpy( core_err_no, "-1");
			PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, core_err_no, 0);
			PutPoolDataByName( "BUSIIB", "thsdesc", 0, 0, core_err, 0);
			return( -1);
		}
		return( -1);
	}
	EXEC SQL COMMIT WORK;
	if( sqlca.sqlcode != 0 )
	{
		WriteLog( ERR_LVL,"提交事务失败sqlca.sqlcode=[%d]", sqlca.sqlcode );
		strcpy( core_err, "提交事务失败");
		strcpy( core_err_no, "-1");
		PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, core_err_no, 0);
		PutPoolDataByName( "BUSIIB", "thsdesc", 0, 0, core_err, 0);
		/*插入冲正流水表*/
		ret =  CoPayInsRevJnl( head );
		if( ret< 0)
		{
			WriteLog( ERR_LVL, "插入冲正流水表失败");
			strcpy( core_err, "插入冲正流水表失败");
			strcpy( core_err_no, "-1");
			PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, core_err_no, 0);
			PutPoolDataByName( "BUSIIB", "thsdesc", 0, 0, core_err, 0);
			return( -1);
		}
		return( -1);
	}

	return( 0);
}

long
PayTranPayPre()
{
EXEC SQL BEGIN DECLARE SECTION;
	double fee;
	char inst_no[4+1];
	/**** add by wyf 20130426 ****/
	char inst_fn[12+1];
	char tmp_inst_fn[4+1];
	char pb_date[10+1];
	char pb_seqno[10+1];
	/**add by sqf 20110504 for 更新转账渠道**/
	char chnltype[2+1];
	/**add by sqf 20110504 end for 更新转账渠道**/
	/*add by xxj 20121210 特殊客户免手续费 begin*/
	char nofee_acc[32+1];
	/*add bu xxj 20121210 特殊客户免手续费 end*/
	double cnap_fee;
	/**add by sqf 20110630 for 手续费优化 begin**/
    double openinstfee = 0.00;
    double agtinstfee = 0.00;
	double total_fee = 0.00;
    /**add by sqf 20110630 for 手续费优化 end**/
	char backup5[30],backup6[30],backup7[30];
	char chnlSeqNb[33];/**add by wangou 20140904**/
EXEC SQL END DECLARE SECTION;
	char tran_amt[20+1];
	char s_avalbal[20+1];
	char s_bal[20+1];
	char s_fee[20+1];
	char s_real_amt[20+1];
	char s_real_fee[20+1];
	char curr_type[6+1];
	char core_err[100+1];
	char tran_code[40+1];
	char tag_in[100+1];
	char tag_out[100+1];
	char *p;
	char *q;
	char tmp_buf[50+1];
	double amt;
	double avalbal;
	double bal;
	double real_amt;
	double real_fee;
	long ret;
	int chg_flag;
	long core_err_no;
	/**del by sqf 20110504 for 更新转账渠道
	char chnltype[2+1];
	del by sqf 20110504 end for 更新转账渠道**/
	char fastflag[2+1];
        char bankno_temp[14+1];   /*行号*/
        char flag_temp[1+1];      /*大小额标志 "H"大额"B"小额*/
        char use[100+1];    /* add by fjx 20151127*/

	WriteLog( APP_LVL, "pppppppppppfee[%s]", s_fee);
	memset( bankno_temp, 0, sizeof( bankno_temp));
	memset( flag_temp, 0, sizeof( flag_temp));
	memset( tran_amt, 0, sizeof( tran_amt));
	memset( inst_no, 0, sizeof( inst_no));
	memset( pb_date, 0, sizeof( pb_date));
	memset( pb_seqno, 0, sizeof( pb_seqno));
	memset( s_avalbal, 0, sizeof( s_avalbal));
	memset( s_bal, 0, sizeof( s_bal));
	memset( tag_in, 0, sizeof( tag_in));
	memset( tag_out, 0, sizeof( tag_out));
	memset( s_fee, 0, sizeof( s_fee));
	memset( s_real_amt, 0, sizeof( s_real_amt));
	memset( s_real_fee, 0, sizeof( s_real_fee));
	memset( curr_type, 0, sizeof( curr_type));
	memset( core_err, 0, sizeof( core_err));
	memset( tran_code, 0, sizeof( tran_code));
	memset( chnltype, 0, sizeof( chnltype));
	memset( fastflag, 0, sizeof( fastflag));
	memset( tmp_buf, 0, sizeof( tmp_buf));
	/*add by xxj 20121120*/
	memset( nofee_acc, 0, sizeof( nofee_acc));
	/**** add by wyf 20130426 ****/
	memset( inst_fn, 0, sizeof( inst_fn));
	memset( tmp_inst_fn, 0, sizeof( tmp_inst_fn));
	memset( backup5, 0, sizeof( backup5));
	memset( backup6, 0, sizeof( backup6));
	memset( backup7, 0, sizeof( backup7));
	memset( chnlSeqNb, 0, sizeof( chnlSeqNb));
	memset( use, 0, sizeof( use));
	
	/*add end by xxj 20121120*/
	amt = 0.00;
	avalbal = 0.00;
	bal = 0.00;
	fee = 0.00;
	cnap_fee = 0.00;
	ret = 0;
	real_amt = 0.00;
	real_fee = 0.00;
	chg_flag = 0;
	core_err_no = 0;

	p=NULL;
	q=NULL;

	/*金额处理*/
	GetPoolDataByName( "BUSIIB", "transAmt", 0, 0, tran_amt, 0);
	amt = atof( tran_amt);
	PutPoolDataByName( "CBS", "Amt", 0, 0, (char*)&amt, 0);
	PutPoolDataByName( "CBS", "Amt", 0, 1, (char*)&amt, 0);

	/*交易码*/
	PutPoolDataByName( "ABSHEAD", "_tx_code", 0, 0, "7011", 0);
	/*取核心日期*/
	PayGetCoreDate( pb_date);
	/*取流水号*/
	GetPoolDataByName( "ABSHEAD", "_seq_no", 0, 0, pb_seqno, 0);
	/*取机构号*/
	GetPoolDataByName( "ABSHEAD", "organ_no", 0, 0, inst_no, 0);
	/*加急标志*/
    /* Added by MSJ for CBS0000110's fastFlg 20130418 - Start */
	/*fastflag[0] ='0';*/
	GetPoolDataByName( "BUSIIB", "fastFlg", 0, 0, fastflag, 0);
	trim( fastflag );
	
    if( strcmp(fastflag,"0")!=0 && strcmp(fastflag,"1")!=0 )
    {
        WriteLog( ERR_LVL, "Wrong fastflag[%s]", fastflag);
        strcpy( fastflag, "0" );
        PutPoolDataByName( "BUSIIB", "fastFlg", 0, 0, fastflag, 0);
        WriteLog( ERR_LVL, "New fastflag[%s]", fastflag);
    }
    /* 20130418 - End */

	/*网银大额渠道手续费*/
	GetPoolDataByName( "BUSIIB", "fee", 0, 0, s_fee, 0);
	WriteLog( APP_LVL, "fee[%s]", s_fee);
	fee = atof( s_fee);
	PutPoolDataByName( "CBS", "Fee1", 0, 0, (char*)&fee, 0);
	/*取币种*/
	GetPoolDataByName( "BUSIIB", "payCurTyp", 0, 0, curr_type, 0 );
	PutPoolDataByName( "BUSIIB", "currencyTyp", 0, 0, curr_type, 0 );
	GetPoolDataByName( "BUSIIB", "transferChnl", 0, 0, chnltype, 0);

	/*add by fengjx 20150813 for 人行要求节假日小额限度提为50w */
	trim( chnltype );
	WriteLog( APP_LVL, "chnltype[%s]", chnltype);
        
        if ( chnltype[0] != '4')
        {
  	    WriteLog( APP_LVL, "test.........");
  	    ret = PayPubGetSysContent_new(tmp_buf);
            if( ret)
	    {
                WriteLog( ERR_LVL, "取大小额区分金额错");
                strcpy( core_err, "取大少额区分金额错");
                PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, "99999", 0 );
                PutPoolDataByName( "BUSIIB", "thsdesc", 0, 0, core_err, 0 );
                PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, core_err, 0 );
                return( -1);
            }
            if( amt >= atof(tmp_buf) ) /*大于为大额*/
                PutPoolDataByName( "BUSIIB", "transferChnl", 0, 0, "2", 0);
            else
                PutPoolDataByName( "BUSIIB", "transferChnl", 0, 0, "1", 0);

            if ( strcmp(fastflag,"1") == 0 )
                PutPoolDataByName( "BUSIIB", "transferChnl", 0, 0, "2", 0);
	    /*add end*/
            /*add by fengjx 20150908 for 部只开通大额业务而未开通小额业务*/
	    GetPoolDataByName( "BUSIIB", "transferChnl", 0, 0, chnltype, 0);
	    GetPoolDataByName( "BUSIIB", "rcvAcctSvcr", 0, 0, bankno_temp, 0);

            if ( chnltype[0] == '1' )
                 flag_temp[0] = 'B';
            else if ( chnltype[0] == '2' )
                 flag_temp[0] = 'H';

            ret = Aps2HOrBControl_700( bankno_temp, flag_temp);
            if ( ret )
            {
		WriteLog( ERR_LVL, "接收行不允许做跨行转账交易[%s]",bankno_temp);
		sprintf( core_err, "接收行不允许做跨行转账交易[%s]",bankno_temp);
		PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, "99999", 0 );
		PutPoolDataByName( "BUSIIB", "thsdesc", 0, 0, core_err, 0 );
		PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, core_err, 0 );
		return( -1);
            }
	}
	WriteLog( APP_LVL, "chnltype[%s]", chnltype);
	/*add end*/
	ret = NetParaConv( "currencyTyp|transChnl");
	if( ret)
	{
		WriteLog( ERR_LVL, "网银参数转换错");
		strcpy( core_err, "网银参数转换错");
		PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, "99999", 0 );
		PutPoolDataByName( "BUSIIB", "thsdesc", 0, 0, core_err, 0 );
		PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, core_err, 0 );
		return( -1);
	}
	GetPoolDataByName( "PAGTBUF", "currtype", 0, 0, curr_type, 0);
	PutPoolDataByName( "CBS", "CurrType", 0, 0, curr_type, 0);
	/*支付渠道*/
	GetPoolDataByName( "BUSIIB", "transferChnl", 0, 0, chnltype, 0);

	/*计算大小额成本*/
	chg_flag = 0;
	sprintf( tag_in, "CHNL:%s;AMT1:%.2f;FAST:%s;", chnltype, amt, fastflag);
	WriteLog( APP_LVL, "tag_in[%s]", tag_in);
	/**** add by wyf 20130426 ****/
	GetInstFn( inst_no, inst_fn);
	strncpy(tmp_inst_fn,inst_fn,4);
	WriteLog( APP_LVL, "tmp_inst_fn[%s]", tmp_inst_fn);
	if( strlen(tmp_inst_fn) > 0)
        {
		sprintf(tag_in, "%sD005:%s;", tag_in, tmp_inst_fn);
                tmp_inst_fn[2] = '\0';
		sprintf(tag_in, "%sD006:%02s;", tag_in, tmp_inst_fn);
        }

#if 0
	/*add by xxj 20121210*/
	GetPoolDataByName( "BUSIIB", "payCardAcctNb", 0, 0, nofee_acc, 0);
	trim( nofee_acc );
	EXEC SQL SELECT * FROM t_pb_cstm_fee
	WHERE cstm_acc =:nofee_acc;
	if( sqlca.sqlcode)
	{
	   if( SQLCODE == SQLNOTFOUND )
	   {
	      WriteLog( ERR_LVL,"此账号为非特约商户" );
		  ret = RuleEngin( "R0003", 0, tag_in, tag_out);
		  if( ret < 0)
		  {
		     WriteLog( ERR_LVL, "调用手续费试算失败");
			 strcpy( core_err, "手续费试算失败");
			 core_err_no = -1;
			 PutPoolDataByName( "BUSIIB", "thsdesc", 0, 0, core_err, 0);
			 PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char*)&core_err_no,0);
			 PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, core_err, 0 );
			 return( -1);
		  }
		  WriteLog( APP_LVL, "tag_out[%s]", tag_out);
		  p = strstr( tag_out, "FEE1");
		  WriteLog( APP_LVL, "p[%s]", p);
		  q = strchr( p, ':' );
		  WriteLog( APP_LVL, "q[%s]", q);
		  memset( tmp_buf, 0, sizeof( tmp_buf));
		  strcpy( tmp_buf, q+1);
		  cnap_fee = atof(tmp_buf);
	   }
	   else
	   {
	      WriteLog( ERR_LVL,"查询免手续费商户表![%d]",sqlca.sqlcode  );
		  return( -1 );
	   }
	}
	else
	{
	   cnap_fee = 0.00;
	}
#endif

WriteLog( ERR_LVL, "RUN: tag_in[%s]", tag_in);
	ret = RuleEngin( "R0003", 0, tag_in, tag_out);
	if( ret < 0)
	{
		WriteLog( ERR_LVL, "调用手续费试算失败");
		strcpy( core_err, "手续费试算失败");
		core_err_no = -1;
		PutPoolDataByName( "BUSIIB", "thsdesc", 0, 0, core_err, 0);
		PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char*)&core_err_no,0);
		PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, core_err, 0 );
		return( -1);
	}
WriteLog( ERR_LVL, "RUN: tag_out[%s]", tag_out);
	p = strstr( tag_out, "FEE1");
	WriteLog( ERR_LVL, "RUN: p[%s]", p);
	q = strchr( p, ':' );
	WriteLog( ERR_LVL, "RUN: q[%s]", q);
	memset( tmp_buf, 0, sizeof( tmp_buf));
	strcpy( tmp_buf, q+1);
	cnap_fee = atof(tmp_buf);
	/*** modiffy by xxj 20121210 end*/

	WriteLog( ERR_LVL, "RUN: cnap_fee[%f]", cnap_fee);
	PutPoolDataByName( "CBS", "Bal3", 0, 0, (char*)&cnap_fee, 0);
WriteLog( APP_LVL, "test amt[%f]fee[%f]cnap_fee[%f]", amt,fee,cnap_fee);

	if( cnap_fee > 0.001 )
	{
		total_fee = fee - cnap_fee;
	} 
	else
	{
		total_fee = fee;
	}
	WriteLog( APP_LVL, "total_fee[%.2f]", total_fee );
	if( total_fee > 0.001 )
	{
		ret = FRFeeOfInst( total_fee, &openinstfee, &agtinstfee );
        if( ret != 0 )
        {
            WriteLog( APP_LVL, "分润手续费试算错!" );
            strcpy( core_err, "分润手续费试算错!" );
            core_err_no = 99999;
            PutPoolDataByName( "BUSIIB", "thsdesc", 0, 0, core_err, 0 );
			PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char*)&core_err_no,0 );
			PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, core_err, 0 );
            return ( -1 );
        }
        WriteLog( APP_LVL, "openinstfee[%.2f]agtinstfee[%.2f]", openinstfee, agtinstfee );
	}
	/**add by sqf 20110630 for 手续费优化 end**/

	/*更新明细表*/
	/*登记机构及手续费信息*/
	if(chnltype[0] != '4' )
	{
	EXEC SQL UPDATE t_pb_net_dtl
		SET payinstno = :inst_no,
			rcvinstno = '999',
	/**add by sqf 20110504 for 更新转账渠道**/
			transchnl = :chnltype,
	/**add by sqf 20110504 end for 更新转账渠道**/
			accinstno = :inst_no,
			fee1 = :fee,
	/**add by sqf 20110630 for 手续费优化 begin**/
			fee = :agtinstfee,
            fee3 = :openinstfee,
	/**add by sqf 20110630 for 手续费优化 end**/
			fee2 = :cnap_fee
			WHERE trandate = :pb_date
			AND seqno = :pb_seqno;
	if( sqlca.sqlcode || sqlca.sqlerrd[2] != 1)
	{
		WriteLog( ERR_LVL, "update net_dtl err[%d][%d]", sqlca.sqlcode, sqlca.sqlerrd[2]);
		WriteLog( ERR_LVL, "pb_date[%s]pb_seqno[%s]", pb_date, pb_seqno);
		strcpy( core_err, "数据库操作失败");
		core_err_no = -1;
		PutPoolDataByName( "BUSIIB", "thsdesc", 0, 0, core_err, 0);
		PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char*)&core_err_no,0);
		PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, core_err, 0 );
		return( -1);
	}
	}
	else
	{
		sprintf(backup5,"%.2f",fee);
		sprintf(backup6,"%.2f",openinstfee);
		sprintf(backup7,"%.2f",cnap_fee);
	EXEC SQL UPDATE t_pb_net_dtl
		SET payinstno = :inst_no,
			rcvinstno = '999',
	/**add by sqf 20110504 for 更新转账渠道**/
			transchnl = :chnltype,
	/**add by sqf 20110504 end for 更新转账渠道**/
			accinstno = :inst_no,
			backup5 = :backup5,
	/**add by sqf 20110630 for 手续费优化 begin**/
			fee = :agtinstfee,
            backup6 = :backup6,
	/**add by sqf 20110630 for 手续费优化 end**/
			backup7 = :backup7
			WHERE trandate = :pb_date
			AND seqno = :pb_seqno;
	if( sqlca.sqlcode || sqlca.sqlerrd[2] != 1)
	{
		WriteLog( ERR_LVL, "update net_dtl err[%d][%d]", sqlca.sqlcode, sqlca.sqlerrd[2]);
		WriteLog( ERR_LVL, "pb_date[%s]pb_seqno[%s]", pb_date, pb_seqno);
		strcpy( core_err, "数据库操作失败");
		core_err_no = -1;
		PutPoolDataByName( "BUSIIB", "thsdesc", 0, 0, core_err, 0);
		PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char*)&core_err_no,0);
		PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, core_err, 0 );
		return( -1);
	}
	}
/***add by wo  20140904 解决流水号不一致的问题 ***/
	GetPoolDataByName( "BUSIIB", "chnlSeqNb", 0, 0, chnlSeqNb, 0);
	rtrim( chnlSeqNb );
	if( strlen(chnlSeqNb) !=0 )
	{
		WriteLog( APP_LVL, "test[%s]",chnlSeqNb );
		EXEC SQL UPDATE t_pb_net_dtl
			SET chnlseqno = :chnlSeqNb
			WHERE trandate = :pb_date
			AND seqno = :pb_seqno;
		if( sqlca.sqlcode || sqlca.sqlerrd[2] != 1)
		{
			WriteLog( ERR_LVL, "update net_dtl err[%d][%d]", sqlca.sqlcode, sqlca.sqlerrd[2]);
			WriteLog( ERR_LVL, "pb_date[%s]pb_seqno[%s]", pb_date, pb_seqno);
			strcpy( core_err, "数据库操作失败");
			core_err_no = -1;
			PutPoolDataByName( "BUSIIB", "thsdesc", 0, 0, core_err, 0);
			PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char*)&core_err_no,0);
			PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, core_err, 0 );
			return( -1);
		}
	}
/***end by wangou***/
	

WriteLog( APP_LVL, "test amt[%f]fee[%f]cnap_fee[%f]", amt,fee,cnap_fee);
	
	/*预计算转出账户余额 可用余额*/
	GetPoolDataByName( "BUSIIB", "payAvlBal", 0, 0, s_avalbal, 0);
	WriteLog( APP_LVL, "s_avalbal before[%s]", s_avalbal);
	avalbal = atof(s_avalbal);
	if( fee > ZERO_AMT)
		avalbal = avalbal - ( amt + fee);
	else
		avalbal -= amt;
	memset( s_avalbal, 0, sizeof( s_avalbal));
	sprintf( s_avalbal, "%.2f", avalbal);
	WriteLog( APP_LVL, "s_avalbal after[%s]", s_avalbal);
	PutPoolDataByName( "BUSIIB", "payAvlBal", 0, 0, s_avalbal, 0);

	GetPoolDataByName( "BUSIIB", "payBal", 0, 0, s_bal, 0);
	WriteLog( APP_LVL, "s_bal before[%s]", s_bal);
	bal =  atof( s_bal);
	if( fee > ZERO_AMT)
		bal = bal - ( amt + fee);
	else
		bal -= amt;
	memset( s_bal, 0, sizeof( s_bal));
	sprintf( s_bal, "%.2f", bal);
	WriteLog( APP_LVL, "s_bal after[%s]", s_bal);
	PutPoolDataByName( "BUSIIB", "payBal", 0, 0, s_bal, 0);

WriteLog( APP_LVL, "test amt[%f]fee[%f]cnap_fee[%f]", amt,fee,cnap_fee);
	/*实际收费总额*/
	real_amt = amt+fee;
	sprintf( s_real_amt , "%.2f", real_amt);
	PutPoolDataByName( "BUSIIB", "realTotalFee", 0, 0, s_real_amt, 0);
	/*实际收费手续费*/
	real_fee = fee;
	sprintf( s_real_fee , "%.2f", real_fee);
	PutPoolDataByName( "BUSIIB", "realManFee", 0, 0, s_real_fee, 0);
	/**add by sqf for realTotalFee字段传手续费 20110421**/
	PutPoolDataByName( "BUSIIB", "realTotalFee", 0, 0, s_real_fee, 0);
	/**add by sqf for realTotalFee字段传手续费 20110421 end**/

       /* add by fjx 20151127 */
       GetPoolDataByName( "BUSIIB", "use", 0, 0, use, 0);
       rtrim ( use );
       if ( strlen ( use ) == 0 )
           strcpy( use, "行内转账");
       PutPoolDataByName( "CBS", "Remark", 0, 0, use, 0);
       /* add end*/

	return ( 0);
}

/**************************************************************
* 函数名称: Aps2HOrBControl_700                             *
* 函数功能: 根据行号判断sys_flag标志是否满足大小额交易需求    *
* 输入参数: bankno 行号                                       *
*           flag   大小额标志 "H"大额"B"小额                  *
* 输出参数: None                                              *
* 返回值:   (0)   处理成功                                    *
*           (-1)  处理失败                                    *
* 程序员:   yangyun                                           *
* 创建时间: 2015-9-1                                          *
***************************************************************/
int Aps2HOrBControl_700( char *bankno, char *flag)
{
    EXEC SQL BEGIN DECLARE SECTION;
        char sys_flag[20+1];
        char sqlbankno[14+1];
    EXEC SQL END DECLARE SECTION;

    memset( sys_flag, 0x00, sizeof( sys_flag ) );
    memset( sqlbankno, 0x00, sizeof( sqlbankno ) );

    strcpy( sqlbankno, bankno );
    WriteLog( ERR_LVL, "bankno=[%s],flag=[%s]", sqlbankno,flag );
    EXEC SQL SELECT sys_flag INTO :sys_flag
        FROM t_aps2_bank
        WHERE bank_no = :sqlbankno
        AND bank_stat = "1";
    if( SQLCODE )
    {
        WriteLog( APP_LVL, "查询行号信息失败，请与中心联系!" );
        return ( -1 );
    }
    if( flag[0] == 'H' )
    {
        if( sys_flag[0] != '1' )
        {
            WriteLog( APP_LVL, "该行未开通大额支付渠道" );
           return ( -1 );
        }
    } 
    else if( flag[0] == 'B' )
    {
        if( sys_flag[1] != '1' )
        {
            WriteLog( APP_LVL, "该行未开通小额支付渠道" );
            return ( -1 );
         }
    }
    else
    {
        WriteLog( APP_LVL, "判断是否开通大小额失败,请与中心联系!");
        return ( -1 );
    }

    return (0) ;
}
