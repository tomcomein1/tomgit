/***********************************************************************
 * Trans       : 行内代理收费
 * Function    :
 * Input       : 
 * Output      : 
 * Return      : 0 - 成功; -1 - 失败
 * Description :
 * ------------------------------------------------------------------------
 * Author   Action  Date                Content
 * MSJ      create  2015-04-02
 **************************************************************************/
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/types.h>
#include <sys/select.h>
#include <sys/types.h>
#include <errno.h>
#include <sys/stat.h>
#include <errno.h>
#include <sys/stat.h>
#include <time.h>
#include <unistd.h>
#include "atmi.h"       /* TUXEDO  Header File */
#include "fml32.h"
#ifdef ORACLE_DATABASE
EXEC SQL include "pbranchdb.h";
#else
#include "pbranchdb.h"
#endif
#include "pbconstval.h"
#include "pbstructdef.h"
#include "pbvarmacro.h"
#include "pberrlog.h"
#include "pbglbvardef.h"
#include "pbbasefunc.h"
#include "userlog.h"


/* 行内代收费管理表 */
$struct s_agt_mgmt
{
    char agt_code[10+1];     /* 代理代码 */
    char agt_busi[60+1];     /* 代理类别 */
    char agt_acc[25+1];      /* 代理客户清算账号 */
    char fee_flag[2+1];      /* 手续费类型 */
                                 /* 0 - 按比率收取 */
                                 /* 1 - 固定额度收取 */
    int fee_rate;            /* 收费比率 */
    double fee_amt;          /* 固定额度手续费 */
    double fee_min;          /* 收取手续费最小额 */
    double fee_max;          /* 收取手续费最大额 */
    char sdm_acc[25+1];      /* 代理客户行内结算账号 */
    char bakeup1[20+1];      /* 保留字段 */   
    char bakeup2[60+1];      /* 保留字段 */ 
    char bakeup3[60+1];      /* 保留字段 */ 
};


/***********************************************************************
 * Trans       : 行内代理收费
 * Function    : 
 * Input       : 
 * Output      : 
 * Return      : 0 - 成功; -1 - 失败
 * Description :
 * ------------------------------------------------------------------------
 * Author   Action  Date                Content
 * MSJ      create  2015-04-02
 **************************************************************************/
int agt_charge()
{
    EXEC SQL BEGIN DECLARE SECTION;
        char out_inst[10+1];
        char inn_inst[10+1];
        char pb_date[10+1];
        char pb_seqno[10+1];
        double fee = 0;
        char in_acc[32+1];
        char tmp_acc[32+1];
        struct s_agt_mgmt agt_buss;
    EXEC SQL END DECLARE SECTION;
    char custNm[121];
    char out_acc[32+1];
    char fee_flag[2+1];
    char c_tran_amt[20+1];
    char c_fee[20+1];
    char s_avalbal[20+1];
    char s_bal[20+1];
    char s_real_amt[20+1];
    char err_msg[128+1];
    char curr_type[6+1];
    char trancode[16+1];
    double tran_amt = 0;
    double avalbal = 0;
    double bal = 0;
    double real_amt = 0;
    long ret = 0;
    long app_err_no = 0;
    long hoststat = -1;
    long summno = 0;

    memset( &agt_buss, 0x00, sizeof(agt_buss) );
    memset( custNm, 0, sizeof( custNm) );
    memset( out_acc, 0, sizeof( out_acc) );
    memset( in_acc, 0, sizeof( in_acc) );
    memset( tmp_acc, 0, sizeof( tmp_acc) );
    memset( fee_flag, 0, sizeof( fee_flag) );
    memset( c_fee, 0, sizeof( c_fee) );
    memset( c_tran_amt, 0, sizeof( c_tran_amt) );
    memset( s_avalbal, 0, sizeof( s_avalbal) );
    memset( s_bal, 0, sizeof( s_bal) );
    memset( s_real_amt, 0, sizeof( s_real_amt) );
    memset( err_msg, 0, sizeof( err_msg) );
    memset( curr_type, 0, sizeof( curr_type) );
    memset( out_inst, 0, sizeof( out_inst) );
    memset( inn_inst, 0, sizeof( inn_inst) );
    memset( pb_date, 0, sizeof( pb_date) );
    memset( pb_seqno, 0, sizeof( pb_seqno) );
    memset( trancode, 0, sizeof( trancode) );

    ret = Acc_Chk();
    if( ret != 0 )
    {
        WriteLog( ERR_LVL, "转出账号检查出错" );
        return (-1);
    }
    
    /*取核心日期*/
    PayGetCoreDate( pb_date );
    /*取交易流水*/
    GetPoolDataByName( "ABSHEAD", "_seq_no", 0, 0, pb_seqno, 0 );
    WriteLog( APP_LVL, "pb_date[%s] pb_seqno[%s]", pb_date, pb_seqno );
    
    /*取转出账号*/
    GetPoolDataByName( "BUSIIB", "payCardAcctNb", 0, 0, out_acc, 0 );
    rtrim(out_acc);
    WriteLog( APP_LVL, "out_acc[%s]", out_acc );
    
    /*取转出户名*/
    GetPoolDataByName( "BUSIIB", "payCustNm", 0, 0, custNm, 0 );
    rtrim(custNm);
    WriteLog( APP_LVL, "custNm[%s]", custNm );
    
    /*转出开户行*/
    GetPoolDataByName( "BUSIIB", "openBrchID",0, 0, out_inst, 0);
    rtrim(out_inst);
    WriteLog( APP_LVL, "out_inst[%s]", out_inst );
    
    /*取交易金额*/
    GetPoolDataByName( "BUSIIB", "transAmt", 0, 0, c_tran_amt, 0 );
    rtrim(c_tran_amt);
    tran_amt = atof(c_tran_amt);
    WriteLog( APP_LVL, "c_tran_amt[%s] tran_amt[%.2f]", c_tran_amt, tran_amt );
    
    /*币种*/
    GetPoolDataByName( "BUSIIB", "payCurTyp", 0, 0, curr_type, 0 );
    rtrim(curr_type);
    WriteLog( APP_LVL, "inn_inst[%s]", curr_type );
    
    /*取代理编号*/
    GetPoolDataByName( "BUSIIB", "remarkCd", 0, 0, agt_buss.agt_code, 0 );
    rtrim(agt_buss.agt_code);
    WriteLog( ERR_LVL, "代理编号[%s]", agt_buss.agt_code );
    
    /*取行内代收费管理表信息*/
    EXEC SQL SELECT * INTO :agt_buss
        FROM t_agt_mgmt
        WHERE agt_code = :agt_buss.agt_code ;
    if( (sqlca.sqlcode!=0) && (sqlca.sqlcode!=100) )
    {
        WriteLog( ERR_LVL, "检索代收费管理表失败[%d]", sqlca.sqlcode );
        app_err_no = 99999;
        strcpy( err_msg, "数据库查询失败，请稍后重试" );
        PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, "399999", 0 );
        PutPoolDataByName( "BUSIIB", "thsdesc",  0, 0, err_msg,  0 );
        PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&app_err_no, 0 );
        PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
        return (-1);
    }
    else if( sqlca.sqlcode==100 )
    {
        WriteLog( ERR_LVL, "无本项收费项目[%d]", sqlca.sqlcode );
        app_err_no = 99999;
        sprintf( err_msg, "无本项收费项目" );
        PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, "399999", 0 );
        PutPoolDataByName( "BUSIIB", "thsdesc",  0, 0, err_msg,  0 );
        PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&app_err_no, 0 );
        PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
        return (-1);
    }
    
    /*取手续费标志*/
    GetPoolDataByName( "BUSIIB", "feeFlg", 0, 0, fee_flag, 0 );
    rtrim(fee_flag);
    WriteLog( APP_LVL, "fee_flag[%s]", fee_flag );
    if( fee_flag[0]=='0' )
    {
        WriteLog( ERR_LVL, "本代收费项目无手续费[%s]", fee_flag );
        fee = 0;
    }
    else if( fee_flag[0]=='1' )
    {
        GetPoolDataByName( "BUSIIB", "fee", 0, 0, c_fee, 0 );
        rtrim(c_fee);
        fee = atof( c_fee );
        WriteLog( ERR_LVL, "以接收信息为准，手续费[%.2f][%s] fee_flag[%s]", fee, c_fee, fee_flag );
    }
    else
    {
        if( agt_buss.fee_flag[0]='0' )  /* 0 - 按比率收取, 1 - 固定额度收取 */
            fee = tran_amt * agt_buss.fee_rate;
        else
            fee = agt_buss.fee_amt;
        
        if( fee > agt_buss.fee_max )
            fee = agt_buss.fee_max;
        
        if( fee < agt_buss.fee_min )
            fee = agt_buss.fee_min;
        WriteLog( ERR_LVL, "根据配置算得手续费fee[%.2f]", fee );
    }
    
    /* 代理客户行内结算账号 */
    trim(agt_buss.sdm_acc);
    strcpy( in_acc, agt_buss.sdm_acc );
    WriteLog( APP_LVL, "行内代理收费账号[%s]", in_acc );
   
    if( strcmp(agt_buss.agt_code,"902800001")==1 )    /* 贴膜卡单笔代收费 */ 
    { 
        WriteLog( ERR_LVL, "拼接贴膜卡单笔代收费账号" );
        
        EXEC SQL SELECT content INTO :tmp_acc FROM t_pay_sys_para 
                 WHERE inst_no = 'NET' AND data_code = 'TM_card' ;
        if( (sqlca.sqlcode!=0) && (sqlca.sqlcode!=100) )
        {
            WriteLog( ERR_LVL, "检索配置表t_pay_sys_para失败[%d]", sqlca.sqlcode );
            app_err_no = 99999;
            strcpy( err_msg, "数据库查询失败，请稍后重试" );
            PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, "399999", 0 );
            PutPoolDataByName( "BUSIIB", "thsdesc",  0, 0, err_msg,  0 );
            PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&app_err_no, 0 );
            PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
            return (-1);
        }
        else if( sqlca.sqlcode==100 )
        {
            WriteLog( ERR_LVL, "检索配置表t_pay_sys_para无数据[%d]", sqlca.sqlcode );
            app_err_no = 99999;
            sprintf( err_msg, "数据库查询失败，请联系客服处理" );
            PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, "399999", 0 );
            PutPoolDataByName( "BUSIIB", "thsdesc",  0, 0, err_msg,  0 );
            PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&app_err_no, 0 );
            PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
            return (-1);
        }
        
        memset( in_acc, 0x00, sizeof(in_acc) );
        sprintf( in_acc, "%s015%s", out_inst, tmp_acc ); 
        trim(in_acc);
        WriteLog( APP_LVL, "贴膜卡单笔代收费in_acc[%s]", in_acc );
    }

 
    /*转入开户行*/
    GetPoolDataByName( "BUSIIB", "rcvBrchID", 0, 0, inn_inst, 0);
    rtrim(inn_inst);
    WriteLog( APP_LVL, "inn_inst[%s]", inn_inst);
    if( strlen(inn_inst)==0 )
    {
        strncpy( inn_inst, in_acc, 4 );
        WriteLog( APP_LVL, "根据代收费账号取机构号[%s]", inn_inst );
    }
    
    /**账务接口变量准备**/
    /*渠道*/
    PutPoolDataByName( "ABSHEAD", "chnl_no", 0, 0, "W", 0 );
    
    /*柜员*/
    PutPoolDataByName( "ABSHEAD", "_tlr_no", 0, 0, "888886", 0 );
    WriteLog( APP_LVL, "d_tran_amt[%s] tran_amt[%.2f]", c_tran_amt, tran_amt );
    /*交易码*/
    GetPoolDataByName( "PBSYS", "RTranCode", 0, 0, trancode, 0 );
    WriteLog( APP_LVL, "d_c_tran_amt[%s] tran_amt[%.2f]", c_tran_amt, tran_amt );
    rtrim( trancode );
    PutPoolDataByName( "ABSHEAD", "_tx_code", 0, 0, "7040", 0 );
    PutPoolDataByName( "ABSHEAD", "organ_no", 0, 0, out_inst, 0 );
    PutPoolDataByName( "ABSHEAD", "query_inst", 0, 0, inn_inst, 0 );
    
    /*核心记账属性*/
    PutPoolDataByName( "CBS", "AccSign", 0, 0, "0", 0 );    /*0-记账 1-开户*/
    /*摘要*/
    rtrim(agt_buss.agt_busi);
    WriteLog( ERR_LVL, "Summary[%s]", agt_buss.agt_busi );
    PutPoolDataByName( "CBS", "Summary", 0, 0,  agt_buss.agt_busi, 0 );
    PutPoolDataByName( "CBS", "Summary", 0, 1,  agt_buss.agt_busi, 0 );
    /*摘要码*/
    summno = 200;
    PutPoolDataByName( "CBS", "SummNo", 0, 0, (char *)&summno, 0);
    
    /**转账：0维-转出账号 1维转入账号**/
    /**现转标志**/
    PutPoolDataByName( "CBS", "CshTsfFlag", 0, 0, "1", 0 );
    PutPoolDataByName( "CBS", "CshTsfFlag", 0, 1, "1", 0 );
    /**内部帐标志**/
    PutPoolDataByName( "CBS", "AccFlag", 0, 0, "1", 0 );
    PutPoolDataByName( "CBS", "AccFlag", 0, 1, "1", 0 );
    
    /*币种*/
    PutPoolDataByName( "BUSIIB", "currencyTyp", 0, 0, curr_type, 0 );
    ret = NetParaConv( "currencyTyp|cashFlg|pwdTyp" );
    if( ret )
    {
        WriteLog( ERR_LVL, "网银参数转换错" );
        strcpy( err_msg, "网银参数转换错" );
        app_err_no = 99999;
        PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, "399999", 0 );
        PutPoolDataByName( "BUSIIB", "thsdesc", 0, 0, err_msg, 0 );
        PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char*)&app_err_no,0 );
        PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
        return (-1);
    }
    GetPoolDataByName( "PAGTBUF", "currtype", 0, 0, curr_type, 0);
    PutPoolDataByName( "CBS", "CurrType", 0, 0, curr_type, 0 );

    /*账号*/
    WriteLog( APP_LVL, "out_acc[%s]in_acc[%s]", out_acc, in_acc );
    PutPoolDataByName( "CBS", "Account", 0, 0, out_acc, 0 );
    PutPoolDataByName( "CBS", "Account", 0, 1, in_acc, 0 );

    /*金额*/
    memset( c_tran_amt, 0x00, sizeof(c_tran_amt) );
    GetPoolDataByName( "BUSIIB", "transAmt", 0, 0, c_tran_amt, 0 );
    rtrim(c_tran_amt);
    tran_amt = atof(c_tran_amt);
    WriteLog( APP_LVL, "c_tran_amt[%s] tran_amt[%.2f]", c_tran_amt, tran_amt );
    PutPoolDataByName( "CBS", "Amt", 0, 0, &tran_amt, 0 );
    PutPoolDataByName( "CBS", "Amt", 0, 1, &tran_amt, 0 );

    /*手续费*/
    if( fee<0.001 )        /*不收手续费*/
    {
        PutPoolDataByName( "CBS", "SubTranCode", 0, 0, "01", 0 );
    }
    else
    {
        PutPoolDataByName( "CBS", "SubTranCode", 0, 0, "02", 0 );
        PutPoolDataByName( "CBS", "Phone", 0, 0, out_acc, 0 );
        PutPoolDataByName( "CBS", "Fee1", 0, 0,&fee, 0 );
        PutPoolDataByName( "CBS", "Account", 0, 2, out_acc, 0 );
        PutPoolDataByName( "CBS", "Account", 0, 3, in_acc, 0 );
        PutPoolDataByName( "CBS", "Amt", 0, 2, &fee, 0 );
        PutPoolDataByName( "CBS", "Amt", 0, 3, &fee, 0 );
    }

    /**调用记账接口**/
    ret = PbRegAcc();
    GetPoolDataByName( "ABSHEAD", "_host_stat", 0, 0, &hoststat, 0 );
    if( ret != 0 )
    {
        WriteLog( ERR_LVL, "Call PbRegAcc Err!" );
        if( ret == -1 )
        {
            WriteLog( ERR_LVL, "交易超时，PbRegAcc timeout!" );
            app_err_no = 99999;
            strcpy( err_msg, "交易超时，请在账户查询里查询余额及子账户!" );
            PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&app_err_no, 0 );
            PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
            /**冲正**
            ret = UpdNetBank_PL_AccJnl( pb_date, pb_seqno );
            if( ret != 0 )
            {
                WriteLog( ERR_LVL, "更新ACCJNL状态失败!" );
                strcpy( err_msg, "更新ACCJNL状态失败!" );
                app_err_no = 99999;
                PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, "399999", 0 );
                PutPoolDataByName( "BUSIIB", "thsdesc", 0, 0, err_msg, 0 );
                PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&app_err_no, 0 );
                PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
                return ( -1 );
            }
            ret = NetBank_PL_InsRevJnl();
            if( ret < 0 )
            {
                WriteLog( ERR_LVL, "插入冲正流水表失败!" );
                strcpy( err_msg, "插入冲正流水表失败!" );
                app_err_no = 99999;
                PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, "399999", 0 );
                PutPoolDataByName( "BUSIIB", "thsdesc", 0, 0, err_msg, 0 );
                PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&app_err_no, 0 );
                PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
                return ( -1 );
             }
            **/
        }
        else
        {
            WriteLog( ERR_LVL, "核心记账失败!hoststat[%d]", hoststat );
            app_err_no = 99999;
            memset( err_msg, 0x00, sizeof( err_msg ) );
            GetPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
            trim( err_msg );
            if( strlen( err_msg ) == 0 )
            {
                strcpy( err_msg, "核心记账失败" );
            }
            ret = DelNetBank_PL_AccJnl( pb_date, pb_seqno );
            if( ret < 0 )
            {
                WriteLog( ERR_LVL, "删除ACCJNL表失败!" );
                strcpy( err_msg, "删除ACCJNL表失败!" );
                PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, "399999", 0 );
                PutPoolDataByName( "BUSIIB", "thsdesc", 0, 0, err_msg, 0 );
                PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&app_err_no, 0 );
                PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
                return ( -1 );
            }
            PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, "399999", 0 );
            PutPoolDataByName( "BUSIIB", "thsdesc", 0, 0, err_msg, 0 );
            PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&app_err_no, 0 );
            PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
        }
        WriteLog( ERR_LVL, "记账失败!" );
        return ( -1 );
    }
    
    
    /*取核心日期*/
    PayGetCoreDate( pb_date );
    /*取交易流水*/
    GetPoolDataByName( "ABSHEAD", "_seq_no", 0, 0, pb_seqno, 0 );

    /*登记机构及手续费信息*/
    EXEC SQL UPDATE t_pb_net_dtl
        SET payinstno = :out_inst, 
            rcvinstno = :inn_inst, 
            accinstno = :out_inst,
            rcvacc = :in_acc,
            fee = :fee,
            fee1 = :fee
        WHERE trandate = :pb_date
          AND seqno = :pb_seqno;
    if( sqlca.sqlcode || sqlca.sqlerrd[2] != 1)
    {
        WriteLog( ERR_LVL, "update net_dtl err[%d][%d]", sqlca.sqlcode, sqlca.sqlerrd[2]);
        WriteLog( ERR_LVL, "pb_date[%s]pb_seqno[%s]", pb_date, pb_seqno);
        strcpy( err_msg, "数据库操作失败");
        app_err_no = 99999;
        PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, "399999", 0 );
        PutPoolDataByName( "BUSIIB", "thsdesc", 0, 0, err_msg, 0);
        PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char*)&app_err_no,0);
        PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg,0);
        return( -1);
    }
    
    /*转出账户余额 可用余额*/
    GetPoolDataByName( "BUSIIB", "bal", 0, 0, s_bal, 0);
    rtrim(s_bal);
    WriteLog( APP_LVL, "转出账户余额[%s]", s_bal);
    PutPoolDataByName( "BUSIIB", "payBal", 0, 0, s_bal, 0 );
    
    /*转出账户可用余额*/
    GetPoolDataByName( "BUSIIB", "avlBal", 0, 0, s_avalbal, 0 );
    rtrim(s_avalbal);
    WriteLog( APP_LVL, "可用余额[%s]", s_avalbal);
    PutPoolDataByName( "BUSIIB", "payAvlBal", 0, 0, s_avalbal, 0 );
    
    /*主机流水号*/
    WriteLog( APP_LVL, "pb_seqno[%s]", pb_seqno);
    PutPoolDataByName( "BUSIIB", "hostSeqNb", 0, 0, pb_seqno, 0 );
    
    if( fee < 0.001 )
    {
        strcpy( s_real_amt, c_tran_amt );
        strcpy( c_fee, "0.00" );
        WriteLog( APP_LVL, "无手续费 s_real_amt[%s] c_tran_amt[%s]", s_real_amt, c_tran_amt );
    }
    else
    {
        real_amt = tran_amt + fee;
        sprintf( s_real_amt, "%.2f", real_amt );
        
        memset( c_fee, 0x00, sizeof(c_fee) );
        sprintf( c_fee, "%.2f", fee );
    }
    
    WriteLog( ERR_LVL, "s_real_amt[%s] c_fee[%s] c_tran_amt[%s]", s_real_amt, c_fee, c_tran_amt );
    /*实际收费总金额*/
    PutPoolDataByName( "BUSIIB", "realTotalFee", 0, 0, s_real_amt, 0 );
    /*实收手续费金额*/
    PutPoolDataByName( "BUSIIB", "realManFee", 0, 0, c_fee, 0 );
    /*实收交易金额*/
    PutPoolDataByName( "BUSIIB", "realPostFee", 0, 0, c_tran_amt, 0 );
    
    PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, "000000", 0 );
    PutPoolDataByName( "BUSIIB", "thsdesc", 0, 0, "交易成功", 0);

    return( 0);
}



/***********************************************************************
 * Trans       : 账号检查
 * Function    : 
 * Input       : 
 * Output      : 
 * Return      : 0 - 成功; -1 - 失败
 * Description :
 * ------------------------------------------------------------------------
 * Author   Action  Date                Content
 * MSJ      create  2015-04-02
 **************************************************************************/
int Acc_Chk()
{
    char Pay_Acc[25+1];
    char custNm[121];
    char core_custNm[121];
    char CdmAccStat[60+1];
    char SdmAccStat[60+1];
    char CardAccStat[60+1];
    char acc_stats[10+1];
    char card_stats[10+1];
    char avlBal[20+1];
    char transAmt[20+1];
    char err_msg[128+1];
    long errcode;
    double curr_bal = 0;
    double tran_amt = 0;
    int ret = 0;

    memset(Pay_Acc,0x00,sizeof(Pay_Acc));
    memset(custNm,0x00,sizeof(custNm));
    memset(core_custNm,0x00,sizeof(core_custNm));
    memset( CdmAccStat, 0x00, sizeof(CdmAccStat) );
    memset( SdmAccStat, 0x00, sizeof(SdmAccStat) );
    memset( CardAccStat, 0x00, sizeof(CardAccStat) );
    memset( acc_stats, 0x00, sizeof(acc_stats) );
    memset( card_stats, 0x00, sizeof(card_stats) );
    memset(avlBal,0,sizeof(avlBal));
    memset(transAmt,0,sizeof(transAmt));
    memset(err_msg,0,sizeof(err_msg));
    
    GetPoolDataByName( "BUSIIB", "payCardAcctNb", 0, 0, Pay_Acc, 0 );
    rtrim( Pay_Acc );
    WriteLog( APP_LVL, "payCardAcctNb[%s]", Pay_Acc );
    
    GetPoolDataByName( "BUSIIB", "custNm", 0, 0, core_custNm, 0 );
    rtrim( core_custNm );
    WriteLog( APP_LVL, "core_custNm[%s]", core_custNm );
    
    GetPoolDataByName( "BUSIIB", "payCustNm", 0, 0, custNm, 0 );
    rtrim( custNm );
    WriteLog( APP_LVL, "core_custNm[%s]", custNm );
    if( strcmp(core_custNm,custNm)!=0 )
    {
        WriteLog( ERR_LVL, "户名检查不符：核心[%s]，传入[%s]", core_custNm, custNm );
        errcode=99999;
        strcpy( err_msg, "户名检查不符" );
        PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
        PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, "1", 0 );
        PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode,  0 );
        return( -1 );
    }
    
    GetPoolDataByName( "BUSIIB", "avlBal", 0, 0, avlBal, 0 );
    trim( avlBal );
    curr_bal = atof(avlBal);
    WriteLog( APP_LVL, "avlBal[%s] curr_bal[%.2f]", avlBal, curr_bal );
    
    GetPoolDataByName( "BUSIIB", "transAmt", 0, 0, transAmt, 0 );
    trim( transAmt );
    tran_amt = atof(transAmt);
    WriteLog( APP_LVL, "transAmt[%s] tran_amt[%.2f]", transAmt, tran_amt );
    
    if( tran_amt+0.001 > curr_bal )
    {
        WriteLog( ERR_LVL, "账号余额[%.2f]不足，交易金额[%.2f]", curr_bal, tran_amt );
        errcode=99999;
        sprintf( err_msg, "账号余额[%.2f]不足", curr_bal );
        PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode, 0 );
        PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
        return (-1);
    }
    
    GetPoolDataByName( "PAGTBUF", "data1", 0, 0, CdmAccStat, 0 );
    GetPoolDataByName( "PAGTBUF", "data2", 0, 0, SdmAccStat, 0 );
    GetPoolDataByName( "PAGTBUF", "data3", 0, 0, CardAccStat, 0 );
    rtrim( CdmAccStat );
    rtrim( SdmAccStat );
    rtrim( CardAccStat );
    WriteLog( ERR_LVL, "#############[%s][%s][%s]", CdmAccStat, SdmAccStat, CardAccStat );
    
    if( strlen(CdmAccStat) > 0 ) 
    {
        if( CdmAccStat[0] != '0' ) 
        {
            strcpy( acc_stats, "销户");
            WriteLog( ERR_LVL, "账号状态为[%s]", acc_stats );
        } 
        else if ( CdmAccStat[1] != '0' && CdmAccStat[1] != '3' )
        {
            strcpy( acc_stats, "冻结");
            WriteLog( ERR_LVL, "账号状态为[%s]", acc_stats );
        } 
        else if( CdmAccStat[2] != '0' ) 
        {
            strcpy( acc_stats, "挂失");
            WriteLog( ERR_LVL, "账号状态为[%s]", acc_stats );
        } 
        /* Added by MSJ for 止付 - 20140530 */
        else if( CdmAccStat[3]!='0' && CdmAccStat[3]!='3' ) 
        {
            strcpy( acc_stats, "止付");
            WriteLog( ERR_LVL, "账号状态为[%s]", acc_stats );
        } 
        else 
        {
            strcpy( acc_stats, "正常");
            WriteLog( ERR_LVL, "账号状态为[%s]", acc_stats );
        }
    }
    else if( strlen(SdmAccStat) > 0 ) 
    {
        if( SdmAccStat[0] != '0' ) 
        {
            strcpy( acc_stats, "销户");
            WriteLog( ERR_LVL, "账号状态为[%s]", acc_stats );
        } 
        else if ( SdmAccStat[1] != '0' && SdmAccStat[1] != '3' )
        {
            strcpy( acc_stats, "冻结");
            WriteLog( ERR_LVL, "账号状态为[%s]", acc_stats );
        }
        else if( SdmAccStat[2] != '0' ) 
        {
            strcpy( acc_stats, "挂失");
            WriteLog( ERR_LVL, "账号状态为[%s]", acc_stats );
        }
        /* Added by MSJ for 止付 - 20140530 */
        else if( SdmAccStat[3]!='0' && SdmAccStat[3]!='3' ) 
        {
            strcpy( acc_stats, "止付");
            WriteLog( ERR_LVL, "账号状态为[%s]", acc_stats );
        } 
        else 
        {
            strcpy( acc_stats, "正常");
            WriteLog( ERR_LVL, "账号状态为[%s]", acc_stats );
        }
    }
    
    if( strlen(CardAccStat)>0 ) 
    {
        if( CardAccStat[0] != '0' ) 
        {
            strcpy( card_stats, "销户");
            WriteLog( ERR_LVL, "卡号状态为[%s]", card_stats );
        } 
        else if( CardAccStat[1] != '0' ) 
        {
            strcpy( card_stats, "冻结");
            WriteLog( ERR_LVL, "卡号状态为[%s]", card_stats );
        } 
        else if( CardAccStat[2] != '0' ) {
            strcpy( card_stats, "挂失");
            WriteLog( ERR_LVL, "卡号状态为[%s]", card_stats );
        }
        else if( CardAccStat[3] != '0' ) {
            strcpy( card_stats, "锁定");
            WriteLog( ERR_LVL, "卡号状态为[%s]", card_stats );
        }
        else 
        {
            strcpy( card_stats, "正常");
            WriteLog( ERR_LVL, "卡号状态为[%s]", card_stats );
        }
    }
    else
    {
        if( IsCardNo(Pay_Acc)==0 )
        {
            WriteLog( ERR_LVL, "卡账号状态未返回 ERR:[%s]", CardAccStat );
            errcode=99999;
            sprintf( err_msg, "核心查询有误" );
            PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
            PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, "1", 0 );
            PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode,  0 );
            return( -1 );
        }
    }

    trim( acc_stats );
    if( strcmp(acc_stats,"正常")!=0 )
    {
        WriteLog( ERR_LVL, "账号状态异常ERR: [%s]", acc_stats );
        errcode=99999;
        sprintf( err_msg, "账号已%s", acc_stats );
        PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
        PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, "1", 0 );
        PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode,  0 );
        return( -1 );
    }
    
    trim( card_stats );
    if( strcmp(card_stats,"正常")!=0 )
    {
        if( IsCardNo(Pay_Acc)==0 )
        {
            WriteLog( ERR_LVL, "卡号状态异常ERR: [%s]", card_stats );
            errcode=99999;
            sprintf( err_msg, "卡号已%s", card_stats );
            PutPoolDataByName( "ABSHEAD", "_error_code", 0, 0, err_msg, 0 );
            PutPoolDataByName( "BUSIIB", "thsretCd", 0, 0, "1", 0 );
            PutPoolDataByName( "ABSHEAD", "app_err_no", 0, 0, (char *)&errcode,  0 );
            return( -1 );
        }
    }
        
    WriteLog( ERR_LVL, "账号检查成功" );
    return 0;
}

